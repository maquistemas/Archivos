--CREACION DE ESTRUCTURA DE SCHEMA DE BD Y ESTRUCTURA DE PROGRAMACIÓN:
--PASO1: TBS, USER, TABLAS.




sql> connect sys/manager as sysdba




CREATE TABLESPACE TBS_20082018
DATAFILE 'E:ORACLE01\DF_20082018'
SIZE 10M;

CREATE USER U_20082018 IDENTIFIED BY "123"
DEFAULT TABLESPACE TBS_20082018
QUOTA UNLIMITED ON TBS_20082018;

GRANT DBA TO U_20082018;

CREATE TABLE U_20082018.TB_USUARIO(USUARIO_ID INTEGER PRIMARY KEY, USUARIO_NAME VARCHAR(50), USUARIO_PASSWORD INTEGER)
TABLESPACE TBS_20082018;

CREATE TABLE  U_20082018.TB_CLIENTE(CLIENTE_CUENTA INTEGER PRIMARY KEY, CLIENTE_NOMBRE VARCHAR(50), CLIENTE_APELLIDO VARCHAR(50), CLIENTE_USUARIO_ID INTEGER)
TABLESPACE TBS_20082018;

 CREATE TABLE  U_20082018.TB_CUENTA(CUENTA INTEGER PRIMARY KEY, CUENTA_SALDO NUMBER)
 TABLESPACE TBS_20082018;

CREATE TABLE  U_20082018.TB_TRANSFERENCIA(
TRANSFERENCIA_ID INTEGER PRIMARY KEY,
TRANSFERENCIA_USUARIO_ID INTEGER,
TRANSFERENCIA_CUENTA_ORIGEN INTEGER,
TRANSFERENCIA_CUENTA_DESTINO INTEGER,
TRANSFERENCIA_MONTO NUMBER,
TRANSFERENCIA_TIPO CHAR)
TABLESPACE TBS_20082018;

CREATE TABLE  U_20082018.TB_AUDITORIA(
AUDITORIA_ID INTEGER PRIMARY KEY,
AUDITORIA_FECHA DATE,
AUDITORIA_SCHEMA VARCHAR(50),
AUDITORIA_TRANSFERENCIA_ID INTEGER)
TABLESPACE TBS_20082018;

---------------------------------------------------------------------------------------------------------------------------
--CONSTRAINTS
--Recuerde colocar el nombre de la restricción en mayúsculas, sino Oracle no la reconocerá.
-------------------------------------------------------------------------------------------------------------------------
/*ELIMINAR CONSTRAINT
ALTER TABLE TB_TRANSFERENCIA DROP CONSTRAINT FK_TRANSFERENCIA_USUARIO_ID;
ALTER TABLE TB_TRANSFERENCIA DROP CONSTRAINT FK_TRANSFERENCIA_CUENTA_ORIGEN;
ALTER TABLE TB_TRANSFERENCIA DROP CONSTRAINT FK_TRANSFERENCIA_CTA_DESTINO;
ALTER TABLE TB_AUDITORIA DROP CONSTRAINT FK_AUDITORIA_TRANSFERENCIA_ID;
*/

/*TRUNCAR TABLAS
TRUNCATE TABLE TB_TRANSFERENCIA;
TRUNCATE TABLE TB_AUDITORIA;
*/

ALTER TABLE U_20082018.TB_CUENTA
ADD CONSTRAINT FK_CUENTA
FOREIGN KEY(CUENTA)
REFERENCES U_20082018.TB_CLIENTE(CLIENTE_CUENTA);


ALTER TABLE U_20082018.TB_TRANSFERENCIA
ADD CONSTRAINT FK_TRANSFERENCIA_USUARIO_ID
FOREIGN KEY(TRANSFERENCIA_USUARIO_ID)
REFERENCES U_20082018.TB_USUARIO(USUARIO_ID);

ALTER TABLE U_20082018.TB_TRANSFERENCIA
ADD CONSTRAINT FK_TRANSFERENCIA_CUENTA_ORIGEN
FOREIGN KEY(TRANSFERENCIA_CUENTA_ORIGEN)
REFERENCES U_20082018.TB_CUENTA(CUENTA);

ALTER TABLE U_20082018.TB_TRANSFERENCIA
ADD CONSTRAINT FK_TRANSFERENCIA_CTA_DESTINO
FOREIGN KEY(TRANSFERENCIA_CUENTA_DESTINO)
REFERENCES U_20082018.TB_CUENTA(CUENTA);


ALTER TABLE U_20082018.TB_AUDITORIA
ADD CONSTRAINT FK_AUDITORIA_TRANSFERENCIA_ID
FOREIGN KEY(AUDITORIA_TRANSFERENCIA_ID)
REFERENCES U_20082018.TB_TRANSFERENCIA(TRANSFERENCIA_ID);

ALTER TABLE U_20082018.TB_CLIENTE
ADD CONSTRAINT FK_CLIENTE_USUARIO_ID
FOREIGN KEY(CLIENTE_USUARIO_ID)
REFERENCES U_20082018.TB_USUARIO(USUARIO_ID);

------------------------------------------------------------------------------


CREATE SEQUENCE SQ_TB_USUARIO;
INSERT INTO U_20082018.TB_USUARIO VALUES(SQ_TB_USUARIO.NEXTVAL, 'admin', 123);
INSERT INTO U_20082018.TB_USUARIO VALUES(SQ_TB_USUARIO.NEXTVAL, 'cliente1', 123);
INSERT INTO U_20082018.TB_USUARIO VALUES(SQ_TB_USUARIO.NEXTVAL, 'ventanilla1', 123);
INSERT INTO U_20082018.TB_USUARIO VALUES(SQ_TB_USUARIO.NEXTVAL, 'ventanilla2', 123);
INSERT INTO U_20082018.TB_USUARIO VALUES(SQ_TB_USUARIO.NEXTVAL, 'cliente2', 123);
INSERT INTO U_20082018.TB_USUARIO VALUES(SQ_TB_USUARIO.NEXTVAL, 'cliente3', 123);
SELECT * FROM U_20082018.TB_USUARIO;



CREATE SEQUENCE SQ_TB_CLIENTE;


--------------------------------------------------------------------------------------------
-----------PAQUETE PACK_TB_CLIENTE
---------------------------------------------------------------------------------------------
--CABECERA
CREATE OR REPLACE PACKAGE PACK_TB_CLIENTE AS

PROCEDURE SP_CREATE(PAR_NOMBRE VARCHAR, PAR_APELLIDO VARCHAR, PAR_CLIENTE_USUARIO_ID INTEGER);

PROCEDURE SP_UPDATE(PAR_CLIENTE_CUENTA INTEGER, PAR_CLIENTE_NOMBRE VARCHAR, PAR_CLIENTE_APELLIDO VARCHAR,  PAR_CLIENTE_USUARIO_ID INTEGER);

PROCEDURE SP_DELETE(PAR_CLIENTE_CUENTA INTEGER);

END PACK_TB_CLIENTE;

/


------BODY
CREATE OR REPLACE PACKAGE BODY PACK_TB_CLIENTE AS

PROCEDURE SP_CREATE(PAR_NOMBRE VARCHAR, PAR_APELLIDO VARCHAR,  PAR_CLIENTE_USUARIO_ID INTEGER)
IS

BEGIN
INSERT INTO U_20082018.TB_CLIENTE VALUES(SQ_TB_CLIENTE.NEXTVAL, PAR_NOMBRE, PAR_APELLIDO, PAR_CLIENTE_USUARIO_ID);
COMMIT;

END;



PROCEDURE SP_UPDATE(PAR_CLIENTE_CUENTA INTEGER, PAR_CLIENTE_NOMBRE VARCHAR, PAR_CLIENTE_APELLIDO VARCHAR,  PAR_CLIENTE_USUARIO_ID INTEGER)
IS

BEGIN
UPDATE U_20082018.TB_CLIENTE
SET 
CLIENTE_NOMBRE = PAR_CLIENTE_NOMBRE,
CLIENTE_APELLIDO = PAR_CLIENTE_APELLIDO,
CLIENTE_USUARIO_ID =  PAR_CLIENTE_USUARIO_ID
WHERE CLIENTE_CUENTA = PAR_CLIENTE_CUENTA;

END;


PROCEDURE SP_DELETE(PAR_CLIENTE_CUENTA INTEGER)
IS

BEGIN
DELETE FROM U_20082018.TB_CLIENTE
WHERE CLIENTE_CUENTA = PAR_CLIENTE_CUENTA;

END;


END PACK_TB_CLIENTE;

/


--------------------------------------------------------------------------------------------


--PROBANDO:
EXECUTE PACK_TB_CLIENTE.SP_CREATE('Jorge', 'Lopez',1);
EXECUTE PACK_TB_CLIENTE.SP_UPDATE(1,'Rosaura', 'Sosa',2);
EXECUTE PACK_TB_CLIENTE.SP_DELETE(1);
SELECT * FROM TB_CLIENTE;

----------------------------------------------------------------------------------------------
--CREANDO VISTA
----------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW VIEW_TB_USUARIO_LISTA
AS
SELECT * FROM U_20082018.TB_USUARIO;

--PROBANDO VISTA
SELECT USUARIO_NAME, USUARIO_PASSWORD
FROM VIEW_TB_USUARIO_LISTA
WHERE USUARIO_ID = 1;




------------------------------------------------------------------------------------------------------------------------------
--CREACION DEL PAQUETE PACK_TRANSACCION
-------------------------------------------------------------------------------------------------------------------------------
--SEQUENCIA DE TRANSACCION
CREATE SEQUENCE SQ_TRANSACCION;

--CABECERA
CREATE OR REPLACE PACKAGE PACK_TRANSACCION AS

-- SP(1) para realizar: Transacción de transferencia de dinero
  PROCEDURE SP_TRANSFERENCIA(
  PAR_TRANSF_USUARIO_ID INTEGER,
  PAR_TRANSF_CUENTA_ORIGEN INTEGER, 
  PAR_TRANSF_CUENTA_DESTINO INTEGER, 
  PAR_TRANSF_MONTO NUMBER);
                                                      
-- SP(2) para realizar: Transacción de extorno de dinero                                                      
  PROCEDURE SP_EXTORNO (PAR_TRANSF_ID INTEGER, PAR_USUARIO_ID INTEGER);  


END PACK_TRANSACCION;

/



-------BODY

CREATE OR REPLACE PACKAGE BODY PACK_TRANSACCION AS


-- SP(1) para realizar: Transacción de transferencia de dinero
   PROCEDURE SP_TRANSFERENCIA(
  PAR_TRANSF_USUARIO_ID INTEGER,
  PAR_TRANSF_CUENTA_ORIGEN INTEGER, 
  PAR_TRANSF_CUENTA_DESTINO INTEGER, 
  PAR_TRANSF_MONTO NUMBER)
  
  IS
  VAR_MONTO      NUMBER;
  ERR_SALDO      EXCEPTION;
  ERR_CTAORIGEN  EXCEPTION;
  ERR_CTADESTINO EXCEPTION;
    
  BEGIN
  SELECT CUENTA_SALDO
  INTO VAR_MONTO
  FROM TB_CUENTA
  WHERE CUENTA = PAR_TRANSF_CUENTA_ORIGEN;
  
  IF VAR_MONTO <  PAR_TRANSF_MONTO THEN -- Si el saldo es menor (VAR_MONTO) saltar (RAISE) a ERR_SALDO
     --DBMS_OUTPUT.PUT_LINE('Saldo Insuficiente....!');
     --RETURN; --interrumpe programa
     RAISE ERR_SALDO;
  END IF;
  
 -- DECREMENTAR LA CTA ORIGEN
 UPDATE TB_CUENTA
 SET CUENTA_SALDO = CUENTA_SALDO - PAR_TRANSF_MONTO
 WHERE CUENTA = PAR_TRANSF_CUENTA_ORIGEN;

IF SQL%ROWCOUNT <> 1 THEN --Identifica las filas afectadas por operacion anterior
     --DBMS_OUTPUT.PUT_LINE('Cta Origen no existe....!');
    -- RETURN; --interrumpe programa
    RAISE ERR_CTAORIGEN;
END IF;

 -- INCREMENTAR CTA DESTINO
  UPDATE TB_CUENTA
 SET CUENTA_SALDO = CUENTA_SALDO + PAR_TRANSF_MONTO
 WHERE CUENTA= PAR_TRANSF_CUENTA_DESTINO;
 
 IF SQL%ROWCOUNT <> 1 THEN --Identifica las filas afectadas por operacion anterior
     --DBMS_OUTPUT.PUT_LINE('Cta Destino no existe....!');
    -- ROLLBACK; --DESHACE LA OPERACION  UPDATE ANTERIOR
    -- RETURN; --interrumpe programa
    RAISE ERR_CTADESTINO;
END IF;


  --INSERTAR EN TRANSFERENCIA
INSERT INTO TB_TRANSFERENCIA
VALUES(SQ_TRANSACCION.NEXTVAL,PAR_TRANSF_USUARIO_ID, PAR_TRANSF_CUENTA_ORIGEN, PAR_TRANSF_CUENTA_DESTINO, PAR_TRANSF_MONTO,'T');

COMMIT;

EXCEPTION 
      WHEN ERR_SALDO THEN 
               DBMS_OUTPUT.PUT_LINE('Saldo Insuficiente...!');
      WHEN ERR_CTAORIGEN THEN
               DBMS_OUTPUT.PUT_LINE('Cta Origen no existe....!');  
      WHEN ERR_CTADESTINO THEN
               DBMS_OUTPUT.PUT_LINE('Cta Destino no existe....!');  
               ROLLBACK;
      WHEN OTHERS THEN 
               DBMS_OUTPUT.PUT_LINE('ERROR:' ||SQLERRM);  
END;
  
  
---------------------------------------------------------------------------------------------------------------------------------------- 
-- SP(2) para realizar: Transacción de extorno de dinero   
 PROCEDURE SP_EXTORNO (PAR_TRANSF_ID INTEGER, PAR_USUARIO_ID INTEGER)
                             
IS
VAR_MONTO NUMBER; 
VAR_CTAORIGEN INTEGER;
VAR_CTADESTINO INTEGER;
VAR_NUM INTEGER;
VAR_SALDODESTINO INTEGER;

ERR_SALDO EXCEPTION;
ERR_CTAORIGEN EXCEPTION;
ERR_CTADESTINO EXCEPTION;
ERR_NUMOPERACION EXCEPTION;

BEGIN
    
      SELECT COUNT(*)
      INTO VAR_NUM 
      FROM TB_TRANSFERENCIA
      WHERE TRANSFERENCIA_ID = PAR_TRANSF_ID;  
      
   IF  VAR_NUM > 0 THEN
      
      SELECT TRANSFERENCIA_CUENTA_ORIGEN -- capturo el monto de la cuenta origen
      INTO VAR_CTAORIGEN
      FROM TB_TRANSFERENCIA
      WHERE TRANSFERENCIA_ID = PAR_TRANSF_ID;  
      
      SELECT TRANSFERENCIA_CUENTA_DESTINO -- capturo el monto de la cuenta origen
      INTO VAR_CTADESTINO
      FROM TB_TRANSFERENCIA
      WHERE TRANSFERENCIA_ID = PAR_TRANSF_ID;  
      
      SELECT TRANSFERENCIA_MONTO -- capturo el monto de la cuenta origen
      INTO VAR_MONTO
      FROM TB_TRANSFERENCIA
      WHERE TRANSFERENCIA_ID = PAR_TRANSF_ID;  
      
      SELECT CUENTA_SALDO
      INTO VAR_SALDODESTINO 
      FROM TB_CUENTA
      WHERE CUENTA=VAR_CTADESTINO;
      
      --SALDO CUENTA DESTINO A QUITAR
        IF VAR_SALDODESTINO < VAR_MONTO THEN --Identifica las filas afectadas por operacion anterior
     --DBMS_OUTPUT.PUT_LINE('Saldo Insuficiente....!');
     --RETURN; --interrumpe programa
       RAISE ERR_SALDO;
       END IF;
      
      
      

      -- Se devuelve a la cuenta origen el monto prestado (Incrementa)
      UPDATE TB_CUENTA
      SET CUENTA_SALDO = CUENTA_SALDO + VAR_MONTO
      WHERE CUENTA = VAR_CTAORIGEN;
      
      IF SQL%ROWCOUNT <> 1 THEN -- (SQL%ROWCOUNT Identifica filas afectadas por operacion)de no existir cuenta origen salta a su tipo de error
      RAISE ERR_CTAORIGEN;
      END IF;
      
      -- Se resta a la cuenta destino el monto prestado (Decrementa)
      UPDATE TB_CUENTA
      SET CUENTA_SALDO = CUENTA_SALDO - VAR_MONTO
      WHERE CUENTA = VAR_CTADESTINO;
      
      IF SQL%ROWCOUNT <> 1 THEN  -- (SQL%ROWCOUNT Identifica filas afectadas por operacion)de no existir cuenta destino salta a su tipo de error
      RAISE ERR_CTADESTINO;
      END IF;
            
      
      -- Insertar en diario el tipo de transacción extorno (E)
      INSERT INTO TB_TRANSFERENCIA
      VALUES
      (SQ_TRANSACCION.NEXTVAL,PAR_USUARIO_ID, VAR_CTAORIGEN, VAR_CTADESTINO, VAR_MONTO,'E');
             
       COMMIT; 
       
          ELSE 
          RAISE ERR_NUMOPERACION;--si el numero de operación no existe salta a su tipo de error.

   END IF;
       -- zona de excepciopnes
       EXCEPTION
               WHEN ERR_NUMOPERACION THEN
                DBMS_OUTPUT.PUT_LINE('No existe operación');
                WHEN ERR_SALDO THEN
                DBMS_OUTPUT.PUT_LINE('Saldo Insuficiente');
                WHEN ERR_CTAORIGEN THEN
                DBMS_OUTPUT.PUT_LINE('Cta de origen no existe');
                WHEN ERR_CTADESTINO THEN
                DBMS_OUTPUT.PUT_LINE('Cta de destino no existe');
                ROLLBACK;
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);

END;
  




END PACK_TRANSACCION;

/





-----PROBAMOS 

select * from tb_usuario;
SELECT * FROM TB_CUENTA;
SELECT * FROM TB_TRANSFERENCIA;
EXECUTE PACK_TB_CLIENTE.SP_CREATE('Juana', 'Rivas',2);
SELECT * FROM TB_CLIENTE;

INSERT INTO TB_CUENTA VALUES(2, 5000);
INSERT INTO TB_CUENTA VALUES(1, 10000);

--PROBAMOS PACK_TRANSACCION
EXECUTE PACK_TRANSACCION.SP_TRANSFERENCIA(3, 2, 1, 1000);
EXECUTE PACK_TRANSACCION.SP_EXTORNO(1, 4);







---------------------------------------------
--TRIGGERS
---------------------------------------------

CREATE SEQUENCE SQ_TB_AUDITORIA;


CREATE OR REPLACE TRIGGER TG_TB_AUDITORIA
AFTER INSERT
ON U_20082018.TB_TRANSFERENCIA 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE

BEGIN
--INSERTANDO EN AUDITORIA
INSERT INTO TB_AUDITORIA
VALUES(SQ_TB_AUDITORIA.NEXTVAL, SYSDATE, USER, :NEW.TRANSFERENCIA_ID);
  
END TG_TB_AUDITORIA;


--PROBAMOS QUE FUNCIONE EL TRIGGER Y EL PAQUETE
EXECUTE PACK_TRANSACCION.SP_TRANSFERENCIA(3, 2, 1, 500);
SELECT * FROM TB_CUENTA;
SELECT * FROM TB_TRANSFERENCIA;
SELECT * FROM TB_AUDITORIA;
EXECUTE PACK_TRANSACCION.SP_EXTORNO(1, 4);
EXECUTE PACK_TRANSACCION.SP_TRANSFERENCIA(3, 2, 1, 500);




------------------------------------------------------------------------------------
--CREANDO VISTA 
--to_char( sal, '$9,999.99' )
--LPAD('S/.'||(to_char(TRA.TRANSFERENCIA_MONTO, '9,999.99')), 15, '*') "MONTO"

CREATE VIEW VIEW_TRANSACCIONES1 AS
SELECT 
TRA.TRANSFERENCIA_ID "#TRANSACCION",
TRA.TRANSFERENCIA_TIPO "TIPO",
CLI.CLIENTE_CUENTA "CTA_ORIGEN",
CLI.CLIENTE_NOMBRE||', '||CLI.CLIENTE_APELLIDO "EMISOR",
CLI2.CLIENTE_CUENTA "CTA_DESTINO",
CLI2.CLIENTE_NOMBRE||', '||CLI2.CLIENTE_APELLIDO "RECEPTOR",
LPAD('S/.'||(to_char(TRA.TRANSFERENCIA_MONTO, '9,999.99')), 15, '*') "MONTO"
FROM 
 TB_TRANSFERENCIA TRA JOIN TB_CUENTA CUE ON (TRA.TRANSFERENCIA_CUENTA_ORIGEN = CUE.CUENTA)
 JOIN TB_CUENTA CUE2 ON (TRA.TRANSFERENCIA_CUENTA_DESTINO = CUE2.CUENTA)
 JOIN TB_CLIENTE CLI ON(TRA.TRANSFERENCIA_CUENTA_ORIGEN = CLI.CLIENTE_CUENTA)
 JOIN TB_CLIENTE CLI2 ON (TRA.TRANSFERENCIA_CUENTA_DESTINO = CLI2.CLIENTE_CUENTA );


--PROBANDO VISTA
SELECT * FROM VIEW_TRANSACCIONES1;


--PROBANDO NUEVAMENTE
EXECUTE PACK_TRANSACCION.SP_TRANSFERENCIA(3, 2, 1, 500);
SELECT * FROM TB_TRANSFERENCIA;
SELECT * FROM TB_AUDITORIA;
SELECT * FROM TB_CUENTA;
EXECUTE PACK_TRANSACCION.SP_EXTORNO(26, 4);


SELECT * FROM VIEW_TRANSACCIONES1;



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'ALUMNO';
ALTER TABLE ALUMNO
DROP CONSTRAINT FK_CURSO;


