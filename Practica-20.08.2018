create or replace PACKAGE BODY        PK_VALIDADOR
IS
-- --------------------------------------------------------------------------------------------------------------------
-- Autor    : Jaime Lopez-Torres M. - Enero 2002
-- --------------------------------------------------------------------------------------------------------------------
-- Especificacion: Package Body de Procedimientos y Funciones de la Nueva Validacion.
-- --------------------------------------------------------------------------------------------------------------------
-- Revisiones:
--     Fecha        Autor                                           Descripcion
-- -------------  --------------------------  -------------------------------------------------------------------------
-- 14/04/2002     Jaime Lopez-Torres M.       Se incorporan los procedimientos:
--                                            SP_INGRESA_CODSBS_NUEVO y SP_INGRESA_CODSBS_ANTIGUO.
--                                            Se incorporan las funciones:
--                                            SF_VERIFICA_REEMPLAZO_CODSBS y SF_OBT_CODSBS_REEMPLAZANTE.
-- 29/04/2002     Jaime Lopez-Torres M.       Se incorporan los procedimientos:
--                                            SP_VAL_GRABA_VALID_ERRORES_RTC y SP_GRABA_CONTROL_RTC_X_EMPRESA.
--                                            Se incorporan las funciones:
--                                            SF_OBT_TOTAL_CLI_RTC_EMPRESA, SF_OBT_TOT_CLI_RTC_ERR_EMPRESA,
--                                            SF_OBT_DEUD_ACUM_X_CONTROL_RTC.
-- 30/05/2002     Jaime Lopez-Torres M.       Se cambia nombre de procedimiento SP_VAL_EXTRACTA_COD_BLANCOS
--                                            por SP_VAL_EXTRAE_RTC_SIN_CODSBS.
--                                            Se incorpora procedimiento SP_VAL_EXTRAE_RTC_SIN_CODSBS.
-- 31/05/2002     Jaime Lopez-Torres M.       Se cambian nombres de procedimientos:
--                                            SP_INGRESA_CODSBS_NUEVO por SP_INGRESA_CODSBS_NUEVO_RCD.
--                                            SP_INGRESA_CODSBS_ANTIGUO por SP_INGRESA_CODSBS_ANTIGUO_RCD.
--                                            Se incorporan procedimientos:
--                                            SP_INGRESA_CODSBS_NUEVO_RTC y SP_INGRESA_CODSBS_NUEVO_RTC.
-- 27/07/2002     Jaime Lopez-Torres M.       Ajustes en procedurea SP_GRABA_CONTROL_RCD_X_EMPRESA y
--                                            SP_GRABA_CONTROL_RTC_X_EMPRESA.
-- 06/08/2002     Jaime Lopez-Torres M.       Se incorpora funcion SF_OBT_TOT_CONTROL_RCD_X_SEC.
--                                            Se modifica el procedure SP_VAL_EXTRAE_RCD_SIN_CODSBS.
-- 05/09/2002     Jaime Lopez-Torres M.       Se incorpora procedimiento SP_GRABA_DEV_CONTROL_RCD_X_EMP.
-- 05/09/2002     Jaime Lopez-Torres M.       Se incorporan las sgtes. funciones:
--                                            SF_OBT_TOTAL_DEUDA_EMPR_DEV, SF_OBT_TOTAL_ERRORES_EMPR_DEV,
--                                            SF_OBT_TOTAL_CLIENTES_EMPR_DEV, SF_OBT_TOTAL_CLI_ERR_EMPR_DEV,
--                                            SF_OBT_TOTAL_DEUDA_OBSERV_DEV, SF_OBT_TOTAL_DEUDA_TIPO_DEV.
-- 09/09/2002     Jaime Lopez-Torres M.       Se incorpora funcion SF_OBT_TOT_CONTROL_RTC_X_SEC.
-- 13/09/2002     Jaime Lopez-Torres M.       Se incorporan los sgtes. procedimientos:
--                                            SP_VAL_BORRA_CONTROLES_EMPRESA, SP_BORRA_VALID_ERRORES_RCD,
--                                            SP_BORRA_VALID_ERRORES_RCD_VA, SP_BORRA_VALID_ERRORES_RTC,
--                                            SP_BORRA_VALID_ERRORES_RTC_VA.
-- 04/02/2003     Jaime Lopez-Torres M.       Se incorpora la cuenta 8103 y divisionarias (Cuentas Incobrables Castigadas)
--                                            en la validacion del control 183 en SP_VAL_VALIDACION_RCD.
-- 21/02/2003     Jaime Lopez-Torres M.       Se incorpora funcion SF_SEC_VALID_IDENTIF_RCD.
-- 12/06/2003     Jaime Lopez-Torres M.       Condicion en dias se amplia de 3 a 4 caracteres.
-- 13/06/2003     Jaime Lopez-Torres M.       Se incorpora la cuenta 1406 y divisionarias(Creditos en Cobranza Judicial)
--                                            en la validacion del control 183 en SP_VAL_VALIDACION_RCD.
-- 22/09/2003     Jaime Lopez-Torres M.       Se incluye tipo de documento '9' (Extranjero no residente).
-- 02/10/2003     Jaime Lopez-Torres M.       Se actualizan glosas de mensajes de error.
-- 26/01/2004     Jaime Lopez-Torres M.       Se incorporan los sgtes. procedures:
--                                            SP_VALIDA_CONTROL_197_RCD, SP_VALIDA_CONTROL_197_RTC,
--                                            SP_BORRA_VALID_CONTROL_RCD, SP_BORRA_VALID_CONTROL_RTC,
--                                            SP_VAL_BORRA_CONTROL_X_EMPRESA, SP_GRABA_CONTROL_RCD_EMPRESA,
--                                            SP_GRABA_CONTROL_RTC_EMPRESA.
--                                            Se incorpora las sgtes. funciones:
--                                            SF_SEC_VALID_IDENTIF_RCD y SF_CALIF_SEC_VALID_IDENTIF_RTC.
-- --------------------------------------------------------------------------------------------------------------------
-- Definicion de variables locales
   n_cont                NUMBER(10);
   n_code                NUMBER;
   n_error               VARCHAR2(2000);
   n_codsbs              NUMBER(10);
   n_numruc_8            VARCHAR2(8);
   n_numruc_11           VARCHAR2(11);
   n_ya_existe           NUMBER (01);
   n_observaciones       VARCHAR2(255);
   n_cod_ide_pro         NUMBER(3);
   n_cod_est_pro         VARCHAR2(1);
   n_cod_ref_pro         VARCHAR2(2);
   n_cod_etapa           VARCHAR2(02);
   o_idepro              NUMBER(03);
   n_tip_condicion       VARCHAR2(5);
   n_cod_sbs_ult_rplzte  NUMBER(10);
   n_tip_motivo_reemp    VARCHAR2(2);
   n_cod_sbs_iden        NUMBER(10);
   n_cod_sbs_trib        NUMBER(10);
   n_existe_doc_iden     NUMBER(01);
   n_existe_doc_trib     NUMBER(01);
   n_tot_controles       NUMBER(05);
   n_tot_reg_identif     NUMBER(07);
   n_tot_reg_saldos      NUMBER(07);
   n_tot_reg_tot         NUMBER(08);
   n_tot_reg_aux         NUMBER(08);
   n_tot_reg             NUMBER(08);
   n_tot_err             NUMBER(08);
   n_tot_cli             NUMBER(08);
   n_tot_cli_err         NUMBER(08);
   n_tot_cli_err_v       NUMBER(08);
   n_tot_cli_err_c       NUMBER(08);
   n_tot_cli_err_a       NUMBER(08);
   n_tot_deu             NUMBER(15,2);
   n_tot_deu_err         NUMBER(15,2);
   n_tot_deu_err_v       NUMBER(15,2);
   n_tot_deu_err_c       NUMBER(15,2);
   n_tot_deu_err_a       NUMBER(15,2);
   n_rc                  NUMBER(5);

  /* JCFS 03/08/2010: Se utilizará una tabla indexada para consultar los Países */
  type typTableAdmElemento IS TABLE OF adm_elemento%ROWTYPE;
  colTableAdmElemento typTableAdmElemento;
  type typInxAdmElemento IS TABLE OF adm_elemento.des_elemento%TYPE INDEX BY adm_elemento.cod_elemento%TYPE;
  colInxAdmElemento typInxAdmElemento;

  /* JCFS 12/08/2010: Se utilizará una tabla indexada para consultar los Límites de Condición en Días de las Cuentas */
  type typTableCondicionDias IS TABLE OF cra_rel_condicion_cuenta%ROWTYPE;
  colTableCondicionDias typTableCondicionDias;
  type typInxCondicionDias IS TABLE OF cra_rel_condicion_cuenta%ROWTYPE INDEX BY cra_rel_condicion_cuenta.cuenta%TYPE;
  colInxCondicionDias typInxCondicionDias;

-- --------------------------------------------------------------------------------------------------------------------
-- Definicion de Procedimientos
-- --------------------------------------------------------------------------------------------------------------------

PROCEDURE SP_VAL_GRABA_VALID_ERRORES
         (i_ano_pro       IN VARCHAR2,
          i_mes_pro       IN VARCHAR2,
          i_cod_empresa   IN VARCHAR2,
          i_cod_control   IN NUMBER,
          i_num_sec_reg   IN NUMBER,
          i_num_sec_cta   IN NUMBER,
          i_ind_pro_val   IN VARCHAR2,
          i_tip_control   IN VARCHAR2,
          i_cod_reporte   IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -----------------------------------------------------------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
-- -----------------------------------------------------------------------
--       Parametros
--          i_num_sec_reg :  Numero de Secuencia a validar
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
-- -----------------------------------------------------------------------
--       Descripcion:     Actualiza los errores de procesamiento
-- -----------------------------------------------------------------------
-- MODIFICACIONES:
-- JCFS 2015-09: Se aumentan los nuevos parametros dia_refer y cod_sec_envio, con valores por defecto
-- --------------------------------------------------------------------------------------------------------------------
IS
BEGIN
     IF i_cod_reporte = 'RCD' THEN
        SP_VAL_GRABA_VALID_ERRORES_RCD ( i_ano_pro, i_mes_pro, i_cod_empresa, i_cod_control,
                                         i_num_sec_reg, i_num_sec_cta, i_ind_pro_val, i_tip_control );
     END IF;

     IF i_cod_reporte = 'RTC' THEN
        SP_VAL_GRABA_VALID_ERRORES_RTC ( i_ano_pro, i_mes_pro, i_cod_empresa, i_cod_control,
                                         i_num_sec_reg, i_num_sec_cta, i_ind_pro_val, i_tip_control );
     END IF;

     IF i_cod_reporte in ('RCA', 'RCM', 'RCT', 'RCO')  THEN
        SP_VAL_GRABA_VALID_ERRORES_RCA ( i_cod_reporte, i_ano_pro, i_mes_pro, i_cod_empresa, i_cod_control, i_num_sec_reg,
                                         i_num_sec_cta, i_ind_pro_val, i_tip_control, i_dia_refer, i_cod_sec_envio );
     END IF;

     RETURN;

EXCEPTION
    WHEN OTHERS THEN
         RETURN;
END;

-------------------------------------------------------------------------------

PROCEDURE SP_VAL_GRABA_VALID_ERRORES_RCD
         (i_ano_pro        IN VARCHAR2,
          i_mes_pro        IN VARCHAR2,
          i_cod_empresa    IN VARCHAR2,
          i_cod_control    IN NUMBER,
          i_num_sec_reg    IN NUMBER,
          i_num_sec_cta    IN NUMBER,
          i_ind_pro_val    IN VARCHAR2,
          i_tip_control    IN VARCHAR2)
-- -------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Actualiza registros en tabla CRA_VALID_ERRORES_RCD.
-- -------------------------------------------------------------
IS
  n_val_tot_deuda  NUMBER(18,2); -- JCFS 16/08/2010: Se aumenta la precisión de 13,2 a 18,2
BEGIN
--  Obtiene Total Deuda
    IF i_tip_control IN ('A', 'D') THEN
       n_val_tot_deuda := NULL;
    ELSE
       IF i_num_sec_cta = 0 THEN
          n_val_tot_deuda := SF_OBT_TOTAL_DEUDA_VAL (i_ano_pro, i_mes_pro, i_cod_empresa, i_num_sec_reg);
       ELSE
          n_val_tot_deuda := SF_OBT_TOTAL_DEUDA_CTA_VAL (i_ano_pro, i_mes_pro, i_cod_empresa, i_num_sec_reg, i_num_sec_cta);
       END IF;
    END IF;
--
    UPDATE CRA_VAL_CONTROLES_RCD_X_SEC
       SET num_sec_cta  = i_num_sec_cta
     WHERE ano_refer    = i_ano_pro      AND mes_refer    = i_mes_pro
       AND cod_empresa  = i_cod_empresa  AND cod_control  = i_cod_control
       AND num_sec_reg  = i_num_sec_reg  AND num_sec_cta  = i_num_sec_cta ;

    IF SQL%Rowcount = 0 THEN
       INSERT INTO CRA_VAL_CONTROLES_RCD_X_SEC ( ano_refer, mes_refer, cod_empresa, cod_control, num_sec_reg, num_sec_cta, val_tot_deu, ind_pro_val, cod_reporte )
            VALUES ( i_ano_pro, i_mes_pro, i_cod_empresa, i_cod_control, i_num_sec_reg, i_num_sec_cta, n_val_tot_deuda, i_ind_pro_val, 'RCD' );
    END IF;
    COMMIT;
    RETURN;

EXCEPTION
    WHEN OTHERS THEN
         RETURN;
END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_GRABA_VALID_ERRORES_RCA
         (i_cod_reporte    IN VARCHAR2,
          i_ano_pro        IN VARCHAR2,
          i_mes_pro        IN VARCHAR2,
          i_cod_empresa    IN VARCHAR2,
          i_cod_control    IN NUMBER,
          i_num_sec_reg    IN NUMBER,
          i_num_sec_cta    IN NUMBER,
          i_ind_pro_val    IN VARCHAR2,
          i_tip_control    IN VARCHAR2,
          i_dia_refer      IN VARCHAR2 default '01',
          i_cod_sec_envio  IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_num_sec_reg :  Numero de Secuencia a validar
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion:     Actualiza los errores de procesamiento
----------------------------------------------------------------
-- MODIFICACIONES:
-- JCFS 2015-09: Se aumentan los nuevos parametros dia_refer y cod_sec_envio, con valores por defecto
-- --------------------------------------------------------------------------------------------------------------------
IS
BEGIN
     PK_VALIDADOR_RCA.SP_VAL_GRABA_VALID_ERRORES_RCA ( i_cod_reporte, i_ano_pro, i_mes_pro, i_cod_empresa, i_cod_control,
                                i_num_sec_reg, i_num_sec_cta, i_ind_pro_val, i_tip_control, i_dia_refer, i_cod_sec_envio );

EXCEPTION
    WHEN OTHERS THEN
         RETURN;
END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_GRABA_VALID_ERRORES_RTC
         (i_ano_pro        IN VARCHAR2,
          i_mes_pro        IN VARCHAR2,
          i_cod_empresa    IN VARCHAR2,
          i_cod_control    IN NUMBER,
          i_num_sec_reg    IN NUMBER,
          i_num_sec_cta    IN NUMBER,
          i_ind_pro_val    IN VARCHAR2,
          i_tip_control    IN VARCHAR2)
-- -------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Actualiza registros en tabla CRA_VALID_ERRORES_RTC.
-- -------------------------------------------------------------
IS
  n_val_tot_deuda  NUMBER(13,2);
BEGIN
--  Obtiene Total Deuda (En RTC no es aplicable el concepto de Deuda).
/*
    IF i_tip_control IN ('A', 'D') THEN
       n_val_tot_deuda := NULL;
    ELSE
       IF i_num_sec_cta = 0 THEN
          n_val_tot_deuda := SF_OBT_TOTAL_DEUDA_VAL (i_ano_pro, i_mes_pro, i_cod_empresa, i_num_sec_reg);
       ELSE
          n_val_tot_deuda := SF_OBT_TOTAL_DEUDA_CTA_VAL (i_ano_pro, i_mes_pro, i_cod_empresa, i_num_sec_reg, i_num_sec_cta);
       END IF;
    END IF;
**/
    n_val_tot_deuda := NULL;

    UPDATE CRA_VAL_CONTROLES_RTC_X_SEC
       SET num_sec_cta  = i_num_sec_cta
     WHERE ano_refer = i_ano_pro AND mes_refer = i_mes_pro
       AND cod_empresa = i_cod_empresa AND cod_control = i_cod_control
       AND num_sec_reg = i_num_sec_reg AND num_sec_cta = i_num_sec_cta;
    IF SQL%Rowcount = 0 THEN
       INSERT INTO CRA_VAL_CONTROLES_RTC_X_SEC ( ano_refer, mes_refer, cod_empresa, cod_control, num_sec_reg, num_sec_cta, val_tot_deu, ind_pro_val, cod_reporte )
            VALUES ( i_ano_pro, i_mes_pro, i_cod_empresa, i_cod_control, i_num_sec_reg, i_num_sec_cta, n_val_tot_deuda, i_ind_pro_val, 'RTC' );
    END IF;
    COMMIT;
    RETURN;

EXCEPTION
   WHEN OTHERS THEN
        RETURN;
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ASIG_CODSBS
         (i_reporte  IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_ASIG_CODSBS.
-- -------------------------------------------------------
IS
BEGIN
   n_cont        := 0;
   n_cod_ide_pro := 410;

   IF i_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
      n_cod_ide_pro := 610;

      IF i_reporte = 'RCM' THEN
         n_cod_ide_pro := 810;
      END IF;

      IF i_reporte = 'RCO' THEN
         n_cod_ide_pro := 860;
      END IF;

      IF i_reporte = 'RCT' THEN
         n_cod_ide_pro := 910;
      END IF;
   END IF;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
  BEGIN
    DELETE CRA_VALID_ASIG_CODSBS
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro
       AND cod_reporte = i_reporte AND cod_empresa = i_codemp
       AND dia_refer = i_dia_refer AND cod_sec_envio = i_cod_sec_envio;
   EXCEPTION
   WHEN OTHERS THEN
        n_cont := 0;
  END;
   COMMIT;
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);

EXCEPTION
    WHEN OTHERS THEN
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_EXTRAE_RCA_SIN_CODSBS
         (i_reporte  IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Realiza la extraccion de registros sin codigo SBS en el movimiento RCD.
-- -------------------------------------------------------------------------------
IS
BEGIN
    PK_VALIDADOR_RCA.SP_VAL_EXTRAE_RCA_SIN_CODSBS ( i_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_reporte, i_codemp, '05', 'E', i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_EXTRAE_RCD_SIN_CODSBS
         (i_reporte  IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2)
-- -------------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Realiza la extraccion de registros sin codigo SBS en el movimiento RCD.
-- -------------------------------------------------------------------------------
IS
  -- JCFS 16/08/2010: Se reemplaza la llamada a la función SF_OBT_TOT_CONTROL_RCA_X_SEC por un LEFT OUTER JOIN para optimizar el cursor
  CURSOR cur_a IS
  SELECT a.num_sec_reg,
         a.cod_sbs,
         a.cod_unico_clie,
         a.tip_doc_trib,
         a.num_doc_trib,
         a.tip_doc_iden,
         a.num_doc_iden,
         a.tip_persona,
         a.nom_sigla,
         a.nom_cliente,
         a.nom_cliente as ape_paterno,
         a.ape_materno,
         a.ape_casada,
         a.primer_nombre,
         a.segundo_nombre,
         a.genero,
         a.estado_civil
    FROM CRA_VALID_IDENTIF_RCD a
         LEFT OUTER JOIN ( SELECT DISTINCT A.num_sec_reg
                             FROM CRA_VAL_CONTROLES_RCD_X_SEC A,
                                  CRA_CONTROL_HIS_VALIDACION B
                            WHERE A.ano_refer        = i_anopro
                              AND A.mes_refer        = i_mespro
                              AND A.cod_empresa      = i_codemp
                              AND A.cod_control NOT IN (41, 58, 80)
                              AND A.num_sec_cta     >= 0
                              AND B.ano_refer        = A.ano_refer
                              AND B.mes_refer        = A.mes_refer
                              AND B.cod_reporte      = 'RCD'
                              AND B.cod_control      = A.cod_control
                              AND B.tip_control_val <> 'A'
                         ) dt ON a.num_sec_reg = dt.num_sec_reg
   WHERE a.ano_refer = i_anopro AND a.mes_refer = i_mespro
     AND a.cod_empresa = i_codemp
     AND a.cod_sbs = 0 AND a.tip_formulario = '1'
     AND dt.num_sec_reg IS NULL;
--     AND SF_OBT_TOT_CONTROL_RCD_X_SEC (i_anopro, i_mespro, i_codemp, num_sec_reg) = 0;

   n_coinc_nom          VARCHAR2(1);
   n_cod_est_asig       VARCHAR2(1);
   n_cod_sbs_ident      NUMBER(10);
   n_cod_sbs_ruc        NUMBER(10);
   n_cod_sbs_unico      NUMBER(10);
   n_cod_sbs_siglas     NUMBER(10);
   n_cod_sbs_a_asignar  NUMBER(10);
   n_coincidencias      NUMBER(1);
   n_hay_sigla          NUMBER(1);
   n_hay_ruc            NUMBER(1);
   n_hay_nro_unico      NUMBER(1);
   n_hay_doc_ident      NUMBER(1);
   n_hay_nombres        NUMBER(1);
   n_tip_reg_mv         VARCHAR2(1);
-- FVSH actualizacion de campos para la busqueda de nombres con deudores casados. Se da prioridad a informacion del maestro
   lv_cur_nom_cliente            VARCHAR2(180);
   lv_cur_nom_cliente_casada     VARCHAR2(180);
--- variables para filtro de altas
   lv_mensaje    VARCHAR2(500);
   ln_return     NUMBER;
   nom_primer_nombre  VARCHAR2(40);
   nom_segundo_nombre VARCHAR2(40);
   nom_ape_paterno    VARCHAR2(40);
   nom_ape_materno    VARCHAR2(40);
   nom_ape_casada     VARCHAR2(40);
   ln_paso NUMBER;
   ln_can_registros NUMBER := 0;

BEGIN
   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, i_reporte, '71', ln_paso, SYSDATE, 'PROCESO SP_VAL_EXTRAE_RCD_SIN_CODSBS - INICIO', i_codemp);
   COMMIT;

   n_cont        := 0;

-- Borra registros de la tabla CRA_VALID_ASIG_CODSBS
   SP_BORRA_VALID_ASIG_CODSBS (i_reporte, i_anopro, i_mespro, i_codemp, '01', '01');

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 411, n_cod_est_pro, NULL, '01', '01');

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, i_reporte, '71', ln_paso, SYSDATE, 'PROCESO SP_VAL_EXTRAE_RCD_SIN_CODSBS - FIN DE PROCESOS PRELIMINARES', i_codemp);
   COMMIT;

   ln_can_registros   := 0;

   FOR cur in cur_a LOOP
       IF ln_can_registros = 0 THEN
          ln_paso := 1;
          INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
          VALUES (i_anopro, i_mespro, i_reporte, '72', ln_paso, SYSDATE, 'PROCESO SP_VAL_EXTRAE_RCD_SIN_CODSBS - CURSOR ABIERTO - REGISTRO 1', i_codemp);
          COMMIT;
       ELSIF mod(ln_can_registros, 10000) = 0 THEN
          ln_paso := ln_paso + 1;
          INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
          VALUES (i_anopro, i_mespro, i_reporte, '72', ln_paso, SYSDATE, 'PROCESO SP_VAL_EXTRAE_RCD_SIN_CODSBS - CURSOR EN EJECUCION - ' || to_char(ln_can_registros, '99,999,999') || ' REGISTROS PROCESADOS', i_codemp);
          COMMIT;
       END IF;

       n_cod_sbs_ident     := 0;
       n_cod_sbs_ruc       := 0;
       n_cod_sbs_unico     := 0;
       n_cod_sbs_siglas    := 0;
       n_cod_sbs_a_asignar := 0;
       n_hay_sigla         := 0;
       n_hay_ruc           := 0;
       n_hay_nro_unico     := 0;
       n_hay_doc_ident     := 0;
       n_coinc_nom         := NULL;
       n_tip_reg_mv        := ' ';

       -- Validadcion de los nombres del cliente
       lv_cur_nom_cliente_casada     := NULL;
       lv_cur_nom_cliente := cur.nom_cliente;

       -- Cuando es persona natural ==> hace cambios en la composicion de los nombres
       -- OJO con este cambio. Premisa: dar prioridad a los datos del maestro
       --IF cur.tip_persona = '1' THEN    -- FVSH  20070422
       IF cur.tip_persona in ('1','3') THEN
          lv_cur_nom_cliente := rtrim(cur.ape_paterno || ' ' || cur.ape_materno) || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
          lv_cur_nom_cliente_casada := lv_cur_nom_cliente;

          IF cur.tip_persona = '1' AND  length(cur.ape_casada) > 0 THEN
             -- IF length(cur.ape_casada) > 0 THEN
             lv_cur_nom_cliente_casada := rtrim(cur.ape_paterno || ' ' || cur.ape_materno) || ' ' || cur.ape_casada || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
             -- END IF;
          END IF;
       END IF;

       -- Busca por Documento de Identidad
       IF cur.tip_doc_iden > ' ' THEN
          IF cur.tip_persona = '1' THEN
             -- n_cod_sbs_ident := SF_BUSCA_CLIENTE_X_DOCID_NAT (cur.tip_doc_iden, cur.num_doc_iden);
             n_cod_sbs_ident := SF_BUSCA_CLIENTE_X_DOCID_NAT_N ( cur.tip_doc_iden, cur.num_doc_iden, cur.num_sec_reg, i_reporte, i_anopro, i_mespro, i_codemp, 'RCD', '01', '01' );
             IF n_cod_sbs_ident IS NOT NULL  THEN
                n_hay_doc_ident := 1;
             END IF;
          END IF;

          IF cur.tip_persona = '3' THEN
             n_cod_sbs_ident := SF_BUSCA_CLIENTE_X_DOCID_MAN (cur.tip_doc_iden, cur.num_doc_iden);
             IF n_cod_sbs_ident IS NOT NULL THEN
                n_hay_doc_ident := 1;
             END IF;
          END IF;

          n_cod_sbs_ident := nvl(n_cod_sbs_ident,0);
       END IF;

--     Busca por Numero de RUC
       IF cur.tip_doc_trib > ' ' THEN
          IF cur.tip_doc_trib = '2' THEN
             n_cod_sbs_ruc := SF_BUSCA_CLIENTE_X_RUC_8 (cur.num_doc_trib, cur.tip_persona);
             IF n_cod_sbs_ruc IS NOT NULL THEN
                n_hay_ruc := 1;
             END IF;
          END IF;
          IF cur.tip_doc_trib = '3' THEN
             n_cod_sbs_ruc := SF_BUSCA_CLIENTE_X_RUC_11 (cur.num_doc_trib, cur.tip_persona);
             IF n_cod_sbs_ruc IS NOT NULL THEN
                n_hay_ruc := 1;
             END IF;
          END IF;

          n_cod_sbs_ruc := nvl(n_cod_sbs_ruc,0);
       END IF;

--     Busca por Numero Unico
       IF cur.cod_unico_clie > ' ' THEN
          ---------------------------
          -- FVSH 2004-07-23
          -- Se modifica la busqueda por codigo unico de cliente
          -- En la funcion se establecera la busqueda por TIPO PERSONA
          --          n_cod_sbs_unico := SF_BUSCA_CLIENTE_X_NUNICO (cur.cod_unico_clie, i_codemp);
          --
          --   n_cod_sbs_unico := SF_BUSCA_CLIENTE_X_NUNICO_TIP (cur.cod_unico_clie, i_codemp, cur.tip_persona);
          ---------------------------
          -- FVSH 2005-06-15
          -- Se modifica la busqueda por codigo unico de cliente
          -- Se realiza la busqueda por codigo unico siempre y cuando no se tenga
          -- informacion por los datos de documento
          IF (cur.tip_persona in ('1','3') AND nvl(n_hay_doc_ident,0) <= 0) OR
             (cur.tip_persona = '2' AND nvl(n_hay_ruc,0) <= 0) THEN
             n_cod_sbs_unico := SF_BUSCA_CLIENTE_X_NUNICO_TIP (cur.cod_unico_clie, i_codemp, cur.tip_persona);
             IF n_cod_sbs_unico IS NOT NULL THEN
                n_hay_nro_unico := 1;
             END IF;
             n_cod_sbs_unico := nvl(n_cod_sbs_unico,0);
          END IF;
       ---------------------------
       END IF;

--     Busca por Siglas
       IF cur.nom_sigla > ' ' THEN
          IF cur.tip_persona = '2' THEN
             ---------------------------
             -- FVSH 2004-07-23
             -- Se desactiva la BUSQUEDA POR SIGLA
             -- Esta condicion debido a la desactivacion del control relacionado con este parametro
             n_hay_sigla := 0;
             -- n_cod_sbs_siglas := SF_BUSCA_CLIENTE_X_SIGLA_JUR (cur.nom_sigla);
             -- IF n_cod_sbs_siglas IS NOT NULL THEN
             --   n_hay_sigla := 1;
             -- END IF;
             ---------------------------
          END IF;
          IF cur.tip_persona = '3' THEN
             n_cod_sbs_siglas := SF_BUSCA_CLIENTE_X_SIGLA_MAN (cur.nom_sigla);
             IF n_cod_sbs_siglas IS NOT NULL THEN
                n_hay_sigla := 1;
             END IF;
          END IF;
       END IF;

--     Nombres o Razon Social Informados
       IF lv_cur_nom_cliente > ' ' THEN
          n_hay_nombres := 1;
          IF cur.tip_persona = '1' THEN
              n_coinc_nom := SF_BUSCA_CLIENTE_X_NOMBRE_NAT (lv_cur_nom_cliente);
          END IF;
          IF cur.tip_persona = '2' THEN
             n_coinc_nom := SF_BUSCA_CLIENTE_X_NOMBRE_JUR (lv_cur_nom_cliente);
          END IF;
          IF cur.tip_persona = '3' THEN
             n_coinc_nom := SF_BUSCA_CLIENTE_X_NOMBRE_MAN (lv_cur_nom_cliente);
          END IF;
       ELSE
          n_hay_nombres := 0;
       END IF;

--     Asignacion de acuerdo a resultado de busquedas
       IF n_hay_doc_ident = 0 AND n_hay_ruc = 0 AND n_hay_nro_unico = 0 AND n_hay_sigla = 0 THEN
           IF n_hay_nombres = 1 THEN
              n_cod_est_asig := 'N';
           ELSE
              n_cod_est_asig := 'X';
           END IF;
       ELSE
           n_coincidencias := n_hay_doc_ident + n_hay_ruc + n_hay_nro_unico + n_hay_sigla;
           IF n_coincidencias > 1 THEN
              IF n_hay_doc_ident = 1 THEN
                 IF n_hay_ruc = 1 THEN
                    IF n_cod_sbs_ident = n_cod_sbs_ruc THEN
                       n_cod_sbs_a_asignar := n_cod_sbs_ident;
                       n_cod_est_asig := 'A';
                    ELSE
                       IF n_hay_nro_unico = 1 THEN
                          IF n_cod_sbs_ident = n_cod_sbs_unico THEN
                             n_cod_sbs_a_asignar := n_cod_sbs_ident;
                             n_cod_est_asig := 'A';
                          ELSE
                             IF n_cod_sbs_ruc = n_cod_sbs_unico THEN
                                 n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                 n_cod_est_asig := 'A';
                             ELSE
                                 n_cod_est_asig := 'D';
                             END IF;
                          END IF;
                       ELSE
                           IF n_hay_sigla = 1 THEN
                              IF n_cod_sbs_ident = n_cod_sbs_siglas THEN
                                 n_cod_sbs_a_asignar := n_cod_sbs_ident;
                                 n_cod_est_asig := 'A';
                              ELSE
                                 IF n_cod_sbs_ruc = n_cod_sbs_siglas THEN
                                    n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                    n_cod_est_asig := 'A';
                                 ELSE
                                    n_cod_est_asig := 'D';
                                 END IF;
                              END IF;
                           ELSE
                              n_cod_est_asig := 'D';
                           END IF;
                       END IF;
                    END IF;
                 ELSE
                    IF n_hay_nro_unico = 1 THEN
                       IF n_cod_sbs_ident = n_cod_sbs_unico THEN
                          n_cod_sbs_a_asignar := n_cod_sbs_ident;
                          n_cod_est_asig := 'A';
                       ELSE
                          IF n_hay_sigla = 1 THEN
                             IF n_cod_sbs_ident  = n_cod_sbs_siglas THEN
                                n_cod_sbs_a_asignar := n_cod_sbs_ident;
                                n_cod_est_asig := 'A';
                             ELSE
                                n_cod_est_asig := 'D';
                             END IF;
                          ELSE
                             n_cod_est_asig := 'D';
                          END IF;
                       END IF;
                    ELSE
                       IF n_hay_sigla = 1 THEN
                          IF n_cod_sbs_ident = n_cod_sbs_siglas THEN
                             n_cod_sbs_a_asignar := n_cod_sbs_ident;
                             n_cod_est_asig := 'A';
                          ELSE
                             IF n_cod_sbs_ruc = n_cod_sbs_siglas THEN
                                n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                n_cod_est_asig := 'A';
                             ELSE
                                n_cod_est_asig := 'D';
                             END IF;
                          END IF;
                       ELSE
                          n_cod_est_asig := 'D';
                       END IF;
                    END IF;
                 END IF;
              ELSE
                 IF n_hay_ruc = 1 THEN
                    IF n_hay_nro_unico = 1 THEN
                       IF n_cod_sbs_ruc  = n_cod_sbs_unico THEN
                          n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                          n_cod_est_asig := 'A';
                       ELSE
                          IF n_hay_sigla = 1 THEN
                             IF n_cod_sbs_ruc  = n_cod_sbs_siglas THEN
                                n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                n_cod_est_asig := 'A';
                             ELSE
                                IF n_cod_sbs_unico  = n_cod_sbs_siglas THEN
                                   n_cod_sbs_a_asignar := n_cod_sbs_unico;
                                   n_cod_est_asig := 'A';
                                ELSE
                                   n_cod_est_asig := 'D';
                                END IF;
                             END IF;
                          ELSE
                             n_cod_est_asig := 'D';
                          END IF;
                       END IF;
                    ELSE
                       IF n_hay_sigla = 1 THEN
                          IF n_cod_sbs_ruc  = n_cod_sbs_siglas THEN
                             n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                             n_cod_est_asig := 'A';
                          ELSE
                             n_cod_est_asig := 'D';
                          END IF;
                       ELSE
                          n_cod_est_asig := 'D';
                       END IF;
                    END IF;
                 ELSE
                    IF  n_hay_nro_unico = 1
                    AND n_hay_sigla     = 1 THEN
                        IF n_cod_sbs_unico  = n_cod_sbs_siglas THEN
                           n_cod_sbs_a_asignar := n_cod_sbs_unico;
                           n_cod_est_asig := 'A';
                        ELSE
                           n_cod_est_asig := 'D';
                        END IF;
                    ELSE
                        n_cod_est_asig := 'D';
                    END IF;
                 END IF;
              END IF;
           ELSE
--            12.ABR.2002 JLT : "Si existe una sola coincidencia de identificacion y ninguna
--            en contra se considera como codigo SBS encontrado. (Antiguo)".
--            (Reunion de la Comision de Criterios de Aceptacion del R.C.D. del 12.ABR.2002).
              IF n_hay_doc_ident = 1
              OR n_hay_ruc       = 1
              OR n_hay_nro_unico = 1 THEN
                 IF n_hay_doc_ident = 1 THEN
                    n_cod_sbs_a_asignar := n_cod_sbs_ident;
                 END IF;
                 IF n_hay_ruc = 1 THEN
                    n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                 END IF;
                 IF n_hay_nro_unico = 1 THEN
                    n_cod_sbs_a_asignar := n_cod_sbs_unico;
                 END IF;
                 n_cod_est_asig := 'A';
              ELSE
                 n_cod_est_asig := 'D';
              END IF;
           END IF;
       END IF;

       if nvl(cur.tip_persona,'-') = '1' and NVL(cur.tip_doc_iden,'-') = '1' THEN
          IF NVL(cur.tip_doc_iden,'-') = '1' THEN -- Solo para documento de identidad DNI
             n_cod_sbs_ident := nvl(PK_VALIDADOR.SF_BUSCA_CLIENTE_X_DOCID_NAT(cur.tip_doc_iden, cur.num_doc_iden ),0);
             if nvl(n_cod_sbs_ident,0) > 0 then
                n_cod_sbs_a_asignar := n_cod_sbs_ident;
                SELECT CRI_PERSONA.TIP_REG_MV
                 INTO n_tip_reg_mv
                 FROM CRI_PERSONA
                 WHERE COD_SBS = n_cod_sbs_a_asignar;
              end if;
          ELSE
             n_tip_reg_mv := ' ';
          END IF;
        end if;

    /* Nueva validacion - 10/08/2009 */
    IF (n_tip_reg_mv = 'X' OR n_tip_reg_mv = 'I') and nvl(cur.tip_persona,'-') = '1' and NVL(cur.tip_doc_iden,'-') = '1' THEN -- Solo para tipo persona natural y con documento de identidad DNI
         if nvl(n_cod_sbs_a_asignar,0)> 0 then
           SELECT NVL(X.NOM_PERSONA,' '), NVL(X.SEGUNDO_NOMBRE,' ') , NVL(X.APE_PATERNO,' '), NVL(X.APE_MATERNO,' '), NVL(X.APE_CASADA,' ')
             INTO nom_primer_nombre, nom_segundo_nombre, nom_ape_paterno, nom_ape_materno, nom_ape_casada
             FROM CRI_PERSONA_NAT X
            WHERE COD_SBS = n_cod_sbs_a_asignar; --CUR.COD_SBS;

           if upper(trim(nom_ape_paterno)) = upper(trim(nvl(cur.ape_paterno,' '))) and
                  (( nvl(length(upper(trim(nom_segundo_nombre))),0) > 0 and trim(upper(trim(nom_primer_nombre))||' '||upper(trim(nom_segundo_nombre))) = trim(upper(trim(nvl(cur.primer_nombre,' ')))||' '||upper(trim(nvl(cur.segundo_nombre,' '))))  ) or
                   ( nvl(length(upper(trim(nom_segundo_nombre))),0) = 0 and ( trim(upper(trim(nom_primer_nombre))||' '||upper(trim(nom_segundo_nombre))) = trim(upper(trim(nvl(cur.primer_nombre,' ')))||' '||upper(trim(nvl(cur.segundo_nombre,' '))))  or
                                                                              trim(upper(trim(nom_primer_nombre))) = trim(upper(trim(nvl(cur.primer_nombre,' ')))) ))) and
                  (( nvl(length(upper(trim(nom_ape_materno))),0) = 0 and upper(trim(nom_ape_casada)) = upper(trim(nvl(cur.ape_casada,' ')))) or
                   ( nvl(length(upper(trim(nom_ape_materno))),0) > 0 and upper(trim(nom_ape_materno)) = upper(trim(nvl(cur.ape_materno,' '))) )) then
                      n_cod_est_asig := 'X'; -- Indicar D:Dudas en vez de X: No codificable porque falta evaluar impacto en los OBS
--                      n_cod_sbs_ident := 0;
--                      n_cod_sbs_ruc   := 0;
--                      n_cod_sbs_unico  := 0;
--                      n_cod_sbs_siglas := 0;
--                    n_cod_sbs_a_asignar := 0;
            else
                 if sisrev.SF_Cod_Unico_Entidad( n_cod_sbs_a_asignar,i_codemp) <> ' ' then
                    n_cod_est_asig := 'X'; -- Indicar D:Dudas en vez de X: No codificable porque falta evaluar impacto en los OBS
--                    n_cod_sbs_ident := 0;
--                    n_cod_sbs_ruc   := 0;
--                    n_cod_sbs_unico  := 0;
--                    n_cod_sbs_siglas := 0;
--                    n_cod_sbs_a_asignar := 0;
                  else
                    n_cod_est_asig := 'N';
                    n_cod_sbs_ident := 0;
                    n_cod_sbs_ruc   := 0;
                    n_cod_sbs_unico  := 0;
                    n_cod_sbs_siglas := 0;
                    n_cod_sbs_a_asignar := 0;
                 end if;
           end if;
         else
            n_cod_est_asig := 'N';
            n_cod_sbs_ident := 0;
            n_cod_sbs_ruc   := 0;
            n_cod_sbs_unico  := 0;
            n_cod_sbs_siglas := 0;
            n_cod_sbs_a_asignar := 0;
         end if;
     END IF;
/*control para rechazos de RENIEC */

       n_cont := n_cont + 1;
       INSERT INTO CRA_VALID_ASIG_CODSBS ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_sec_reg, cod_sbs, cod_unico_clie, tip_doc_trib,
                   num_doc_trib, tip_doc_iden, num_doc_iden, tip_persona, nom_sigla, nom_ape_paterno, nom_ape_materno, nom_nombres,
                   cod_est_asig, ind_est_asig, cod_usu_apr, fec_aprobacion, cod_sbs_coinc_ide, cod_sbs_coinc_ruc, cod_sbs_coinc_uni,
                   cod_sbs_coinc_sig, cod_sbs_a_asignar, nom_cliente, ind_coinc_nom,
                   nom_ape_casada, nom_segundo_nombre )
            VALUES ( i_anopro, i_mespro, i_reporte, i_codemp, cur.num_sec_reg, cur.cod_sbs, cur.cod_unico_clie, cur.tip_doc_trib,
                     cur.num_doc_trib, cur.tip_doc_iden, cur.num_doc_iden, cur.tip_persona, cur.nom_sigla, cur.ape_paterno, cur.ape_materno, cur.primer_nombre,
                     n_cod_est_asig, 'P', NULL, NULL, n_cod_sbs_ident, n_cod_sbs_ruc, n_cod_sbs_unico, n_cod_sbs_siglas, n_cod_sbs_a_asignar,
                     lv_cur_nom_cliente, n_coinc_nom, cur.ape_casada, cur.segundo_nombre );

       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;

       ln_can_registros := ln_can_registros + 1;
   END LOOP;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, i_reporte, '72', ln_paso, SYSDATE, 'PROCESO SP_VAL_EXTRAE_RCD_SIN_CODSBS - CURSOR CERRADO - ' || to_char(ln_can_registros, '99,999,999') || ' REGISTROS PROCESADOS', i_codemp);
   COMMIT;

/*----------------------------------------*/
-- FVSH 2004-08-19: Ejecuta Filtro para el proceso de altas
-- Detectar si ocurre un error para parar el proceso
/*----------------------------------------*/
   PK_XCRI_ALTAS_VAL_ASIG_CODSBS.SP_PROC_PRINCIPAL_FILTRO_ALTA ( i_anopro, i_mespro, 'RCD', i_codemp, USER, '01', '01', lv_mensaje, ln_return );
/*--
  IF ln_return <> 1 THEN
     n_error := lv_mensaje;
     n_cod_est_pro := 'E';
     SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 411, n_cod_est_pro, substr(n_error,1,255));
     SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_reporte, i_codemp, '05', 'E');
     RETURN;
  END IF;
 --*/

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 411, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 411, n_cod_est_pro, substr(n_error,1,255));
--       Actualiza CRA_PERIODO_INF_EMP_ETAPA
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_reporte, i_codemp, '05', 'E');
END;

------------------------------------------------------------------------------

PROCEDURE SP_VAL_EXTRAE_RTC_SIN_CODSBS
         (i_reporte  IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2)
-- -------------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Mayo 2002
-- Motivo: Realiza la extraccion de registros sin codigo SBS en el movimiento RTC.
-- -------------------------------------------------------------------------------
IS
  CURSOR cur_a IS
  SELECT num_sec_reg,
         cod_sbs,
         cod_unico_clie,
         tip_doc_trib,
         num_doc_trib,
         tip_doc_iden,
         num_doc_iden,
         tip_persona,
         nom_sigla,
         nom_cliente, -- Apellido Paterno
         ape_materno,
         ape_casada,
         primer_nombre,
         segundo_nombre
    FROM CRA_VALID_IDENTIF_RTC r
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND cod_sbs        = 0
     AND tip_formulario = '1'
     AND SF_OBT_TOT_CONTROL_RTC_X_SEC (i_anopro, i_mespro, i_codemp, num_sec_reg) = 0;
--
-- Definicion de variables
   n_coinc_nom          VARCHAR2(1);
   n_cod_est_asig       VARCHAR2(1);
   n_cod_sbs_ident      NUMBER(10);
   n_cod_sbs_ruc        NUMBER(10);
   n_cod_sbs_unico      NUMBER(10);
   n_cod_sbs_siglas     NUMBER(10);
   n_cod_sbs_a_asignar  NUMBER(10);
   n_coincidencias      NUMBER(1);
--
   n_hay_sigla          NUMBER(1);
   n_hay_ruc            NUMBER(1);
   n_hay_nro_unico      NUMBER(1);
   n_hay_doc_ident      NUMBER(1);
   n_hay_nombres        NUMBER(1);
-- FVSH actualizacion de campos para la busqueda
-- de nombres con deudores casados. Se da prioridad a informacion del maestro
   lv_cur_nom_cliente            VARCHAR2(180);
   lv_cur_nom_cliente_casada     VARCHAR2(180);
--
BEGIN
   n_cont        := 0;
-- Borra registros de la tabla CRA_VALID_ASIG_CODSBS
   SP_BORRA_VALID_ASIG_CODSBS (i_reporte, i_anopro, i_mespro, i_codemp, '01', '01');
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 415, n_cod_est_pro, NULL, '01', '01');

   FOR cur in cur_a LOOP
       n_cod_sbs_ident     := 0;
       n_cod_sbs_ruc       := 0;
       n_cod_sbs_unico     := 0;
       n_cod_sbs_siglas    := 0;
       n_cod_sbs_a_asignar := 0;
       n_hay_sigla         := 0;
       n_hay_ruc           := 0;
       n_hay_nro_unico     := 0;
       n_hay_doc_ident     := 0;
       n_coinc_nom         := NULL;
       ------------------------------------------------
       --- FVSH 808 inicio
       -- Validadcion de los nombres del cliente
       lv_cur_nom_cliente_casada     := NULL;
       lv_cur_nom_cliente := cur.nom_cliente;

            -- Cuando es persona natural ==> hace cambios en la composicion de los nombres
            -- OJO con este cambio. Premisa: dar priorida a los datos del maestro
       IF cur.tip_persona = '1' THEN
          lv_cur_nom_cliente := rtrim(cur.nom_cliente || ' ' || cur.ape_materno) || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
          lv_cur_nom_cliente_casada := lv_cur_nom_cliente;

          IF length(cur.ape_casada) > 0 THEN
             lv_cur_nom_cliente_casada := rtrim(cur.nom_cliente || ' ' || cur.ape_materno) || ' ' || cur.ape_casada || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
          END IF;
       END IF;
       --- FVSH 808 fin
       ------------------------------------------------
--     Busca por Documento de Identidad
       IF cur.tip_doc_iden > ' ' THEN
          IF cur.tip_persona = '1' THEN
             n_cod_sbs_ident := SF_BUSCA_CLIENTE_X_DOCID_NAT (cur.tip_doc_iden, cur.num_doc_iden);
             IF n_cod_sbs_ident IS NOT NULL THEN
                n_hay_doc_ident := 1;
             END IF;
          END IF;

          IF cur.tip_persona = '3' THEN
             n_cod_sbs_ident := SF_BUSCA_CLIENTE_X_DOCID_MAN (cur.tip_doc_iden, cur.num_doc_iden);
             IF n_cod_sbs_ident IS NOT NULL THEN
                n_hay_doc_ident := 1;
             END IF;
          END IF;
       END IF;
--
--     Busca por Numero de RUC
       IF cur.tip_doc_trib > ' ' THEN
          IF cur.tip_doc_trib = '2' THEN
             n_cod_sbs_ruc := SF_BUSCA_CLIENTE_X_RUC_8 (cur.num_doc_trib, cur.tip_persona);
             IF n_cod_sbs_ruc IS NOT NULL THEN
                n_hay_ruc := 1;
             END IF;
          END IF;
          IF cur.tip_doc_trib = '3' THEN
             n_cod_sbs_ruc := SF_BUSCA_CLIENTE_X_RUC_11 (cur.num_doc_trib, cur.tip_persona);
             IF n_cod_sbs_ruc IS NOT NULL THEN
                n_hay_ruc := 1;
             END IF;
          END IF;
       END IF;
--
--     Busca por Numero Unico
       IF cur.cod_unico_clie > ' ' THEN
          n_cod_sbs_unico := SF_BUSCA_CLIENTE_X_NUNICO (cur.cod_unico_clie, i_codemp);
          IF n_cod_sbs_unico IS NOT NULL THEN
             n_hay_nro_unico := 1;
          END IF;
       END IF;
--
--     Busca por Siglas
       IF cur.nom_sigla > ' ' THEN
          IF cur.tip_persona = '2' THEN
         n_hay_sigla := 0;
         ---------------------------
             --- JAGJ 2013-07-08
             --- Se desactiva la BUSQUEDA POR SIGLA
             ----n_cod_sbs_siglas := SF_BUSCA_CLIENTE_X_SIGLA_JUR (cur.nom_sigla);
             ----IF n_cod_sbs_siglas IS NOT NULL THEN
             ----   n_hay_sigla := 1;
             ----END IF;
          END IF;
          IF cur.tip_persona = '3' THEN
             n_cod_sbs_siglas := SF_BUSCA_CLIENTE_X_SIGLA_MAN (cur.nom_sigla);
             IF n_cod_sbs_siglas IS NOT NULL THEN
                n_hay_sigla := 1;
             END IF;
          END IF;
       END IF;
--
--     Nombres o Razon Social Informados
       IF lv_cur_nom_cliente > ' ' THEN
          n_hay_nombres := 1;
          IF cur.tip_persona = '1' THEN
             n_coinc_nom := SF_BUSCA_CLIENTE_X_NOMBRE_NAT (lv_cur_nom_cliente);
          END IF;
          IF cur.tip_persona = '2' THEN
             n_coinc_nom := SF_BUSCA_CLIENTE_X_NOMBRE_JUR (lv_cur_nom_cliente);
          END IF;
          IF cur.tip_persona = '3' THEN
             n_coinc_nom := SF_BUSCA_CLIENTE_X_NOMBRE_MAN (lv_cur_nom_cliente);
          END IF;
       ELSE
          n_hay_nombres := 0;
       END IF;

--     Asignacion de acuerdo a resultado de busquedas
       IF n_hay_doc_ident = 0 AND n_hay_ruc = 0 AND n_hay_nro_unico = 0 AND n_hay_sigla = 0 THEN
          IF n_hay_nombres = 1 THEN
             n_cod_est_asig := 'N';
          ELSE
             n_cod_est_asig := 'X';
          END IF;
       ELSE
           n_coincidencias := n_hay_doc_ident + n_hay_ruc + n_hay_nro_unico + n_hay_sigla;
           IF n_coincidencias > 1 THEN
              IF n_hay_doc_ident = 1 THEN
                 IF n_hay_ruc = 1 THEN
                    IF n_cod_sbs_ident = n_cod_sbs_ruc THEN
                       n_cod_sbs_a_asignar := n_cod_sbs_ident;
                       n_cod_est_asig := 'A';
                    ELSE
                       IF n_hay_nro_unico = 1 THEN
                          IF n_cod_sbs_ident = n_cod_sbs_unico THEN
                             n_cod_sbs_a_asignar := n_cod_sbs_ident;
                             n_cod_est_asig := 'A';
                          ELSE
                             IF n_cod_sbs_ruc = n_cod_sbs_unico THEN
                                 n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                 n_cod_est_asig := 'A';
                             ELSE
                                 n_cod_est_asig := 'D';
                             END IF;
                          END IF;
                       ELSE
                           IF n_hay_sigla = 1 THEN
                              IF n_cod_sbs_ident = n_cod_sbs_siglas THEN
                                 n_cod_sbs_a_asignar := n_cod_sbs_ident;
                                 n_cod_est_asig := 'A';
                              ELSE
                                 IF n_cod_sbs_ruc = n_cod_sbs_siglas THEN
                                    n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                    n_cod_est_asig := 'A';
                                 ELSE
                                    n_cod_est_asig := 'D';
                                 END IF;
                              END IF;
                           ELSE
                              n_cod_est_asig := 'D';
                           END IF;
                       END IF;
                    END IF;
                 ELSE
                    IF n_hay_nro_unico = 1 THEN
                       IF n_cod_sbs_ident = n_cod_sbs_unico THEN
                          n_cod_sbs_a_asignar := n_cod_sbs_ident;
                          n_cod_est_asig := 'A';
                       ELSE
                          IF n_hay_sigla = 1 THEN
                             IF n_cod_sbs_ident  = n_cod_sbs_siglas THEN
                                n_cod_sbs_a_asignar := n_cod_sbs_ident;
                                n_cod_est_asig := 'A';
                             ELSE
                                n_cod_est_asig := 'D';
                             END IF;
                          ELSE
                             n_cod_est_asig := 'D';
                          END IF;
                       END IF;
                    ELSE
                       IF n_hay_sigla = 1 THEN
                          IF n_cod_sbs_ident = n_cod_sbs_siglas THEN
                             n_cod_sbs_a_asignar := n_cod_sbs_ident;
                             n_cod_est_asig := 'A';
                          ELSE
                             IF n_cod_sbs_ruc = n_cod_sbs_siglas THEN
                                n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                n_cod_est_asig := 'A';
                             ELSE
                                n_cod_est_asig := 'D';
                             END IF;
                          END IF;
                       ELSE
                          n_cod_est_asig := 'D';
                       END IF;
                    END IF;
                 END IF;
              ELSE
                 IF n_hay_ruc = 1 THEN
                    IF n_hay_nro_unico = 1 THEN
                       IF n_cod_sbs_ruc  = n_cod_sbs_unico THEN
                          n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                          n_cod_est_asig := 'A';
                       ELSE
                          IF n_hay_sigla = 1 THEN
                             IF n_cod_sbs_ruc  = n_cod_sbs_siglas THEN
                                n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                                n_cod_est_asig := 'A';
                             ELSE
                                IF n_cod_sbs_unico  = n_cod_sbs_siglas THEN
                                   n_cod_sbs_a_asignar := n_cod_sbs_unico;
                                   n_cod_est_asig := 'A';
                                ELSE
                                   n_cod_est_asig := 'D';
                                END IF;
                             END IF;
                          ELSE
                             n_cod_est_asig := 'D';
                          END IF;
                       END IF;
                    ELSE
                       IF n_hay_sigla = 1 THEN
                          IF n_cod_sbs_ruc  = n_cod_sbs_siglas THEN
                             n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                             n_cod_est_asig := 'A';
                          ELSE
                             n_cod_est_asig := 'D';
                          END IF;
                       ELSE
                          n_cod_est_asig := 'D';
                       END IF;
                    END IF;
                 ELSE
                    IF  n_hay_nro_unico = 1
                    AND n_hay_sigla     = 1 THEN
                        IF n_cod_sbs_unico  = n_cod_sbs_siglas THEN
                           n_cod_sbs_a_asignar := n_cod_sbs_unico;
                           n_cod_est_asig := 'A';
                        ELSE
                           n_cod_est_asig := 'D';
                        END IF;
                    ELSE
                        n_cod_est_asig := 'D';
                    END IF;
                 END IF;
              END IF;
           ELSE
--            12.ABR.2002 JLT : "Si existe una sola coincidencia de identificacion y ninguna
--            en contra se considera como codigo SBS encontrado. (Antiguo)".
--            (Reunion de la Comision de Criterios de Aceptacion del R.C.D. del 12.ABR.2002).
              IF n_hay_doc_ident = 1
              OR n_hay_ruc       = 1
              OR n_hay_nro_unico = 1 THEN
                 IF n_hay_doc_ident = 1 THEN
                    n_cod_sbs_a_asignar := n_cod_sbs_ident;
                 END IF;
                 IF n_hay_ruc = 1 THEN
                    n_cod_sbs_a_asignar := n_cod_sbs_ruc;
                 END IF;
                 IF n_hay_nro_unico = 1 THEN
                    n_cod_sbs_a_asignar := n_cod_sbs_unico;
                 END IF;
                 n_cod_est_asig := 'A';
              ELSE
                 n_cod_est_asig := 'D';
              END IF;
           END IF;
       END IF;
--
       n_cont := n_cont + 1;
       INSERT INTO CRA_VALID_ASIG_CODSBS x ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_sec_reg, cod_sbs, cod_unico_clie, tip_doc_trib,
                   num_doc_trib, tip_doc_iden, num_doc_iden, tip_persona, nom_sigla,
                   cod_est_asig, ind_est_asig, cod_usu_apr, fec_aprobacion, cod_sbs_coinc_ide, cod_sbs_coinc_ruc, cod_sbs_coinc_uni,
                   cod_sbs_coinc_sig, cod_sbs_a_asignar, nom_cliente, ind_coinc_nom,
                   nom_ape_paterno, nom_ape_materno, nom_ape_casada, nom_nombres, nom_segundo_nombre)
            VALUES ( i_anopro, i_mespro, i_reporte, i_codemp, cur.num_sec_reg, cur.cod_sbs, cur.cod_unico_clie, cur.tip_doc_trib,
                     cur.num_doc_trib, cur.tip_doc_iden, cur.num_doc_iden, cur.tip_persona, cur.nom_sigla,
                     n_cod_est_asig, 'P', NULL, NULL, n_cod_sbs_ident, n_cod_sbs_ruc, n_cod_sbs_unico, n_cod_sbs_siglas,
                     n_cod_sbs_a_asignar, lv_cur_nom_cliente, n_coinc_nom,
                     cur.nom_cliente, cur.ape_materno, cur.ape_casada, cur.primer_nombre, cur.segundo_nombre );
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;
--
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 415, n_cod_est_pro, NULL);
--
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 415, n_cod_est_pro, substr(n_error,1,255));
--       Actualiza CRA_PERIODO_INF_EMP_ETAPA
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_reporte, i_codemp, '05', 'E');
END;

----------------------------------------------------------------------

PROCEDURE SP_INGRESA_CODSBS_NUEVO_RCD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- --------------------------------------------------------------------------------------------------------------------
-- Autor: Jaime Lopez-Torres M. - Marzo 2002
-- Especificacion: Ingreso de Nuevos Clientes RCD al Maestro de Personas SBS.
-- --------------------------------------------------------------------------------------------------------------------
IS
  -- JCFS 17/06/2010: Se agregan los nuevos campos incluidos en la Resolución 11356
  CURSOR cur_a IS
  SELECT A.num_sec_reg,
         A.cod_ciiu3,
         A.cod_sunarp,
         A.tip_doc_trib,
         A.num_doc_trib,
         A.tip_doc_iden,
         A.num_doc_iden,
         A.tip_persona,
         A.tip_residencia,
         A.tip_magnitud,
         A.cod_pais,
         A.nom_cliente,
         A.nom_sigla,
         B.cod_unico_clie,
         B.nom_ape_paterno,
         B.nom_ape_materno,
         B.nom_nombres,
         B.nom_ape_casada,
         B.nom_segundo_nombre,
         B.cod_est_asig,
         B.cod_sbs_a_asignar,
         A.cod_gru_eco,          -- 11356
         A.fec_nac,              -- 11356
         A.tip_doc_iden_com,     -- 11356
         A.num_doc_iden_com,     -- 11356
         A.estado_civil,         -- JCFS 14/09/2011: Se agrega el Estado Civil
         A.genero                -- JCFS 29/11/2011: Se agrega el Género de la persona
    FROM CRA_VALID_IDENTIF_RCD  "A",
         CRA_VALID_ASIG_CODSBS  "B"
   WHERE A.ano_refer    = i_anopro
     AND A.mes_refer    = i_mespro
     AND A.cod_empresa  = i_codemp
     AND B.ano_refer    = A.ano_refer
     AND B.mes_refer    = A.mes_refer
     AND B.cod_reporte  = 'RCD'
     AND B.cod_empresa  = A.cod_empresa
     AND B.num_sec_reg  = A.num_sec_reg
     AND B.cod_sbs      = 0
     AND B.cod_est_asig = 'N';

   n_ult_codsbs        NUMBER(10);
   n_bloquea_acceso    NUMBER(01);
   n_ind_residencia    VARCHAR2(1);
   n_val_tot_deu       NUMBER(13,2);

------------------------------------------
-- PROCESO SOLO PARA PERSONAS NATURALES. F.V.SH    2005-05-18
-------------------    -------------------
-- Obtiene clientes clasificados como nuevos pero el documento de identidad ya esta en el maestro
CURSOR cur_doc_id_existe IS
  SELECT N.TIP_DOCTO_IDENT as tipo_doc_id
        ,N.NUM_DOCTO_IDENT as num_doc_id
        ,t.num_sec_reg
        ,t.tip_persona
        ,p.tip_reg_mv
        ,n.ape_paterno
        ,n.ape_materno
        ,n.nom_persona
        ,t.nom_ape_paterno
        ,t.nom_ape_materno
        ,t.nom_nombres
        ,p.cod_sbs
   FROM cri_persona p
       ,CRI_PERSONA_NAT N
       ,( select a.num_sec_reg
                ,a.tip_doc_iden
                ,a.num_doc_iden
                ,a.tip_persona
                ,a.nom_ape_paterno
                ,a.nom_ape_materno
                ,a.nom_nombres
           from cra_valid_asig_codsbs a
          where a.ano_refer = i_anopro and a.mes_refer = i_mespro
            and a.cod_empresa = i_codemp and a.cod_reporte = 'RCD'
            and a.cod_est_asig = 'N' and a.tip_persona  = '1'
            and a.cod_sbs = 0
      ) T
WHERE p.cod_sbs = n.cod_sbs
  AND NOT (upper(nvl(n.segundo_nombre,' ')) like '%Y/O%')
  AND n.tip_docto_ident = t.tip_doc_iden
  AND n.num_docto_ident = t.num_doc_iden
  AND decode ( nvl(test_number(n.num_docto_ident),-1), -1, n.num_docto_ident, test_number(n.num_docto_ident) )  =
      decode ( nvl(test_number(t.num_doc_iden),-1), -1, t.num_doc_iden, test_number(t.num_doc_iden) )
  AND nvl(p.tip_reg_mv,' ') <> 'X' -- no evaluar los rechazados por RENIEC
order by t.num_sec_reg asc ;

ln_count_existe_doc_periodo  NUMBER(3);
n_cont   NUMBER(10);
lv_nombre_completo   varchar2(560);
ln_paso NUMBER;

BEGIN
   n_cont := 0;
   n_cod_etapa   := '07';
   n_cod_ide_pro := 409;
   n_cod_est_pro := 'P';

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '77', ln_paso, SYSDATE, 'PROCESO DE ALTAS - INICIO', i_codemp);
   COMMIT;

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

-- F.V.SH 2005-05-18: Los duplicados los coloca en dudas.
   FOR cur_e_id in cur_doc_id_existe LOOP
       -- Valida si el codigo fue rechazado por RENIEC y si se cumple que
       -- lo genero la misma entidad o los nombres son iguales entonces lo rechaza.
       -- El indicador se actualiza a X: No codificable (07/08/2009)
       -- Valida si el documneto fue generado en este periodo, cod_sbs > 0 y fue clasificado como nuevo
      ln_count_existe_doc_periodo:= -1;

      BEGIN
         SELECT count(*) INTO ln_count_existe_doc_periodo
           FROM CRA_VALID_ASIG_CODSBS
          WHERE ano_refer = i_anopro AND mes_refer = i_mespro
            AND cod_empresa <> i_codemp AND num_doc_iden = cur_e_id.num_doc_id
            AND num_doc_iden NOT IN ('0','00', '000', '0000', '00000', '000000', '0000000', '00000000','00000000000')
            AND tip_doc_iden = cur_e_id.tipo_doc_id AND tip_persona = cur_e_id.tip_persona
            AND cod_sbs > 0 ;
      EXCEPTION
         WHEN OTHERS THEN
            ln_count_existe_doc_periodo:= 0;
         END;

      IF ln_count_existe_doc_periodo = 0 THEN
         BEGIN
            -- Coloca en Duda los registros por duplicidad de documento de identidad
            UPDATE CRA_VALID_ASIG_CODSBS a
               SET a.cod_est_asig = 'D'
             WHERE a.ano_refer = i_anopro AND a.mes_refer = i_mespro AND a.cod_reporte = 'RCD'
               AND a.cod_empresa = i_codemp AND a.num_sec_reg  = cur_e_id.num_sec_reg;

            COMMIT;

          EXCEPTION
             WHEN OTHERS THEN
                ROLLBACK;
          END;
       END IF;
   END LOOP;

   n_bloquea_acceso := 0;
   n_cont := 0;
   WHILE n_bloquea_acceso = 0 LOOP
      IF SF_OBT_EST_ULT_CODSBS = 'N' THEN
         n_bloquea_acceso := 1;
         n_cont := n_cont + 1;
         UPDATE CRA_ULT_COD_SBS SET ind_en_uso = 'S';
         IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
            n_cont := 0;
            COMMIT;
         END IF;
      END IF;
   END LOOP;

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '78', ln_paso, SYSDATE, 'PROCESO DE ALTAS - INICIO DE ITERACIONES DE ALTAS', i_codemp);
   COMMIT;

   FOR cur in cur_a LOOP
       n_existe_doc_iden := 0;
       n_existe_doc_trib := 0;

       IF cur.tip_doc_iden > ' ' THEN
          BEGIN
            SELECT MIN(cod_sbs) INTO n_cod_sbs_iden
              FROM CRA_VALID_ASIG_CODSBS
             WHERE ano_refer = i_anopro AND mes_refer = i_mespro
               AND num_doc_iden = cur.num_doc_iden
               AND num_doc_iden NOT IN ('0','00', '000', '0000', '00000', '000000', '0000000', '00000000','00000000000')
               AND ind_est_asig = 'A'
               AND tip_doc_iden = cur.tip_doc_iden AND tip_persona = cur.tip_persona;          -- FVSH Add tip_doc_ident

            IF SQL%Rowcount <> 0 AND n_cod_sbs_iden IS NOT NULL THEN
                n_existe_doc_iden := 1;
            END IF;
          EXCEPTION
             WHEN OTHERS THEN
                n_existe_doc_iden := 0;
          END;
       END IF;

       IF cur.tip_doc_trib > ' ' THEN
          BEGIN
            SELECT MIN(cod_sbs) INTO n_cod_sbs_trib
              FROM CRA_VALID_ASIG_CODSBS
             WHERE ano_refer = i_anopro AND mes_refer = i_mespro
               AND num_doc_trib = cur.num_doc_trib
               AND num_doc_trib NOT IN ('0','00', '000', '0000', '00000', '000000', '0000000', '00000000','00000000000')
               AND ind_est_asig = 'A'
               AND tip_doc_trib = cur.tip_doc_trib AND tip_persona  = cur.tip_persona;          -- FVSH Add tip_doc_trib

            IF  SQL%Rowcount <> 0 AND n_cod_sbs_trib IS NOT NULL THEN
                n_existe_doc_trib := 1;
            END IF;
          EXCEPTION
             WHEN OTHERS THEN
                n_existe_doc_trib := 0;
          END;
       END IF;

       IF n_existe_doc_iden = 1 OR n_existe_doc_trib = 1 THEN
          IF  n_existe_doc_iden = 1 AND n_existe_doc_trib = 0 THEN
              UPDATE CRA_VALID_ASIG_CODSBS
                 SET cod_est_asig      = 'A',
                     cod_sbs_a_asignar =  n_cod_sbs_iden,
                     cod_sbs_coinc_ide =  n_cod_sbs_iden
               WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD'
                 AND cod_empresa = i_codemp AND num_sec_reg = cur.num_sec_reg;
          ELSE
             IF  n_existe_doc_iden = 0 AND n_existe_doc_trib = 1 THEN
                 UPDATE CRA_VALID_ASIG_CODSBS
                    SET cod_est_asig      = 'A',
                        cod_sbs_a_asignar =  n_cod_sbs_trib,
                        cod_sbs_coinc_ruc =  n_cod_sbs_trib
                  WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD'
                    AND cod_empresa = i_codemp AND num_sec_reg = cur.num_sec_reg;
             ELSE
                IF n_cod_sbs_iden = n_cod_sbs_trib THEN
--                 Doble coincidencia
                   UPDATE CRA_VALID_ASIG_CODSBS
                      SET cod_est_asig      = 'A',
                          cod_sbs_a_asignar =  n_cod_sbs_trib,
                          cod_sbs_coinc_ide =  n_cod_sbs_iden,
                          cod_sbs_coinc_ruc =  n_cod_sbs_trib
                    WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD'
                      AND cod_empresa = i_codemp AND num_sec_reg = cur.num_sec_reg;
                ELSE
--                 Duda
                   UPDATE CRA_VALID_ASIG_CODSBS
                      SET cod_est_asig      = 'D',
                          cod_sbs_coinc_ide =  n_cod_sbs_iden,
                          cod_sbs_coinc_ruc =  n_cod_sbs_trib
                    WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD'
                      AND cod_empresa = i_codemp AND num_sec_reg = cur.num_sec_reg;
                END IF;
             END IF;
          END IF;
          COMMIT;
       ELSE
          n_ult_codsbs := SF_OBT_ULT_COD_SBS;
          IF n_ult_codsbs > 0 THEN
             n_codsbs := SF_GENERA_MOD11 (n_ult_codsbs);
             UPDATE CRA_ULT_COD_SBS SET cod_sbs_ult = n_codsbs;
             IF n_codsbs > n_ult_codsbs THEN
                IF cur.tip_doc_trib = '2' THEN
                   n_numruc_8  := cur.num_doc_trib;
                   n_numruc_11 := NULL;
                ELSE
                   IF cur.tip_doc_trib = '3' THEN
                      n_numruc_11 := cur.num_doc_trib;
                      n_numruc_8  := NULL;
                   ELSE
                      n_numruc_8  := NULL;
                      n_numruc_11 := NULL;
                   END IF;
                END IF;

                IF cur.tip_residencia = '0' THEN
                   n_ind_residencia := 'N';
                ELSE
                   n_ind_residencia := 'S';
                END IF;

                -- JCFS 17/06/2010: Se agregan los nuevos campos incluidos en la Resolución 11356
                INSERT INTO CRI_PERSONA ( cod_sbs, cod_actividad_econ, tip_persona, num_ruc, cod_pais_origen, ind_reside_peru, fec_registro,
                            num_telef, num_fax, cod_grupo_eco, cod_magnitud_emp, val_ventas_anual, fec_ventas_anual, val_patrimonio,
                            val_cap_social, ind_indecopi, fec_cap_social, tip_condicion, tip_reg_mv, ano_prep_icc, mes_prep_icc,
                            ano_urep_icc, mes_urep_icc, num_ruc11, cod_ciiu_v2, num_lib_trib, cod_usu_reg, fec_modificacion, cod_usu_mod,
                            tip_doc_iden_com, num_doc_iden_com )
                    VALUES (n_codsbs,         -- Codigo SBS
                            cur.cod_ciiu3,    -- Codigo del sector economico
                            cur.tip_persona,  -- Tipo de persona
                            n_numruc_8,       -- Numero de RUC - 8 digitod
                            cur.cod_pais,     -- Codigo de pais de origen
                            n_ind_residencia, -- Indicador si reside en el Peru
                            SYSDATE,          -- Fecha de registro
                            NULL,             -- Numeros de telefonos
                            NULL,             -- Numeros de fax
                            NULL,             -- Codigo del grupo economico
                            cur.tip_magnitud, -- Codigo de la magnitud empresarial
                            NULL,             -- Valor de las ventas anuales
                            NULL,             -- Fecha de referencia de las ventas anuales
                            NULL,             --
                            NULL,             --
                            'N',              --
                            NULL,             --
                            NULL,             --
                            'N',              -- Pendiente de Cotejo
                            i_anopro,         -- Año del primer reporte del cliente
                            i_mespro,         -- Mes del primer reporte del cliente
                            NULL,             -- Año del ultimo reporte del cliente
                            NULL,             -- Mes del ultimo reporte del cliente
                            n_numruc_11,      -- Numero de RUC - 11 digitos
                            NULL,             -- Codigo CIIU version 2
                            NULL,             -- Numero de Libreta Tributaria
                            USER,             -- Codigo de Usuario que registra
                            NULL,             -- Fecha de Modificacion
                            NULL,             -- Codigo de Usuario que modifica
                            cur.tip_doc_iden_com, -- 11356: Tipo de Documento de Identidad Complementario
                            cur.num_doc_iden_com  -- 11356: Número de Documento de Identidad Complementario
                           );
                IF cur.tip_persona = '1' THEN
                   -- JCFS 17/06/2010: Se agrega el nuevo campo de Fecha de Nacimiento incluido en la Resolución 11356
                   INSERT INTO CRI_PERSONA_NAT ( cod_sbs, ape_paterno, ape_materno, nom_persona, fec_nacimiento, tip_estado_civil, cod_sbs_conyuge,
                                 tip_docto_ident, num_docto_ident, tip_sexo, fec_ini_conyuge, cod_profesion, des_centro_trabajo,
                                 tip_persona_nat, ind_separac_bienes, tip_trabajador, val_otros_ingresos, val_ingresos_fam, cod_cargo,
                                 val_remunera_total, fec_ingresos_fam, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod,
                                 ape_casada, segundo_nombre )
                        VALUES ( n_codsbs,            -- Codigo SBS
                               cur.nom_ape_paterno, -- Apellido paterno
                               cur.nom_ape_materno, -- Apellido materno
                               cur.nom_nombres,     -- Nombres
                               -- JCFS 14/09/2011: Se graba la Fecha de Nacimiento, que ahora es reportada según la Resolución 11356
                               case when nvl(cur.fec_nac, '00000000') IN ('0', '00000000') then NULL else to_date(cur.fec_nac, 'yyyymmdd') end,
                               cur.estado_civil,    -- Tipo del estado civil. JCFS 14/09/2011: Se graba el dato con lo informado por la entidad
                               NULL,                -- Codigo SBS del conyuge
                               cur.tip_doc_iden,    -- Tipo de documento de identidad
                               cur.num_doc_iden,    -- Numero de documento de identidad
                               cur.genero,          -- JCFS 29/11/2011: Se graba el Sexo de la persona
                               NULL,                -- Fecha de inicio con el conyuge
                               NULL,                -- Codigo de la profesion de la persona
                               NULL,                -- Descripcion del centro de trabajo
                               'SN',                -- Tipo de persona natural
                               'N',                 -- Indicador de separacion de bienes
                               NULL,                -- Tipo de trabajador
                               NULL,                -- Otros ingresos
                               NULL,                -- Ingresos familiares
                               NULL,                -- Codigo de cargo
                               NULL,                -- Remuneracion total
                               NULL,                -- Fecha de ingresos familiares
                               SYSDATE,             -- Fecha de registro
                               USER,                -- Codigo de Usuario que registra
                               NULL,                -- Fecha de Modificacion
                               NULL,                 -- Codigo de Usuario que modifica
                               cur.nom_ape_casada,   -- Apellido de casada
                               cur.nom_segundo_nombre -- Segundo nombre
                              );
                END IF;

                IF cur.tip_persona IN ('2', '4') THEN   -- JCFS 05/05/2010: Se agrega el Tipo de Persona 4 - RES 11356
                   INSERT INTO CRI_PERSONA_JUR ( cod_sbs, nom_razon_social, des_siglas, cod_onrp, fec_constitucion, tip_persona_jur, ind_ent_vig,
                                ind_ent_financiera, tip_propiedad, cod_sbs_matriz, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod )
                        VALUES (n_codsbs,         -- Codigo SBS
                               substr(cur.nom_cliente,1,80), -- Nombre de la razon social de la empresa
                               cur.nom_sigla,    -- Descripcion de las siglas o nombre comercial
                               cur.cod_sunarp,   -- Codigo Oficina Nacional de Registros Publicos
                               NULL,             -- Fecha de constitucion de la persona jur.
                               NULL,             -- Tipo de persona juridica
                               NULL,             --
                               NULL,             --
                               NULL,             -- Tipo de propiedad
                               NULL,             -- Codigo SBS de la casa matriz
                               SYSDATE,          -- Fecha de registro
                               USER,             -- Codigo de Usuario que registra
                               NULL,             -- Fecha de Modificacion
                               NULL);             -- Codigo de Usuario que modifica
                END IF;
--
                IF cur.tip_persona = '3' THEN
                   lv_nombre_completo := TRIM(trim(cur.nom_ape_paterno) || ' ' || TRIM(trim(cur.nom_ape_materno) || ' ' ||  trim(cur.nom_ape_casada)));
                   lv_nombre_completo := TRIM(lv_nombre_completo || ' ' || TRIM(trim(cur.nom_nombres) || ' ' || trim(cur.nom_segundo_nombre)));

                   -- JCFS 17/06/2010: Se agrega el nuevo campo de Fecha de Nacimiento incluido en la Resolución 11356
                   INSERT INTO CRI_PERSONA_NOID ( cod_sbs, nom_razon_social, des_siglas, cod_onrp, tip_persona_jur, ind_ent_financiera,
                                 tip_propiedad, tip_docto_ident, num_docto_ident, fec_registro, cod_usu_reg, fec_modificacion,
                                 cod_usu_mod, ape_paterno, ape_materno, ape_casada, primer_nombre, segundo_nombre, fec_nac )
                        VALUES (n_codsbs,            -- Codigo SBS
                               --substr(cur.nom_cliente,1,80),
                               substr(lv_nombre_completo,1,80),
                               cur.nom_sigla,
                               cur.cod_sunarp,
                               NULL,
                               NULL,
                               NULL,
                               cur.tip_doc_iden,    -- Tipo de documento de identidad
                               cur.num_doc_iden,    -- Numero de documento de identidad
                               SYSDATE,             -- Fecha de registro
                               USER,                -- Codigo de Usuario que registra
                               NULL,                -- Fecha de Modificacion
                               NULL,                -- Codigo de Usuario que modifica
                               trim(substr(cur.nom_ape_paterno,1,40)),
                               trim(cur.nom_ape_materno),
                               trim(cur.nom_ape_casada),
                               trim(cur.nom_nombres),
                               trim(cur.nom_segundo_nombre),
                               -- 11356: Fecha de Nacimiento
                               case when nvl(cur.fec_nac, '00000000') IN ('0', '00000000') then NULL else to_date(cur.fec_nac, 'yyyymmdd') end
                               );
                END IF;

                BEGIN
                  n_ya_existe := 0;
                  -- JCFS 17/06/2010: Se agrega el nuevo campo de Código de Grupo Económico incluido en la Resolución 11356
                  INSERT INTO CRI_DEUDOR_XENT ( cod_sbs, cod_ent_vig, cod_unico_entidad, tip_rel_laboral, ano_prep_icc, mes_prep_icc,
                               ano_urep_icc, mes_urep_icc, ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id,
                               ind_fijo_sunarp, ind_fijo_ciiu3, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod, cod_gru_eco )
                       VALUES (n_codsbs,           -- Codigo SBS
                               i_codemp,           -- Codigo de Empresa
                               cur.cod_unico_clie, -- Codigo Unico del Cliente en la Empresa
                               NULL,               -- Codigo del sector economico
                               i_anopro,           -- A?o del primer reporte del cliente
                               i_mespro,           -- Mes del primer reporte del cliente
                               NULL,               -- A?o del ultimo reporte del cliente
                               NULL,               -- Mes del ultimo reporte del cliente
                               NULL,               -- Indicador de Nombre Sustentado
                               NULL,               -- Indicador de Numero de RUC Sustentado
                               NULL,               -- Indicador de Documento de Identidad Sustentado
                               NULL,               -- Indicador de SUNARP Sustentado
                               NULL,               -- Indicador de CIIU3 Sustentado
                               SYSDATE,            -- Fecha de registro
                               USER,               -- Usuario que registra
                               NULL,               -- Fecha de modificacion
                               NULL,               -- Usuario que modifica
                               cur.cod_gru_eco     -- 11356: Código de Grupo Económico
                              );
                EXCEPTION
                  WHEN OTHERS THEN
                       n_ya_existe := 1;
                END;
--
                UPDATE CRA_VALID_IDENTIF_RCD
                   SET cod_sbs     = n_codsbs
                 WHERE ano_refer = i_anopro AND mes_refer = i_mespro
                   AND cod_empresa = i_codemp AND num_sec_reg = cur.num_sec_reg;
--
                UPDATE CRA_VALID_ASIG_CODSBS
                   SET cod_sbs        = n_codsbs,
                       ind_est_asig   = 'A',
                       cod_usu_apr    = USER,
                       fec_aprobacion = SYSDATE
                 WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD'
                   AND cod_empresa = i_codemp AND num_sec_reg = cur.num_sec_reg;
--
                BEGIN
                  n_val_tot_deu := 0;
                  SELECT val_tot_deu INTO n_val_tot_deu
                    FROM CRA_VAL_CONTROLES_RCD_X_SEC
                   WHERE ano_refer = i_anopro AND mes_refer = i_mespro
                     AND cod_empresa = i_codemp AND cod_control = 41
                     AND num_sec_reg = cur.num_sec_reg AND num_sec_cta = 0;
--
                  IF SQL%Rowcount = 0 THEN
                     n_val_tot_deu := 0;
                  ELSE
                     IF n_val_tot_deu IS NULL THEN
                        n_val_tot_deu := 0;
                     END IF;
--
                     DELETE
                       FROM CRA_VAL_CONTROLES_RCD_X_SEC
                      WHERE ano_refer = i_anopro AND mes_refer = i_mespro
                        AND cod_empresa = i_codemp AND cod_control = 41
                        AND num_sec_reg = cur.num_sec_reg AND num_sec_cta = 0;
                  END IF;
                EXCEPTION
                   WHEN OTHERS THEN
                        n_val_tot_deu := 0;
                END;
                COMMIT;
             END IF;
          END IF;
       END IF;
   END LOOP;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '78', ln_paso, SYSDATE, 'PROCESO DE ALTAS - FIN DE ITERACIONES DE ALTAS', i_codemp);
   COMMIT;

   UPDATE CRA_ULT_COD_SBS
      SET ind_en_uso = 'N';

   COMMIT;

-- Borra registros de la tabla CRA_VAL_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROLES_EMPRESA ('RCD', i_anopro, i_mespro, i_codemp);
-- Actualiza CRA_VAL_CONTROLES_X_EMPRESA
   SP_GRABA_CONTROL_RCD_X_EMPRESA ('RCD', i_anopro, i_mespro, i_codemp);
-- Obtiene el numero total de registros observados en la Empresa en Validacion.
   n_tot_err       := SF_OBT_TOTAL_ERRORES_EMPRESA (i_anopro, i_mespro, i_codemp);
-- Obtiene el numero total de clientes observados en la empresa
   n_tot_cli_err   := SF_OBT_TOTAL_CLI_ERR_EMPRESA (i_anopro, i_mespro, i_codemp);
-- Obtiene el total deuda de la empresa con errores
   n_tot_deu_err   := SF_OBT_TOTAL_DEUDA_OBSERVADA (i_anopro, i_mespro, i_codemp);
-- Obtiene el numero total de clientes con errores por tipo de control validez
   n_tot_cli_err_v := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'V');
-- Obtiene el total deuda con errores por tipo de control validez
   n_tot_deu_err_v := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'V');
-- Obtiene el numero total de clientes con errores por tipo de control consistencia
   n_tot_cli_err_c := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'C');
-- Obtiene el total deuda con errores por tipo de control consistencia
   n_tot_deu_err_c := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'C');
-- Obtiene el numero total de clientes con errores por tipo de control alerta
   n_tot_cli_err_a := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'A');
-- Obtiene el total deuda con errores por tipo de control alerta
-- n_tot_deu_err_a := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'A');
   n_tot_deu_err_a := NULL;

   UPDATE CRA_TOTALES_VALIDACION
      SET num_tot_err       = n_tot_err,
          num_tot_cli_err   = n_tot_cli_err,
          val_tot_deu_err   = n_tot_deu_err,
          num_tot_cli_err_v = n_tot_cli_err_v,
          val_tot_deu_err_v = n_tot_deu_err_v,
          num_tot_cli_err_c = n_tot_cli_err_c,
          val_tot_deu_err_c = n_tot_deu_err_c,
          num_tot_cli_err_a = n_tot_cli_err_a,
          val_tot_deu_err_a = n_tot_deu_err_a
    WHERE ano_refer = i_anopro AND mes_refer = i_mespro
      AND cod_reporte = 'RCD' AND cod_empresa = i_codemp;

   n_cod_etapa   := '07';
   n_cod_est_pro := 'T';
   n_cod_ide_pro := 409;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL); -- Actualiza CRA_PAR_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);     -- Actualiza CRA_CONTROL_PROCESOS

-- Ingreso de codigos SBS de Clientes Antiguos al movimiento RCD.
   SP_INGRESA_CODSBS_ANTIGUO_RCD (i_anopro, i_mespro, i_codemp);

-- Realiza validacion del control 197 RCD
   SP_VALIDA_CONTROL_197_RCD (i_anopro, i_mespro, i_codemp);

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '79', ln_paso, SYSDATE, 'PROCESO DE ALTAS - FIN DEL PROCESO DE ALTAS', i_codemp);
   COMMIT;

   SP_VAL_EXCLUSION_RCD ('RCD', i_anopro, i_mespro, i_codemp);

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        UPDATE CRA_ULT_COD_SBS SET ind_en_uso = 'N';
        COMMIT;
        n_cod_etapa   := '07';
        n_cod_est_pro := 'E';
        n_cod_ide_pro := 409;
        n_observaciones := Substr('Error: ' || n_error,1,248);
--      Actualiza CRA_PAR_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--      Actualiza CRA_PERIODO_INF_EMP_ETAPA
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
--      Actualiza CRA_PAR_PROCESOS
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
END;

----------------------------------------------------------------------

PROCEDURE SP_INGRESA_CODSBS_ANTIGUO_RCD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- --------------------------------------------------------------------------------------------------------------------
-- Autor    : Jaime Lopez-Torres M. - Marzo 2002
-- --------------------------------------------------------------------------------------------------------------------
-- Parametros INPUT:
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
--
-- Especificacion  : Ingreso de codigos SBS de Clientes Antiguos al movimiento RCD.
-- --------------------------------------------------------------------------------------------------------------------
IS
  CURSOR cur_a IS
  SELECT A.num_sec_reg,
         A.cod_ciiu3,
         A.cod_sunarp,
         A.tip_doc_trib,
         A.num_doc_trib,
         A.tip_doc_iden,
         A.num_doc_iden,
         A.tip_persona,
         A.tip_residencia,
         A.tip_magnitud,
         A.cod_pais,
         A.nom_cliente,
         A.nom_sigla,
         B.cod_unico_clie,
         B.nom_ape_paterno,
         B.nom_ape_materno,
         B.nom_nombres,
         B.cod_est_asig,
         B.cod_sbs_a_asignar
    FROM CRA_VALID_IDENTIF_RCD  "A",
         CRA_VALID_ASIG_CODSBS  "B"
   WHERE A.ano_refer         = i_anopro
     AND A.mes_refer         = i_mespro
     AND A.cod_empresa       = i_codemp
     AND B.ano_refer         = A.ano_refer
     AND B.mes_refer         = A.mes_refer
     AND B.cod_reporte       = 'RCD'
     AND B.cod_empresa       = A.cod_empresa
     AND B.num_sec_reg       = A.num_sec_reg
     AND B.cod_sbs           = 0
     AND B.cod_est_asig      = 'A'
     AND B.cod_sbs_a_asignar > 0;

   n_hay_control_58  NUMBER (01);
   n_hay_control_80  NUMBER (01);
   n_val_tot_deu_41  NUMBER(13,2);
   n_val_tot_deu_58  NUMBER(13,2);
   n_val_tot_deu_80  NUMBER(13,2);

BEGIN
   n_cod_ide_pro := 412;
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL);    -- Actualiza CRA_PAR_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);  -- Actualiza CRA_CONTROL_PROCESOS

   FOR cur in cur_a LOOP
       n_codsbs := cur.cod_sbs_a_asignar;

          UPDATE CRA_VALID_IDENTIF_RCD
             SET cod_sbs     = n_codsbs
           WHERE ano_refer   = i_anopro
             AND mes_refer   = i_mespro
             AND cod_empresa = i_codemp
             AND num_sec_reg = cur.num_sec_reg;

          UPDATE CRA_VALID_ASIG_CODSBS
             SET cod_sbs        = n_codsbs,
                 ind_est_asig   = 'A',
                 cod_usu_apr    = USER,
                 fec_aprobacion = SYSDATE
           WHERE ano_refer      = i_anopro
             AND mes_refer      = i_mespro
             AND cod_reporte    = 'RCD'
             AND cod_empresa    = i_codemp
             AND num_sec_reg    = cur.num_sec_reg;
--
          n_val_tot_deu_41 := 0;
--
          BEGIN
            SELECT val_tot_deu
              INTO n_val_tot_deu_41
              FROM CRA_VAL_CONTROLES_RCD_X_SEC
             WHERE ano_refer   = i_anopro
               AND mes_refer   = i_mespro
               AND cod_empresa = i_codemp
               AND cod_control = 41
               AND num_sec_reg = cur.num_sec_reg
               AND num_sec_cta = 0;
--
             IF SQL%Rowcount = 0 THEN
                n_val_tot_deu_41 := 0;
             ELSE
                IF n_val_tot_deu_41 IS NULL THEN
                   n_val_tot_deu_41 := 0;
                END IF;
--
               DELETE
                 FROM CRA_VAL_CONTROLES_RCD_X_SEC
                WHERE ano_refer   = i_anopro
                  AND mes_refer   = i_mespro
                  AND cod_empresa = i_codemp
                  AND cod_control = 41
                  AND num_sec_reg = cur.num_sec_reg
                  AND num_sec_cta = 0;
             END IF;
--
          EXCEPTION
            WHEN OTHERS THEN
                 n_val_tot_deu_41 := 0;
          END;
--
--        Control 80
          n_hay_control_80 := 0;
          n_val_tot_deu_80 := 0;
--
          BEGIN
            SELECT val_tot_deu
              INTO n_val_tot_deu_80
              FROM CRA_VAL_CONTROLES_RCD_X_SEC
             WHERE ano_refer   = i_anopro
               AND mes_refer   = i_mespro
               AND cod_empresa = i_codemp
               AND cod_control = 80
               AND num_sec_reg = cur.num_sec_reg
               AND num_sec_cta = 0;
--
             IF SQL%Rowcount = 0 THEN
                n_val_tot_deu_80 := 0;
             ELSE
                n_hay_control_80 := 1;
                IF n_val_tot_deu_80 IS NULL THEN
                   n_val_tot_deu_80 := 0;
                END IF;
--
                DELETE
                  FROM CRA_VAL_CONTROLES_RCD_X_SEC
                 WHERE ano_refer   = i_anopro
                   AND mes_refer   = i_mespro
                   AND cod_empresa = i_codemp
                   AND cod_control = 80
                   AND num_sec_reg = cur.num_sec_reg
                   AND num_sec_cta = 0;
            END IF;
--
          EXCEPTION
            WHEN OTHERS THEN
                 n_hay_control_80 := 0;
                 n_val_tot_deu_80 := 0;
          END;

--        Control 58
          n_hay_control_58 := 0;
          n_val_tot_deu_58 := 0;

          BEGIN
            SELECT val_tot_deu
              INTO n_val_tot_deu_58
              FROM CRA_VAL_CONTROLES_RCD_X_SEC
             WHERE ano_refer   = i_anopro
               AND mes_refer   = i_mespro
               AND cod_empresa = i_codemp
               AND cod_control = 58
               AND num_sec_reg = cur.num_sec_reg
               AND num_sec_cta = 0;

             IF SQL%Rowcount = 0 THEN
                n_val_tot_deu_58 := 0;
             ELSE
                n_hay_control_58 := 1;
                IF n_val_tot_deu_58 IS NULL THEN
                   n_val_tot_deu_58 := 0;
                END IF;

                DELETE
                  FROM CRA_VAL_CONTROLES_RCD_X_SEC
                 WHERE ano_refer   = i_anopro
                   AND mes_refer   = i_mespro
                   AND cod_empresa = i_codemp
                   AND cod_control = 58
                   AND num_sec_reg = cur.num_sec_reg
                   AND num_sec_cta = 0;
            END IF;

          EXCEPTION
            WHEN OTHERS THEN
                 n_hay_control_58 := 0;
                 n_val_tot_deu_58 := 0;
          END;

          BEGIN
            n_ya_existe := 0;
            INSERT INTO CRI_DEUDOR_XENT ( cod_sbs, cod_ent_vig, cod_unico_entidad, tip_rel_laboral, ano_prep_icc, mes_prep_icc,
                         ano_urep_icc, mes_urep_icc, ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id,
                         ind_fijo_sunarp, ind_fijo_ciiu3, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod)
                 VALUES (n_codsbs,           -- Codigo SBS
                         i_codemp,           -- Codigo de Empresa
                         cur.cod_unico_clie, -- Codigo Unico del Cliente en la Empresa
                         NULL,               -- Codigo del sector economico
                         i_anopro,           -- A?o del primer reporte del cliente
                         i_mespro,           -- Mes del primer reporte del cliente
                         NULL,               -- A?o del ultimo reporte del cliente
                         NULL,               -- Mes del ultimo reporte del cliente
                         NULL,               -- Indicador de Nombre Sustentado
                         NULL,               -- Indicador de Numero de RUC Sustentado
                         NULL,               -- Indicador de Documento de Identidad Sustentado
                         NULL,               -- Indicador de SUNARP Sustentado
                         NULL,               -- Indicador de CIIU3 Sustentado
                         SYSDATE,            -- Fecha de registro
                         USER,               -- Usuario que registra
                         NULL,               -- Fecha de modificacion
                         NULL);              -- Usuario que modifica
          EXCEPTION
             WHEN OTHERS THEN
                  n_ya_existe := 1;
          END;

          COMMIT;

   END LOOP;
   COMMIT;

-- Borra registros de la tabla CRA_VAL_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROLES_EMPRESA ('RCD', i_anopro, i_mespro, i_codemp);

-- Actualiza CRA_VAL_CONTROLES_X_EMPRESA
   SP_GRABA_CONTROL_RCD_X_EMPRESA ('RCD', i_anopro, i_mespro, i_codemp);

-- Obtiene el numero total de registros observados en la Empresa en Validacion.
   n_tot_err       := SF_OBT_TOTAL_ERRORES_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el numero total de clientes observados en la empresa
   n_tot_cli_err   := SF_OBT_TOTAL_CLI_ERR_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el total deuda de la empresa con errores
   n_tot_deu_err   := SF_OBT_TOTAL_DEUDA_OBSERVADA (i_anopro, i_mespro, i_codemp);

-- Obtiene el numero total de clientes con errores por tipo de control validez
   n_tot_cli_err_v := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el total deuda con errores por tipo de control validez
   n_tot_deu_err_v := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el numero total de clientes con errores por tipo de control consistencia
   n_tot_cli_err_c := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el total deuda con errores por tipo de control consistencia
   n_tot_deu_err_c := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el numero total de clientes con errores por tipo de control alerta
   n_tot_cli_err_a := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'A');

-- Obtiene el total deuda con errores por tipo de control alerta
-- n_tot_deu_err_a := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'A');
   n_tot_deu_err_a := NULL;

   UPDATE CRA_TOTALES_VALIDACION
      SET num_tot_err       = n_tot_err,
          num_tot_cli_err   = n_tot_cli_err,
          val_tot_deu_err   = n_tot_deu_err,
          num_tot_cli_err_v = n_tot_cli_err_v,
          val_tot_deu_err_v = n_tot_deu_err_v,
          num_tot_cli_err_c = n_tot_cli_err_c,
          val_tot_deu_err_c = n_tot_deu_err_c,
          num_tot_cli_err_a = n_tot_cli_err_a,
          val_tot_deu_err_a = n_tot_deu_err_a
    WHERE ano_refer         = i_anopro
      AND mes_refer         = i_mespro
      AND cod_reporte       = 'RCD'
      AND cod_empresa       = i_codemp;
--
   n_cod_etapa   := '07';
   n_cod_ide_pro := 412;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
--   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, 'T');

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        n_cod_ide_pro := 412;
        n_observaciones := Substr('Error: ' || n_error,1,248);
--      Actualiza CRA_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--      Actualiza CRA_PERIODO_INF_EMP_ETAPA
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, '07', 'E');
--      Actualiza CRA_PAR_PROCESOS
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
END;

----------------------------------------------------------------------

PROCEDURE SP_VALIDA_CONTROL_197_RCD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- --------------------------------------------------------------------------------------------------------------------
-- Autor    : Jaime Lopez-Torres M. - Enero 2004
-- --------------------------------------------------------------------------------------------------------------------
-- Parametros INPUT:
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
-- Especificacion  : Valida control 197 RCD.
IS
-------------------    -------------------
-- FVSH    2005-05-16
-- Se cambia la validacion del control 197, no se toma en cuenta la calificacion
-- El cursor obtiene todos los Codigos SBS Duplicados y que sean diferentes a cero
  CURSOR cur_codsbs_duplicados IS
  SELECT cod_sbs,
         count(*) AS nro_secs
    FROM CRA_VALID_IDENTIF_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND cod_sbs        > 0
     AND tip_formulario = '1'
     AND tip_persona   <> '3' -- JCFS 13/10/2010: Se filtra las personas de tipo Mancomunadas por estar pendiente de definición
   GROUP BY cod_sbs
  HAVING COUNT(*) > 1;
-------------------    -------------------
lv_cod_sbs  cra_valid_identif_rcd.cod_sbs%type;
-------------------    -------------------
-- Obtiene las secuencias de los cod_sbs duplicados
CURSOR CUR_SEC_DUPLICADAS IS
SELECT NUM_SEC_REG
  FROM CRA_VALID_IDENTIF_RCD
 WHERE ano_refer   = i_anopro
   AND mes_refer   = i_mespro
   AND cod_empresa = i_codemp
   AND cod_sbs     = lv_cod_sbs
   AND tip_formulario = '1'
   AND tip_persona   <> '3'; -- JCFS 13/10/2010: Se filtra las personas de tipo Mancomunadas por estar pendiente de definición

------------------------------------------
-- Definicion de Arreglos
   TYPE def_arr_error  IS VARRAY(10) OF   NUMBER(07);
   TYPE def_arr_activ  IS VARRAY(10) OF VARCHAR2(01);
   TYPE def_arr_tipcon IS VARRAY(10) OF VARCHAR2(01);

-- Definicion de variables
   arr_error           def_arr_error  := def_arr_error (0,0,0,0,0,0,0,0,0,0);
   arr_activ           def_arr_activ  := def_arr_activ ('','','','','','','','','','');
   arr_tipcon          def_arr_tipcon := def_arr_tipcon('','','','','','','','','','');

   n_control              NUMBER(03);
   n_hay_error            NUMBER(01);
   n_no_existe            NUMBER(01);
   n_num_sec_reg          NUMBER(07);
   n_reporte              VARCHAR2(3);

BEGIN
   n_cod_ide_pro := 470;
   n_reporte     := 'RCD';

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

-- Borra registros de validacion de un control en tabla CRA_VAL_CONTROLES_RCD_X_SEC
   SP_BORRA_VALID_CONTROL_RCD (i_anopro, i_mespro, i_codemp, 197);

-- Obtiene Datos de Control 197
   SELECT ind_activ_control,
          tip_control_val
     INTO arr_activ  (1),
          arr_tipcon (1)
     FROM CRA_CONTROL_HIS_VALIDACION
    WHERE ano_refer   = i_anopro
      AND mes_refer   = i_mespro
      AND cod_reporte = n_reporte
      AND cod_control = 197;

   arr_error  (1) := 0;

----------------------------------------------------------
-- Modificacion realizada, en esta validacion ya no se considera la clasificacion.
   n_control := 1;
   IF arr_activ (n_control) = 'S' THEN
      FOR cur_cod_dup in cur_codsbs_duplicados LOOP
          lv_cod_sbs := cur_cod_dup.cod_sbs;

          FOR cur_sec_dup IN CUR_SEC_DUPLICADAS LOOP
              n_num_sec_reg := cur_sec_dup.num_sec_reg;
              n_hay_error := 1;
              arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, 197, n_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
              BEGIN
                DELETE CRA_VALID_ASIG_CODSBS
                 WHERE ano_refer   = i_anopro
                   AND mes_refer   = i_mespro
                   AND cod_reporte = n_reporte
                   AND cod_empresa = i_codemp
                   AND num_sec_reg = n_num_sec_reg;
                COMMIT;
              EXCEPTION
                WHEN OTHERS THEN
                   n_no_existe := 1;
              END;
          END LOOP;
      END LOOP;
   END IF;

-- Borra registros de validacion de un control en tabla CRA_VAL_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROL_X_EMPRESA (n_reporte, i_anopro, i_mespro, i_codemp, 197);

-- Actualiza registros de RCD de un control en tabla CRA_VAL_CONTROLES_X_EMPRESA
   SP_GRABA_CONTROL_RCD_EMPRESA (n_reporte, i_anopro, i_mespro, i_codemp, 197);

-- Obtiene el numero total de registros observados en la Empresa en Validacion.
   n_tot_err       := SF_OBT_TOTAL_ERRORES_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el numero total de clientes observados en la empresa
   n_tot_cli_err   := SF_OBT_TOTAL_CLI_ERR_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el total deuda de la empresa con errores
   n_tot_deu_err   := SF_OBT_TOTAL_DEUDA_OBSERVADA (i_anopro, i_mespro, i_codemp);

-- Obtiene el numero total de clientes con errores por tipo de control validez
   n_tot_cli_err_v := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el total deuda con errores por tipo de control validez
   n_tot_deu_err_v := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el numero total de clientes con errores por tipo de control consistencia
   n_tot_cli_err_c := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el total deuda con errores por tipo de control consistencia
   n_tot_deu_err_c := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el numero total de clientes con errores por tipo de control alerta
   n_tot_cli_err_a := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'A');

-- Obtiene el total deuda con errores por tipo de control alerta
-- n_tot_deu_err_a := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'A');
   n_tot_deu_err_a := NULL;

   UPDATE CRA_TOTALES_VALIDACION
      SET num_tot_err       = n_tot_err,
          num_tot_cli_err   = n_tot_cli_err,
          val_tot_deu_err   = n_tot_deu_err,
          num_tot_cli_err_v = n_tot_cli_err_v,
          val_tot_deu_err_v = n_tot_deu_err_v,
          num_tot_cli_err_c = n_tot_cli_err_c,
          val_tot_deu_err_c = n_tot_deu_err_c,
          num_tot_cli_err_a = n_tot_cli_err_a,
          val_tot_deu_err_a = n_tot_deu_err_a
    WHERE ano_refer         = i_anopro
      AND mes_refer         = i_mespro
      AND cod_reporte       = n_reporte
      AND cod_empresa       = i_codemp;

   n_cod_etapa   := '07';
   n_cod_ide_pro := 470;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, 'T');

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        n_cod_ide_pro := 470;
        n_observaciones := Substr('Error: ' || n_error,1,248);
--      Actualiza CRA_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--      Actualiza CRA_PERIODO_INF_EMP_ETAPA
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, '07', 'E');
--      Actualiza CRA_PAR_PROCESOS
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
END;

----------------------------------------------------------------------

PROCEDURE SP_INGRESA_CODSBS_NUEVO_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
---------------------
--       Descripcion
--           Ingreso de Nuevos Clientes RCA / RCM / RCO al Maestro de Personas SBS.
-- --------------------------------------------------------------------------------------------------------------------
IS
BEGIN
PK_VALIDADOR_RCA.SP_INGRESA_CODSBS_NUEVO_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        UPDATE CRA_ULT_COD_SBS
           SET ind_en_uso = 'N';
        COMMIT;
        n_cod_etapa   := '07';
        n_cod_est_pro := 'E';
        --n_cod_ide_pro := 409;
        n_observaciones := Substr('Error: ' || n_error,1,248);
        SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_cod_reporte, i_codemp, n_cod_etapa, n_cod_est_pro, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_INGRESA_CODSBS_ANTIGUO_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
---------------------
--       Descripcion
--           Ingreso de codigos SBS de Clientes Antiguos al movimiento RCA / RCM / RCO.
---------------------
IS
BEGIN
PK_VALIDADOR_RCA.SP_INGRESA_CODSBS_ANTIGUO_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        n_observaciones := Substr('Error: ' || n_error,1,248);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_cod_reporte, i_codemp, '07', 'E', i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_VALIDA_CONTROL_197_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
---------------------
--       Descripcion
--           Valida control 197 RCA / RCM / RCO.
-- --------------------------------------------------------------------
IS
BEGIN
   PK_VALIDADOR_RCA.SP_VALIDA_CONTROL_197_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        n_observaciones := Substr('Error: ' || n_error,1,248);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_cod_reporte, i_codemp, '07', 'E', i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_X_EMPRESA
         (i_cod_reporte   IN VARCHAR2,
          i_anopro        IN VARCHAR2,
          i_mespro        IN VARCHAR2,
          i_codemp        IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Graba  controles observados por empresa
----------------------------------------------------------------
IS
BEGIN
     IF i_cod_reporte = 'RCD' THEN
        SP_GRABA_CONTROL_RCD_X_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp );
     END IF;

     IF i_cod_reporte in ('RCA', 'RCM', 'RCT', 'RCO') THEN
        SP_GRABA_CONTROL_RCA_X_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
     END IF;

     IF i_cod_reporte = 'RTC' THEN
        SP_GRABA_CONTROL_RTC_X_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp );
     END IF;
     RETURN;
EXCEPTION
    WHEN OTHERS THEN
         RETURN;
END ;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_EMPRESA
         (i_cod_reporte    IN VARCHAR2,
          i_anopro         IN VARCHAR2,
          i_mespro         IN VARCHAR2,
          i_codemp         IN VARCHAR2,
          i_control        IN VARCHAR2,
          i_dia_refer      IN VARCHAR2 default '01',
          i_cod_sec_envio  IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
---------------------
--       Descripcion
--           Actualiza registros de RCA / RCM / RCO de un control en tabla CRA_VAL_CONTROLES_X_EMPRESA.
----------------------------------------------------------------
IS
BEGIN
     IF i_cod_reporte = 'RCD' THEN
        SP_GRABA_CONTROL_RCD_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_control);
     END IF;

     IF i_cod_reporte IN ('RCA', 'RCM', 'RCO', 'RCT') THEN
        SP_GRABA_CONTROL_RCA_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_control, i_dia_refer, i_cod_sec_envio );
     END IF;

     IF i_cod_reporte = 'RTC' THEN
        SP_GRABA_CONTROL_RTC_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_control);
     END IF;
     RETURN;
EXCEPTION
    WHEN OTHERS THEN
         RETURN;
END ;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RCA_X_EMPRESA
         (i_cod_reporte   IN VARCHAR2,
          i_anopro        IN VARCHAR2,
          i_mespro        IN VARCHAR2,
          i_codemp        IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ---------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Actualiza registros de RCD en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-- ---------------------------------------------------------------------------------------
-- 16/12/2003     Jaime Lopez-Torres M.       Se incluye condicion para el control 190
------------------------------------------------------------------------------------------
IS
BEGIN
  PK_VALIDADOR_RCA.SP_GRABA_CONTROL_RCA_X_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_observaciones := Substr('Error: ' || n_error,1,248);
--     Actualiza CRA_CONTROL_PROCESOS
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
--     Actualiza CRA_PAR_PROCESOS
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RCA_EMPRESA
         (i_cod_reporte    IN VARCHAR2,
          i_anopro         IN VARCHAR2,
          i_mespro         IN VARCHAR2,
          i_codemp         IN VARCHAR2,
          i_control        IN VARCHAR2,
          i_dia_refer      IN VARCHAR2 default '01',
          i_cod_sec_envio  IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
-- --------------------------------------------------------------------------------------------
--       Descripcion
--           Actualiza registros de RCA / RCM / RCO de un control en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-- --------------------------------------------------------------------------------------------
IS
BEGIN
   PK_VALIDADOR_RCA.SP_GRABA_CONTROL_RCA_EMPRESA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_control, i_dia_refer, i_cod_sec_envio );
EXCEPTION
   WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_observaciones := Substr('Error: ' || n_error,1,248);
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RCD_X_EMPRESA
         (i_cod_reporte    IN VARCHAR2,
          i_anopro         IN VARCHAR2,
          i_mespro         IN VARCHAR2,
          i_codemp         IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ---------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Actualiza registros de RCD en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-- ---------------------------------------------------------------------------------------
-- 16/12/2003     Jaime Lopez-Torres M.       Se incluye condicion para el control 190
-- FVSH Se subdivide el select del cursor, el select para tener un menor tiempo de respuesta
-- FVSH Se eliminan los Hints del cursor, el select sin hacer uso de los hint tenia un menor tiempo de respuesta
-- JCFS 16/03/2016: Se elimina el cursor y se reemplaza por un INSERT - SELECT
-------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_est_pro := 'P';
   n_cod_ide_pro := 429;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

   INSERT INTO CRA_VAL_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control,
                                             num_veces, num_clientes, val_tot_deu, ind_pro_val, dia_refer, cod_sec_envio )
   SELECT i_anopro, i_mespro, i_cod_reporte, i_codemp, dt.cod_control,
          case when dt.cod_control = 190 then 0 else dt.veces end AS veces,
          case when dt.tip_control_val = 'D' then 0 else dt.clientes end AS clientes,
          dt.val_tot_deuda,
          case when dt.cod_control = 190 then 'VA' else dt.ind_pro_val end AS ind_pro_val, i_dia_refer, i_cod_sec_envio
     FROM
          ( SELECT A.cod_control, count(1) AS veces, count(distinct A.num_sec_reg) AS clientes, B.tip_control_val, A.ind_pro_val, SUM(A.val_tot_deu) AS val_tot_deuda
              FROM CRA_CONTROL_HIS_VALIDACION "B"
                   INNER JOIN CRA_VAL_CONTROLES_RCD_X_SEC "A" ON B.ano_refer = A.ano_refer AND B.mes_refer = A.mes_refer
                                                             AND B.cod_control = A.cod_control AND B.cod_reporte = A.cod_reporte
                   INNER JOIN CRA_VALID_IDENTIF_RCD "C" ON C.ano_refer = A.ano_refer AND C.mes_refer = A.mes_refer
                                                       AND C.cod_empresa = A.cod_empresa AND C.num_sec_reg = A.num_sec_reg
             WHERE A.ano_refer   = i_anopro AND A.mes_refer   = i_mespro
               AND A.cod_empresa = i_codemp AND A.cod_reporte = i_cod_reporte
               AND B.tip_control_val IN ('A', 'C', 'V') AND C.tip_formulario = '1'
             GROUP BY A.cod_control, B.tip_control_val, A.ind_pro_val
          UNION
            SELECT A.cod_control, count(1) AS veces, count(distinct A.num_sec_reg) AS clientes, B.tip_control_val, A.ind_pro_val, SUM(A.val_tot_deu) AS val_tot_deuda
              FROM CRA_CONTROL_HIS_VALIDACION  "B"
                   INNER JOIN CRA_VAL_CONTROLES_RCD_X_SEC "A" ON B.ano_refer = A.ano_refer AND B.mes_refer = A.mes_refer
                                                             AND B.cod_reporte = A.cod_reporte AND B.cod_control = A.cod_control
                   INNER JOIN CRA_VALID_IDENTIF_RCD "C" ON C.ano_refer = A.ano_refer AND C.mes_refer = A.mes_refer
                                                       AND C.cod_empresa = A.cod_empresa AND C.num_sec_reg = A.num_sec_reg
             WHERE A.ano_refer   = i_anopro AND A.mes_refer   = i_mespro
               AND A.cod_empresa = i_codemp AND A.cod_reporte = i_cod_reporte
               AND B.tip_control_val = 'D'
             GROUP BY A.cod_control, B.tip_control_val, A.ind_pro_val
          UNION
            SELECT A.cod_control, count(1) AS veces, count(distinct A.num_sec_reg) AS clientes, B.tip_control_val, A.ind_pro_val, SUM(A.val_tot_deu) AS val_tot_deuda
              FROM CRA_CONTROL_HIS_VALIDACION  "B"
                   INNER JOIN CRA_VAL_CONTROLES_RCD_X_SEC "A" ON B.ano_refer = A.ano_refer AND B.mes_refer = A.mes_refer
                                                             AND B.cod_reporte = A.cod_reporte AND B.cod_control = A.cod_control
                   INNER JOIN CRA_VALID_IDENTIF_RCD "C" ON C.ano_refer = A.ano_refer AND C.mes_refer = A.mes_refer
                                                       AND C.cod_empresa = A.cod_empresa
             WHERE A.ano_refer   = i_anopro AND A.mes_refer   = i_mespro
               AND A.cod_empresa = i_codemp AND A.cod_reporte = i_cod_reporte
               AND B.cod_control = 190      AND A.num_sec_reg = 0
             GROUP BY A.cod_control, B.tip_control_val, A.ind_pro_val
          ) dt
    WHERE dt.cod_control NOT IN (188, 191)  -- JCFS 15/02/2012: Se retira al control 189 de esta condición
    ORDER BY 1 asc ;

    COMMIT;

/*
   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RCD (i_anopro, i_mespro, i_codemp, cur.cod_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       n_nro_veces   := cur.veces;
       n_ind_pro_val := cur.ind_pro_val;

       IF cur.cod_control = 190 THEN
          n_nro_veces   := 0;
          n_ind_pro_val := 'VA';
       END IF;

--     Si se requiere visualizar los demas controles de cuadre, comentar la sgte condicion
--     JCFS 15/02/2012: Se retira al control 189 de la siguiente condición
       IF cur.cod_control NOT IN (188, 191) THEN    -- 189,
              VALUES (i_anopro, i_mespro, i_cod_reporte, i_codemp, cur.cod_control,
                      n_nro_veces, n_nro_clientes, n_tot_deuda, n_ind_pro_val, i_dia_refer, i_cod_sec_envio);

          COMMIT;
       END IF;

   END LOOP;
*/
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_observaciones := Substr('Error: ' || n_error,1,248);
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RCD_EMPRESA
         (i_cod_reporte    IN VARCHAR2,
          i_anopro         IN VARCHAR2,
          i_mespro         IN VARCHAR2,
          i_codemp         IN VARCHAR2,
          i_control        IN VARCHAR2)
-- ---------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2004
-- Objetivo: Actualiza registros de RCD de un control en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-- ---------------------------------------------------------------------------------------
IS
  CURSOR CUR_A IS
  SELECT --+Index(C CRA_VALID_IDENTIF_RCD_PK)
         --+ORDERED
         count(*) AS veces,
         count(distinct A.num_sec_reg) AS clientes,
         B.tip_control_val,
         A.ind_pro_val
    FROM CRA_VAL_CONTROLES_RCD_X_SEC "A",
         CRA_CONTROL_HIS_VALIDACION  "B",
         CRA_VALID_IDENTIF_RCD       "C"
   WHERE A.ano_refer      = i_anopro
     AND A.mes_refer      = i_mespro
     AND A.cod_empresa    = i_codemp
     AND A.cod_control    = i_control
     AND B.ano_refer      = A.ano_refer
     AND B.mes_refer      = A.mes_refer
     AND B.cod_reporte    = i_cod_reporte
     AND B.cod_control    = A.cod_control
     AND C.ano_refer      = A.ano_refer
     AND C.mes_refer      = A.mes_refer
     AND C.cod_empresa    = A.cod_empresa
     AND (    ( B.tip_control_val IN ('A', 'C', 'V') AND C.num_sec_reg = A.num_sec_reg AND C.tip_formulario = '1' )
           OR ( B.tip_control_val = ('D') AND C.num_sec_reg = A.num_sec_reg )
           OR ( B.cod_control = 190 AND A.num_sec_reg = 0 )
         )
GROUP BY B.tip_control_val, A.ind_pro_val;

n_nro_clientes NUMBER(8);
n_nro_veces    NUMBER(8);
n_tot_deuda    NUMBER(15,2);
n_ind_pro_val  VARCHAR2(2);

BEGIN
   n_cont := 0;
   n_cod_est_pro := 'P';
   n_cod_ide_pro := 474;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RCD (i_anopro, i_mespro, i_codemp, i_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       n_nro_veces   := cur.veces;
       n_ind_pro_val := cur.ind_pro_val;

       IF i_control = 190 THEN
          n_nro_veces   := 0;
          n_ind_pro_val := 'VA';
       END IF;

--     JCFS 15/02/2012: Se retira al control 189 de la siguiente condición
       IF i_control NOT IN (188, 191) THEN   -- 189,
          INSERT INTO CRA_VAL_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control,
                      num_veces, num_clientes, val_tot_deu, ind_pro_val )
              VALUES (i_anopro, i_mespro, i_cod_reporte, i_codemp, i_control,
                      n_nro_veces, n_nro_clientes, n_tot_deuda, n_ind_pro_val);
       END IF;

-- Control de transacciones
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_observaciones := Substr('Error: ' || n_error,1,248);
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);

END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RTC_X_EMPRESA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Actualiza registros de RTC en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-----------------------------------------------------------------------------
IS
  CURSOR CUR_A IS
  SELECT A.cod_control,
         count(*) AS veces,
         count(distinct A.num_sec_reg) AS clientes,
         B.tip_control_val,
         A.ind_pro_val
    FROM CRA_VAL_CONTROLES_RTC_X_SEC  "A",
         CRA_CONTROL_HIS_VALIDACION   "B",
         CRA_VALID_IDENTIF_RTC        "C"
   WHERE A.ano_refer      = i_anopro
     AND A.mes_refer      = i_mespro
     AND A.cod_empresa    = i_codemp
     AND A.ano_refer      = B.ano_refer
     AND A.mes_refer      = B.mes_refer
     AND B.cod_reporte    = i_cod_reporte
     AND B.cod_control    = A.cod_control
     AND C.ano_refer      = A.ano_refer
     AND C.mes_refer      = A.mes_refer
     AND C.cod_empresa    = A.cod_empresa
     AND C.num_sec_reg    = A.num_sec_reg
     AND C.tip_formulario = '1'
GROUP BY A.cod_control,
         B.tip_control_val,
         A.ind_pro_val
ORDER BY A.cod_control;

   n_nro_clientes NUMBER(8);
   n_tot_deuda    NUMBER(15,2);

BEGIN
   n_cont := 0;
   n_cod_est_pro := 'P';
   n_cod_ide_pro := 430;

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RTC (i_anopro, i_mespro, i_codemp, cur.cod_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       INSERT INTO CRA_VAL_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control,
                    num_veces, num_clientes, val_tot_deu, ind_pro_val )
            VALUES (i_anopro, i_mespro, i_cod_reporte, i_codemp, cur.cod_control,
                    cur.veces, n_nro_clientes, n_tot_deuda, cur.ind_pro_val);
-- Control de transacciones
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;

   n_cod_est_pro := 'T';
   n_cod_ide_pro := 430;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_cod_ide_pro := 430;
       n_observaciones := Substr('Error: ' || n_error,1,248);
--     Actualiza CRA_CONTROL_PROCESOS
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--     Actualiza CRA_PAR_PROCESOS
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RTC_EMPRESA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_control      IN VARCHAR2)
-- Autor   : Jaime Lopez-Torres M. - Enero 2004
-- Objetivo: Actualiza registros de control RTC en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-----------------------------------------------------------------------------
IS
  CURSOR CUR_A IS
  SELECT count(*) AS veces,
         count(distinct A.num_sec_reg) AS clientes,
         B.tip_control_val,
         A.ind_pro_val
    FROM CRA_VAL_CONTROLES_RTC_X_SEC  "A",
         CRA_CONTROL_HIS_VALIDACION   "B",
         CRA_VALID_IDENTIF_RTC        "C"
   WHERE A.ano_refer      = i_anopro
     AND A.mes_refer      = i_mespro
     AND A.cod_empresa    = i_codemp
     AND A.cod_control    = i_control
     AND B.ano_refer      = A.ano_refer
     AND B.mes_refer      = A.mes_refer
     AND B.cod_reporte    = i_cod_reporte
     AND B.cod_control    = A.cod_control
     AND C.ano_refer      = A.ano_refer
     AND C.mes_refer      = A.mes_refer
     AND C.cod_empresa    = A.cod_empresa
     AND C.num_sec_reg    = A.num_sec_reg
     AND C.tip_formulario = '1'
GROUP BY B.tip_control_val,
         A.ind_pro_val;
--
-- Definicion de variables
   n_nro_clientes NUMBER(8);
   n_tot_deuda    NUMBER(15,2);
--
 BEGIN
-- Inicializa variables
   n_cont := 0;
   n_cod_est_pro := 'P';
   n_cod_ide_pro := 475;
--
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
--
   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RTC (i_anopro, i_mespro, i_codemp, i_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       INSERT INTO CRA_VAL_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control,
                    num_veces, num_clientes, val_tot_deu, ind_pro_val )
            VALUES (i_anopro, i_mespro, i_cod_reporte, i_codemp, i_control,
                    cur.veces, n_nro_clientes, n_tot_deuda, cur.ind_pro_val);
-- Control de transacciones
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;
--
   n_cod_est_pro := 'T';
   n_cod_ide_pro := 475;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
--
EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_cod_ide_pro := 475;
       n_observaciones := Substr('Error: ' || n_error,1,248);
--     Actualiza CRA_CONTROL_PROCESOS
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--     Actualiza CRA_PAR_PROCESOS
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
END;

----------------------------------------------------------------------

PROCEDURE SP_INGRESA_CODSBS_NUEVO_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- --------------------------------------------------------------------------------------------------------------------
-- Autor    : Jaime Lopez-Torres M. - Marzo 2002
-- --------------------------------------------------------------------------------------------------------------------
-- Parametros INPUT:
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
-- --------------------------------------------------------------------------------------------------------------------
-- Especificacion    :   Ingreso de Nuevos Clientes RTC al Maestro de Personas SBS.
-- --------------------------------------------------------------------------------------------------------------------
IS
  CURSOR cur_a IS
  SELECT A.num_sec_reg,
         A.cod_ciiu3,
         A.cod_sunarp,
         A.tip_doc_trib,
         A.num_doc_trib,
         A.tip_doc_iden,
         A.num_doc_iden,
         A.tip_persona,
         A.tip_residencia,
         A.tip_magnitud,
         A.cod_pais,
         A.nom_cliente,
         A.nom_sigla,
         A.sexo,
         A.est_civil,
         A.fec_nac,
         B.cod_unico_clie,
         B.nom_ape_paterno,
         B.nom_ape_materno,
         b.nom_ape_casada,
         B.nom_nombres,
         B.NOM_SEGUNDO_NOMBRE,
         B.cod_est_asig,
         B.cod_sbs_a_asignar
    FROM CRA_VALID_IDENTIF_RTC  "A",
         CRA_VALID_ASIG_CODSBS  "B"
   WHERE A.ano_refer    = i_anopro
     AND A.mes_refer    = i_mespro
     AND A.cod_empresa  = i_codemp
     AND B.ano_refer    = A.ano_refer
     AND B.mes_refer    = A.mes_refer
     AND B.cod_reporte  = 'RTC'
     AND B.cod_empresa  = A.cod_empresa
     AND B.num_sec_reg  = A.num_sec_reg
     AND B.cod_sbs      = 0
     AND B.cod_est_asig = 'N';

   n_bloquea_acceso   NUMBER(01);
   n_ult_codsbs       NUMBER(10);
   n_ind_residencia   VARCHAR2(01);
   n_val_tot_deu      NUMBER(13,2);

BEGIN
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 416, 'P', NULL);
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '06', 'P');
-- Actualiza CRA_PAR_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, 416, NULL, NULL, 'VA', NULL, NULL, NULL);

   n_bloquea_acceso := 0;
   WHILE n_bloquea_acceso = 0 LOOP
         IF SF_OBT_EST_ULT_CODSBS = 'N' THEN
            n_bloquea_acceso := 1;
            UPDATE CRA_ULT_COD_SBS
               SET ind_en_uso = 'S';
            COMMIT;
         END IF;
   END LOOP;
--
   FOR cur in cur_a LOOP
       n_existe_doc_iden := 0;
       n_existe_doc_trib := 0;
--
       IF cur.tip_doc_iden > ' ' THEN
          BEGIN
            SELECT MIN(cod_sbs)
              INTO n_cod_sbs_iden
              FROM CRA_VALID_ASIG_CODSBS
             WHERE ano_refer    = i_anopro
               AND mes_refer    = i_mespro
               AND num_doc_iden = cur.num_doc_iden
               AND num_doc_iden NOT IN ('0','00', '000', '0000', '00000', '000000',
                                       '0000000', '00000000','00000000000')
               AND ind_est_asig = 'A';
            IF  SQL%Rowcount <> 0
            AND n_cod_sbs_iden IS NOT NULL THEN
                n_existe_doc_iden := 1;
            END IF;
          EXCEPTION
             WHEN OTHERS THEN
                  n_existe_doc_iden := 0;
          END;
       END IF;
--
       IF cur.tip_doc_trib > ' ' THEN
          BEGIN
            SELECT MIN(cod_sbs)
              INTO n_cod_sbs_trib
              FROM CRA_VALID_ASIG_CODSBS
             WHERE ano_refer    = i_anopro
               AND mes_refer    = i_mespro
               AND num_doc_trib = cur.num_doc_trib
               AND num_doc_trib NOT IN ('0','00', '000', '0000', '00000', '000000',
                                        '0000000', '00000000','00000000000')
               AND ind_est_asig = 'A';
            IF  SQL%Rowcount <> 0
            AND n_cod_sbs_trib IS NOT NULL THEN
                n_existe_doc_trib := 1;
            END IF;
          EXCEPTION
             WHEN OTHERS THEN
                  n_existe_doc_trib := 0;
          END;
       END IF;
--
       IF n_existe_doc_iden = 1
       OR n_existe_doc_trib = 1 THEN
          IF  n_existe_doc_iden = 1
          AND n_existe_doc_trib = 0 THEN
              UPDATE CRA_VALID_ASIG_CODSBS
                 SET cod_est_asig      = 'A',
                     cod_sbs_a_asignar =  n_cod_sbs_iden,
                     cod_sbs_coinc_ide =  n_cod_sbs_iden
               WHERE ano_refer   = i_anopro
                 AND mes_refer   = i_mespro
                 AND cod_reporte = 'RTC'
                 AND cod_empresa = i_codemp
                 AND num_sec_reg = cur.num_sec_reg;
          ELSE
             IF  n_existe_doc_iden = 0
             AND n_existe_doc_trib = 1 THEN
                 UPDATE CRA_VALID_ASIG_CODSBS
                    SET cod_est_asig      = 'A',
                        cod_sbs_a_asignar =  n_cod_sbs_trib,
                        cod_sbs_coinc_ruc =  n_cod_sbs_trib
                  WHERE ano_refer   = i_anopro
                    AND mes_refer   = i_mespro
                    AND cod_reporte = 'RTC'
                    AND cod_empresa = i_codemp
                    AND num_sec_reg = cur.num_sec_reg;
             ELSE
                IF n_cod_sbs_iden = n_cod_sbs_trib THEN
--                 Doble coindidencia
                   UPDATE CRA_VALID_ASIG_CODSBS
                      SET cod_est_asig      = 'A',
                          cod_sbs_a_asignar =  n_cod_sbs_trib,
                          cod_sbs_coinc_ide =  n_cod_sbs_iden,
                          cod_sbs_coinc_ruc =  n_cod_sbs_trib
                    WHERE ano_refer   = i_anopro
                      AND mes_refer   = i_mespro
                      AND cod_reporte = 'RTC'
                      AND cod_empresa = i_codemp
                      AND num_sec_reg = cur.num_sec_reg;
                ELSE
--                 Duda
                   UPDATE CRA_VALID_ASIG_CODSBS
                      SET cod_est_asig      = 'D',
                          cod_sbs_coinc_ide =  n_cod_sbs_iden,
                          cod_sbs_coinc_ruc =  n_cod_sbs_trib
                    WHERE ano_refer   = i_anopro
                      AND mes_refer   = i_mespro
                      AND cod_reporte = 'RTC'
                      AND cod_empresa = i_codemp
                      AND num_sec_reg = cur.num_sec_reg;
                END IF;
             END IF;
          END IF;
          COMMIT;
       ELSE
          n_ult_codsbs := SF_OBT_ULT_COD_SBS;
          IF n_ult_codsbs > 0 THEN
             n_codsbs := SF_GENERA_MOD11 (n_ult_codsbs);

             UPDATE CRA_ULT_COD_SBS
                SET cod_sbs_ult = n_codsbs;

             IF n_codsbs > n_ult_codsbs THEN
                IF cur.tip_doc_trib = '2' THEN
                   n_numruc_8  := cur.num_doc_trib;
                   n_numruc_11 := NULL;
                ELSE
                   IF cur.tip_doc_trib = '3' THEN
                      n_numruc_11 := cur.num_doc_trib;
                      n_numruc_8  := NULL;
                   ELSE
                      n_numruc_8  := NULL;
                      n_numruc_11 := NULL;
                   END IF;
                END IF;

                IF cur.tip_residencia = '0' THEN
                   n_ind_residencia := 'N';
                ELSE
                   n_ind_residencia := 'S';
                END IF;

             INSERT INTO CRI_PERSONA ( cod_sbs, cod_actividad_econ, tip_persona, num_ruc, cod_pais_origen, ind_reside_peru, fec_registro,
                          num_telef, num_fax, cod_grupo_eco, cod_magnitud_emp, val_ventas_anual, fec_ventas_anual, val_patrimonio,
                          val_cap_social, ind_indecopi, fec_cap_social, tip_condicion, tip_reg_mv, ano_prep_icc, mes_prep_icc,
                          ano_urep_icc, mes_urep_icc, num_ruc11, cod_ciiu_v2, num_lib_trib, cod_usu_reg, fec_modificacion, cod_usu_mod)
                  VALUES (n_codsbs,         -- Codigo SBS
                          cur.cod_ciiu3,    -- Codigo del sector economico
                          cur.tip_persona,  -- Tipo de persona
                          n_numruc_8,       -- Numero de RUC - 8 digitod
                          cur.cod_pais,     -- Codigo de pais de origen
                          n_ind_residencia, -- Indicador si reside en el Peru
                          SYSDATE,          -- Fecha de registro
                          NULL,             -- Numeros de telefonos
                          NULL,             -- Numeros de fax
                          NULL,             -- Codigo del grupo economico
                          cur.tip_magnitud, -- Codigo de la magnitud empresarial
                          NULL,             -- Valor de las ventas anuales
                          NULL,             -- Fecha de referencia de las ventas anuales
                          NULL,             --
                          NULL,             --
                          'N',              --
                          NULL,             --
                          NULL,             --
                          NULL,             --
                          i_anopro,         -- A?o del primer reporte del cliente
                          i_mespro,         -- Mes del primer reporte del cliente
                          NULL,             -- A?o del ultimo reporte del cliente
                          NULL,             -- Mes del ultimo reporte del cliente
                          n_numruc_11,      -- Numero de RUC - 11 digitos
                          NULL,             -- Codigo CIIU version 2
                          NULL,             -- Numero de Libreta Tributaria
                          USER,              -- Codigo de Usuario que registra
                          NULL,               -- Fecha de Modificacion
                          NULL);            -- Codigo de Usuario que modifica

             IF cur.tip_persona = '1' THEN
                INSERT INTO CRI_PERSONA_NAT ( cod_sbs, ape_paterno, ape_materno, ape_casada, nom_persona, segundo_nombre, fec_nacimiento, tip_estado_civil,
                             cod_sbs_conyuge, tip_docto_ident, num_docto_ident, tip_sexo, fec_ini_conyuge, cod_profesion, des_centro_trabajo,
                             tip_persona_nat, ind_separac_bienes, tip_trabajador, val_otros_ingresos, val_ingresos_fam, cod_cargo,
                             val_remunera_total, fec_ingresos_fam, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod)
                     VALUES (n_codsbs,            -- Codigo SBS
                             trim(cur.nom_ape_paterno), -- Apellido paterno
                             trim(cur.nom_ape_materno), -- Apellido materno
                             trim(cur.nom_ape_casada), -- Apellido materno
                             trim(cur.nom_nombres),     -- Nombres
                             trim(cur.nom_segundo_nombre),     -- Nombres
                             cur.fec_nac,         -- Fecha de nacimiento
                             cur.est_civil,       -- Tipo del estado civil
                             NULL,                -- Codigo SBS del conyuge
                             cur.tip_doc_iden,    -- Tipo de documento de identidad
                             cur.num_doc_iden,    -- Numero de documento de identidad
                             cur.sexo,            -- Sexo
                             NULL,                -- Fecha de inicio con el conyuge
                             NULL,                -- Codigo de la profesion de la persona
                             NULL,                -- Descripcion del centro de trabajo
                             'SN',                -- Tipo de persona natural
                             'N',                 -- Indicador de separacion de bienes
                             NULL,                -- Tipo de trabajador
                             NULL,                -- Otros ingresos
                             NULL,                -- Ingresos familiares
                             NULL,                -- Codigo de cargo
                             NULL,                -- Remuneracion total
                             NULL,                -- Fecha de ingresos familiares
                             SYSDATE,             -- Fecha de registro
                             USER,                -- Codigo de Usuario que registra
                             NULL,                -- Fecha de Modificacion
                             NULL);                -- Codigo de Usuario que modifica
             END IF;

             IF cur.tip_persona = '2' THEN
                INSERT INTO CRI_PERSONA_JUR ( cod_sbs, nom_razon_social, des_siglas, cod_onrp, fec_constitucion, tip_persona_jur, ind_ent_vig,
                             ind_ent_financiera, tip_propiedad, cod_sbs_matriz, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod)
                     VALUES (n_codsbs,         -- Codigo SBS
                             trim(cur.nom_cliente), -- Nombre de la razon social de la empresa
                             cur.nom_sigla,    -- Descripcion de las siglas o nombre comercial
                             cur.cod_sunarp,   -- Codigo Oficina Nacional de Registros Publicos
                             NULL,             -- Fecha de constitucion de la persona jur.
                             NULL,             -- Tipo de persona juridica
                             NULL,             --
                             NULL,             --
                             NULL,             -- Tipo de propiedad
                             NULL,             -- Codigo SBS de la casa matriz
                             SYSDATE,          -- Fecha de registro
                             USER,             -- Codigo de Usuario que registra
                             NULL,             -- Fecha de Modificacion
                             NULL);             -- Codigo de Usuario que modifica
             END IF;

             IF cur.tip_persona = '3' THEN
                INSERT INTO CRI_PERSONA_NOID ( cod_sbs, nom_razon_social, des_siglas, cod_onrp, tip_persona_jur, ind_ent_financiera, tip_propiedad,
                             tip_docto_ident, num_docto_ident, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod)
                     VALUES (n_codsbs,            -- Codigo SBS
                             trim(cur.nom_cliente),
                             cur.nom_sigla,
                             cur.cod_sunarp,
                             NULL,
                             NULL,
                             NULL,
                             cur.tip_doc_iden,    -- Tipo de documento de identidad
                             cur.num_doc_iden,    -- Numero de documento de identidad
                             SYSDATE,             -- Fecha de registro
                             USER,                -- Codigo de Usuario que registra
                             NULL,                -- Fecha de Modificacion
                             NULL);                -- Codigo de Usuario que modifica
             END IF;

             BEGIN
               n_ya_existe := 0;

               INSERT INTO CRI_DEUDOR_XENT ( cod_sbs, cod_ent_vig, cod_unico_entidad, tip_rel_laboral, ano_prep_icc, mes_prep_icc,
                            ano_urep_icc, mes_urep_icc, ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id,
                            ind_fijo_sunarp, ind_fijo_ciiu3, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod)
                    VALUES (n_codsbs,           -- Codigo SBS
                            i_codemp,           -- Codigo de Empresa
                            cur.cod_unico_clie, -- Codigo Unico del Cliente en la Empresa
                            NULL,               -- Codigo del sector economico
                            i_anopro,           -- A?o del primer reporte del cliente
                            i_mespro,           -- Mes del primer reporte del cliente
                            NULL,               -- A?o del ultimo reporte del cliente
                            NULL,               -- Mes del ultimo reporte del cliente
                            NULL,               -- Indicador de Nombre Sustentado
                            NULL,               -- Indicador de Numero de RUC Sustentado
                            NULL,               -- Indicador de Documento de Identidad Sustentado
                            NULL,               -- Indicador de SUNARP Sustentado
                            NULL,               -- Indicador de CIIU3 Sustentado
                            SYSDATE,            -- Fecha de registro
                            USER,               -- Usuario que registra
                            NULL,               -- Fecha de modificacion
                            NULL);              -- Usuario que modifica
             EXCEPTION
                WHEN OTHERS THEN
                     n_ya_existe := 1;
             END;

             UPDATE CRA_VALID_IDENTIF_RTC
                SET cod_sbs     = n_codsbs
              WHERE ano_refer   = i_anopro
                AND mes_refer   = i_mespro
                AND cod_empresa = i_codemp
                AND num_sec_reg = cur.num_sec_reg;

             UPDATE CRA_VALID_ASIG_CODSBS
                SET cod_sbs        = n_codsbs,
                    ind_est_asig   = 'A',
                    cod_usu_apr    = USER,
                    fec_aprobacion = SYSDATE
              WHERE ano_refer      = i_anopro
                AND mes_refer      = i_mespro
                AND cod_reporte    = 'RTC'
                AND cod_empresa    = i_codemp
                AND num_sec_reg    = cur.num_sec_reg;

             BEGIN
               n_val_tot_deu := 0;
               SELECT val_tot_deu
                 INTO n_val_tot_deu
                FROM CRA_VAL_CONTROLES_RTC_X_SEC
                WHERE ano_refer   = i_anopro
                  AND mes_refer   = i_mespro
                  AND cod_empresa = i_codemp
                  AND cod_control = 41
                  AND num_sec_reg = cur.num_sec_reg
                  AND num_sec_cta = 0;

               IF SQL%Rowcount = 0 THEN
                  n_val_tot_deu := 0;
               ELSE
                  IF n_val_tot_deu IS NULL THEN
                     n_val_tot_deu := 0;
                  END IF;

                  DELETE
                    FROM CRA_VAL_CONTROLES_RTC_X_SEC
                   WHERE ano_refer   = i_anopro
                     AND mes_refer   = i_mespro
                     AND cod_empresa = i_codemp
                     AND cod_control = 41
                     AND num_sec_reg = cur.num_sec_reg
                     AND num_sec_cta = 0;
               END IF;
             EXCEPTION
                WHEN OTHERS THEN
                     n_val_tot_deu := 0;
             END;

             COMMIT;

          END IF;
       END IF;
       END IF;
   END LOOP;
   COMMIT;

   UPDATE CRA_ULT_COD_SBS
      SET ind_en_uso = 'N';
   COMMIT;

-- Actualiza la estadistica de validacion del RTC.
   SP_VAL_ESTADISTICA_RTC (i_anopro, i_mespro, i_codemp);

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 416, 'T', NULL);
   SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, 416, NULL, NULL, 'VA', NULL, NULL, NULL);

-- Ingreso de codigos SBS de Clientes Antiguos al movimiento RTC.
   SP_INGRESA_CODSBS_ANTIGUO_RTC (i_anopro, i_mespro, i_codemp);

-- Realiza validacion del control 197 RTC
   SP_VALIDA_CONTROL_197_RTC (i_anopro, i_mespro, i_codemp);

-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '06', 'T');

   SP_VAL_EXCLUSION_RTC ('RTC', i_anopro, i_mespro, i_codemp);

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        UPDATE CRA_ULT_COD_SBS
           SET ind_en_uso = 'N';
        COMMIT;
        n_observaciones := Substr('Error: ' || n_error,1,248);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, 416, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '06', 'E');
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, 416, 'E', n_observaciones);
END;

----------------------------------------------------------------------

PROCEDURE SP_INGRESA_CODSBS_ANTIGUO_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- --------------------------------------------------------------------------------------------------------------------
-- Autor    : Jaime Lopez-Torres M. - Marzo 2002
-- Especificacion    :   Ingreso de codigos SBS de Clientes Antiguos al movimiento RTC.
-- --------------------------------------------------------------------------------------------------------------------
-- Parametros INPUT:
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
-- --------------------------------------------------------------------------------------------------------------------
IS
  CURSOR cur_a IS
  SELECT A.num_sec_reg,
         A.cod_ciiu3,
         A.cod_sunarp,
         A.tip_doc_trib,
         A.num_doc_trib,
         A.tip_doc_iden,
         A.num_doc_iden,
         A.tip_persona,
         A.tip_residencia,
         A.tip_magnitud,
         A.cod_pais,
         A.nom_cliente,
         A.nom_sigla,
         B.cod_unico_clie,
         B.nom_ape_paterno,
         B.nom_ape_materno,
         B.NOM_APE_CASADA,
         B.nom_nombres,
         B.NOM_SEGUNDO_NOMBRE,
         B.cod_est_asig,
         B.cod_sbs_a_asignar
    FROM CRA_VALID_IDENTIF_RTC  "A",
         CRA_VALID_ASIG_CODSBS  "B"
   WHERE A.ano_refer         = i_anopro
     AND A.mes_refer         = i_mespro
     AND A.cod_empresa       = i_codemp
     AND B.ano_refer         = A.ano_refer
     AND B.mes_refer         = A.mes_refer
     AND B.cod_reporte       = 'RTC'
     AND B.cod_empresa       = A.cod_empresa
     AND B.num_sec_reg       = A.num_sec_reg
     AND B.cod_sbs           = 0
     AND B.cod_est_asig      = 'A'
     AND B.cod_sbs_a_asignar > 0;

   n_num_control     NUMBER(01);
   n_hay_control_58  NUMBER (01);
   n_hay_control_80  NUMBER (01);
   n_val_tot_deu     NUMBER(13,2);
   n_val_tot_deu_41  NUMBER(13,2);
   n_val_tot_deu_58  NUMBER(13,2);
   n_val_tot_deu_80  NUMBER(13,2);

BEGIN
   n_cod_ide_pro := 417;
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL);
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   FOR cur in cur_a LOOP
          n_codsbs := cur.cod_sbs_a_asignar;

          UPDATE CRA_VALID_IDENTIF_RTC
             SET cod_sbs     = n_codsbs
           WHERE ano_refer   = i_anopro
             AND mes_refer   = i_mespro
             AND cod_empresa = i_codemp
             AND num_sec_reg = cur.num_sec_reg;

          UPDATE CRA_VALID_ASIG_CODSBS
             SET cod_sbs        = n_codsbs,
                 ind_est_asig   = 'A',
                 cod_usu_apr    = USER,
                 fec_aprobacion = SYSDATE
           WHERE ano_refer      = i_anopro
             AND mes_refer      = i_mespro
             AND cod_reporte    = 'RTC'
             AND cod_empresa    = i_codemp
             AND num_sec_reg    = cur.num_sec_reg;

          n_val_tot_deu_41 := 0;

          BEGIN
            SELECT val_tot_deu
              INTO n_val_tot_deu_41
              FROM CRA_VAL_CONTROLES_RTC_X_SEC
             WHERE ano_refer   = i_anopro
               AND mes_refer   = i_mespro
               AND cod_empresa = i_codemp
               AND cod_control = 41
               AND num_sec_reg = cur.num_sec_reg
               AND num_sec_cta = 0;

             IF SQL%Rowcount = 0 THEN
                n_val_tot_deu_41 := 0;
             ELSE
                IF n_val_tot_deu_41 IS NULL THEN
                   n_val_tot_deu_41 := 0;
                END IF;
--
               DELETE
                 FROM CRA_VAL_CONTROLES_RTC_X_SEC
                WHERE ano_refer   = i_anopro
                  AND mes_refer   = i_mespro
                  AND cod_empresa = i_codemp
                  AND cod_control = 41
                  AND num_sec_reg = cur.num_sec_reg
                  AND num_sec_cta = 0;
             END IF;
--
          EXCEPTION
            WHEN OTHERS THEN
                 n_val_tot_deu_41 := 0;
          END;

--        Control 80
          n_hay_control_80 := 0;
          n_val_tot_deu_80 := 0;
--
          BEGIN
            SELECT val_tot_deu
              INTO n_val_tot_deu_80
              FROM CRA_VAL_CONTROLES_RTC_X_SEC
             WHERE ano_refer   = i_anopro
               AND mes_refer   = i_mespro
               AND cod_empresa = i_codemp
               AND cod_control = 80
               AND num_sec_reg = cur.num_sec_reg
               AND num_sec_cta = 0;
--
             IF SQL%Rowcount = 0 THEN
                n_val_tot_deu_80 := 0;
             ELSE
                n_hay_control_80 := 1;
                IF n_val_tot_deu_80 IS NULL THEN
                   n_val_tot_deu_80 := 0;
                END IF;
--
                DELETE
                  FROM CRA_VAL_CONTROLES_RTC_X_SEC
                 WHERE ano_refer   = i_anopro
                   AND mes_refer   = i_mespro
                   AND cod_empresa = i_codemp
                   AND cod_control = 80
                   AND num_sec_reg = cur.num_sec_reg
                   AND num_sec_cta = 0;
            END IF;
--
          EXCEPTION
            WHEN OTHERS THEN
                 n_hay_control_80 := 0;
                 n_val_tot_deu_80 := 0;
          END;
--
--        Control 58
          n_hay_control_58 := 0;
          n_val_tot_deu_58 := 0;
--
          BEGIN
            SELECT val_tot_deu
              INTO n_val_tot_deu_58
              FROM CRA_VAL_CONTROLES_RTC_X_SEC
             WHERE ano_refer   = i_anopro
               AND mes_refer   = i_mespro
               AND cod_empresa = i_codemp
               AND cod_control = 58
               AND num_sec_reg = cur.num_sec_reg
               AND num_sec_cta = 0;
--
             IF SQL%Rowcount = 0 THEN
                n_val_tot_deu_58 := 0;
             ELSE
                n_hay_control_58 := 1;
                IF n_val_tot_deu_58 IS NULL THEN
                   n_val_tot_deu_58 := 0;
                END IF;
--
                DELETE
                  FROM CRA_VAL_CONTROLES_RTC_X_SEC
                 WHERE ano_refer   = i_anopro
                   AND mes_refer   = i_mespro
                   AND cod_empresa = i_codemp
                   AND cod_control = 58
                   AND num_sec_reg = cur.num_sec_reg
                   AND num_sec_cta = 0;
            END IF;

          EXCEPTION
            WHEN OTHERS THEN
                 n_hay_control_58 := 0;
                 n_val_tot_deu_58 := 0;
          END;

          n_num_control := 1;
          n_val_tot_deu := 0;
          IF n_hay_control_58 = 1 THEN
             n_num_control := n_num_control + 1;
          END IF;
          IF n_hay_control_80 = 1 THEN
             n_num_control := n_num_control + 1;
          END IF;

          BEGIN
            n_ya_existe := 0;
--          Se realiza este INSERT en forma provisional en CRA_DEUDOR_XENT. Cuando se actualize en CRI_DEUDOR_XENT debe eliminarse este INSERT.
            INSERT INTO CRI_DEUDOR_XENT ( cod_sbs, cod_ent_vig, cod_unico_entidad, tip_rel_laboral, ano_prep_icc, mes_prep_icc,
                         ano_urep_icc, mes_urep_icc, ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id,
                         ind_fijo_sunarp, ind_fijo_ciiu3, fec_registro, cod_usu_reg, fec_modificacion, cod_usu_mod )
                 VALUES (n_codsbs,           -- Codigo SBS
                         i_codemp,           -- Codigo de Empresa
                         cur.cod_unico_clie, -- Codigo Unico del Cliente en la Empresa
                         NULL,               -- Codigo del sector economico
                         i_anopro,           -- A?o del primer reporte del cliente
                         i_mespro,           -- Mes del primer reporte del cliente
                         NULL,               -- A?o del ultimo reporte del cliente
                         NULL,               -- Mes del ultimo reporte del cliente
                         NULL,               -- Indicador de Nombre Sustentado
                         NULL,               -- Indicador de Numero de RUC Sustentado
                         NULL,               -- Indicador de Documento de Identidad Sustentado
                         NULL,               -- Indicador de SUNARP Sustentado
                         NULL,               -- Indicador de CIIU3 Sustentado
                         SYSDATE,            -- Fecha de registro
                         USER,               -- Usuario que registra
                         NULL,               -- Fecha de modificacion
                         NULL);              -- Usuario que modifica
          EXCEPTION
             WHEN OTHERS THEN
                  n_ya_existe := 1;
          END;
--
          COMMIT;
   END LOOP;
   COMMIT;

-- Actualiza la estadistica de validacion del RTC.
   SP_VAL_ESTADISTICA_RTC (i_anopro, i_mespro, i_codemp);
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', NULL);
-- Actualiza CRA_PAR_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        n_observaciones := Substr('Error: ' || n_error,1,248);
--      Actualiza CRA_PAR_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--      Actualiza CRA_PERIODO_INF_EMP_ETAPA
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '06', 'E');
--      Actualiza CRA_PAR_PROCESOS
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
        ROLLBACK;
END;

----------------------------------------------------------------------

PROCEDURE SP_VALIDA_CONTROL_197_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- --------------------------------------------------------------------------------------------------------------------
-- Autor    : Jaime Lopez-Torres M. - Enero 2004
-- Especificacion  : Valida control 197 RTC.
-- --------------------------------------------------------------------------------------------------------------------
-- Parametros INPUT:
--             i_anopro   A?o de Referencia.
--             i_mespro   Mes de Referencia.
--             i_codemp   Codigo de Empresa.
-- --------------------------------------------------------------------------------------------------------------------
IS
  CURSOR cur_h IS
  SELECT cod_sbs,
         SF_SEC_VALID_IDENTIF_RTC (i_anopro, i_mespro, i_codemp, cod_sbs) AS secs_inf,
         SF_CALIF_SEC_VALID_IDENTIF_RTC (i_anopro, i_mespro, i_codemp, cod_sbs) AS dif_calif,
         count(*) AS nro_secs
    FROM CRA_VALID_IDENTIF_RTC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND cod_sbs        > 0
     AND tip_formulario = '1'
     AND tip_persona   <> '3' -- JCFS 13/10/2010: Se filtra las personas de tipo Mancomunadas por estar pendiente de definición
   GROUP BY cod_sbs
  HAVING COUNT(*) > 1;

-- Definicion de Arreglos
   TYPE def_arr_error  IS VARRAY(10) OF   NUMBER(07);
   TYPE def_arr_activ  IS VARRAY(10) OF VARCHAR2(01);
   TYPE def_arr_tipcon IS VARRAY(10) OF VARCHAR2(01);

-- Definicion de variables
   arr_error           def_arr_error  := def_arr_error (0,0,0,0,0,0,0,0,0,0);
   arr_activ           def_arr_activ  := def_arr_activ ('','','','','','','','','','');
   arr_tipcon          def_arr_tipcon := def_arr_tipcon('','','','','','','','','','');

   n_control              NUMBER(03);
   n_nro_secs             NUMBER(03);
   n_ini_sec              NUMBER(03);
   n_longitud             NUMBER(03);
   n_inicio               NUMBER(03);
   n_loop                 NUMBER(03);
   n_hay_error            NUMBER(01);
   n_no_existe            NUMBER(01);
   n_num_sec_reg          NUMBER(07);

BEGIN
   n_cod_ide_pro := 471;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
-- Borra registros de validacion de un control en tabla CRA_VAL_CONTROLES_RTC_X_SEC
   SP_BORRA_VALID_CONTROL_RTC (i_anopro, i_mespro, i_codemp, 197);

-- Obtiene Datos de Control 197
   SELECT ind_activ_control,
          tip_control_val
     INTO arr_activ  (1),
          arr_tipcon (1)
     FROM CRA_CONTROL_HIS_VALIDACION
    WHERE ano_refer   = i_anopro
      AND mes_refer   = i_mespro
      AND cod_reporte = 'RTC'
      AND cod_control = 197;

   arr_error  (1) := 0;
   n_control := 1;
   IF arr_activ (n_control) = 'S' THEN
      FOR cur_secs in cur_h LOOP
          IF cur_secs.dif_calif = '*' THEN
             n_nro_secs := cur_secs.nro_secs;
             n_inicio   := 1;
             n_ini_sec  := 0;
             FOR n_loop IN 1..n_nro_secs LOOP
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 n_inicio   := 1 + n_ini_sec;
                 n_ini_sec  := INSTR(cur_secs.secs_inf, '-', n_inicio, 1);
                 n_longitud := n_ini_sec - n_inicio;
                 n_num_sec_reg := TO_NUMBER(Substr(cur_secs.secs_inf, n_inicio, n_longitud));
                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, 197, n_num_sec_reg, 0, 'VA', arr_tipcon(n_control) );

                 BEGIN
                   DELETE CRA_VALID_ASIG_CODSBS
                    WHERE ano_refer   = i_anopro
                      AND mes_refer   = i_mespro
                      AND cod_reporte = 'RTC'
                      AND cod_empresa = i_codemp
                      AND num_sec_reg = n_num_sec_reg;
                   COMMIT;
                 EXCEPTION
                   WHEN OTHERS THEN
                      n_no_existe := 1;
                 END;
             END LOOP;
          END IF;
      END LOOP;
   END IF;

-- Actualiza la estadistica de validacion del RTC.
   SP_VAL_ESTADISTICA_RTC (i_anopro, i_mespro, i_codemp);

   n_cod_etapa   := '07';
   n_cod_ide_pro := 471;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, 'T');

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        ROLLBACK;
        n_cod_ide_pro := 471;
        n_observaciones := Substr('Error: ' || n_error,1,248);
--      Actualiza CRA_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--      Actualiza CRA_PERIODO_INF_EMP_ETAPA
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '07', 'E');
--      Actualiza CRA_PAR_PROCESOS
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_DEV_CONTROL_RCD_X_EMP
         (i_cod_reporte    IN VARCHAR2,
          i_ano_pro        IN VARCHAR2,
          i_mes_pro        IN VARCHAR2,
          i_cod_empresa    IN VARCHAR2)
-- ------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Actualiza registros de RCD observados en tabla CRA_DEV_CONTROLES_X_EMPRESA.
-- ------------------------------------------------------------------------------------
IS
  CURSOR CUR_A IS
  SELECT A.cod_control,
         count(*) AS veces,
         count(distinct A.num_sec_reg) AS clientes,
         B.tip_control_val,
         A.ind_pro_val
    FROM CRA_DEV_CONTROLES_RCD_X_SEC  "A",
         CRA_CONTROL_HIS_VALIDACION   "B"
   WHERE A.ano_refer    = i_ano_pro
     AND A.mes_refer    = i_mes_pro
     AND A.cod_empresa  = i_cod_empresa
     AND A.ano_refer    = B.ano_refer
     AND A.mes_refer    = B.mes_refer
     AND B.cod_reporte  = i_cod_reporte
     AND A.cod_control  = B.cod_control
GROUP BY A.cod_control,
         B.tip_control_val,
         A.ind_pro_val
ORDER BY A.cod_control;

n_nro_clientes NUMBER(8);
n_tot_deuda    NUMBER(15,2);

BEGIN
   n_cont := 0;
   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RCD (i_ano_pro, i_mes_pro, i_cod_empresa, cur.cod_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       INSERT INTO CRA_DEV_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control,
                    num_veces, num_clientes, val_tot_deu, ind_pro_val)
            VALUES (i_ano_pro, i_mes_pro, i_cod_reporte, i_cod_empresa,
                    cur.cod_control, cur.veces, n_nro_clientes, n_tot_deuda, cur.ind_pro_val);
       -- Control de transacciones
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;
END SP_GRABA_DEV_CONTROL_RCD_X_EMP;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_DEV_CONTROL_RCA_X_EMP
         (i_cod_reporte   IN VARCHAR2,
          i_ano_pro       IN VARCHAR2,
          i_mes_pro       IN VARCHAR2,
          i_cod_empresa   IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Actualiza registros de RCD observados en tabla CRA_DEV_CONTROLES_X_EMPRESA.
-- ------------------------------------------------------------------------------------
IS
BEGIN
     PK_VALIDADOR_RCA.SP_GRABA_DEV_CONTROL_RCA_X_EMP (i_cod_reporte, i_ano_pro, i_mes_pro, i_cod_empresa, i_dia_refer, i_cod_sec_envio );
END SP_GRABA_DEV_CONTROL_RCA_X_EMP;

----------------------------------------------------------------------

PROCEDURE SP_VAL_BORRA_CONTROLES_EMPRESA
          (i_cod_reporte   IN VARCHAR2,
           i_anopro        IN VARCHAR2,
           i_mespro        IN VARCHAR2,
           i_codemp        IN VARCHAR2,
           i_dia_refer     IN VARCHAR2 default '01',
           i_cod_sec_envio IN VARCHAR2 default '01' )
-- --------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Borra registros en tabla CRA_VAL_CONTROLES_X_EMPRESA
-- --------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 423;
   n_cod_est_pro := 'P';

   IF i_cod_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
      n_cod_ide_pro := 623;

      IF i_cod_reporte = 'RCM' THEN
         n_cod_ide_pro := 823;
      END IF;

      IF i_cod_reporte = 'RCO' THEN
         n_cod_ide_pro := 873;
      END IF;

      IF i_cod_reporte = 'RCT' THEN
         n_cod_ide_pro := 923;
      END IF;
   END IF;
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

   BEGIN
    DELETE CRA_VAL_CONTROLES_X_EMPRESA
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro
       AND cod_reporte = i_cod_reporte AND cod_empresa = i_codemp
       AND dia_refer = i_dia_refer AND cod_sec_envio = i_cod_sec_envio;
   EXCEPTION
      WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;
   n_cod_est_pro := 'T';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
--       Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END SP_VAL_BORRA_CONTROLES_EMPRESA;

----------------------------------------------------------------------

PROCEDURE SP_VAL_BORRA_CONTROL_X_EMPRESA
          (i_cod_reporte   IN VARCHAR2,
           i_anopro        IN VARCHAR2,
           i_mespro        IN VARCHAR2,
           i_codemp        IN VARCHAR2,
           i_control       IN VARCHAR2,
           i_dia_refer     IN VARCHAR2 default '01',
           i_cod_sec_envio IN VARCHAR2 default '01' )
-- --------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2004
-- Objetivo: Borra registros de un control en tabla CRA_VAL_CONTROLES_X_EMPRESA
-- --------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 465;
   n_cod_est_pro := 'P';

   IF i_cod_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
      n_cod_ide_pro := 665;

      IF i_cod_reporte = 'RCM' THEN
         n_cod_ide_pro := 815;
      END IF;

      IF i_cod_reporte = 'RCO' THEN
         n_cod_ide_pro := 865;
      END IF;

      IF i_cod_reporte = 'RCT' THEN
         n_cod_ide_pro := 965;
      END IF;
   END IF;

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
   BEGIN
      DELETE CRA_VAL_CONTROLES_X_EMPRESA
      WHERE ano_refer  = i_anopro
      AND mes_refer    = i_mespro
      AND cod_reporte  = i_cod_reporte
      AND cod_empresa  = i_codemp
      AND dia_refer     = i_dia_refer
      AND cod_sec_envio = i_cod_sec_envio
      AND cod_control  = i_control;
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
   n_cod_est_pro := 'T';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
--       Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END SP_VAL_BORRA_CONTROL_X_EMPRESA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ERRORES
         (i_cod_reporte   IN VARCHAR2,
          i_anopro        IN VARCHAR2,
          i_mespro        IN VARCHAR2,
          i_codemp        IN VARCHAR2,
          i_etapa         IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Actualiza los errores de procesamiento
-- -----------------------------------------------------------------------------
IS
BEGIN
   IF i_etapa = 'VA' THEN
      IF i_cod_reporte in ('RCA', 'RCM', 'RCT', 'RCO') THEN
         SP_BORRA_VALID_ERRORES_RCA_VA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
      END IF;

      IF i_cod_reporte = 'RCD' THEN
         SP_BORRA_VALID_ERRORES_RCD_VA ( i_anopro, i_mespro, i_codemp );
      END IF;

      IF i_cod_reporte = 'RTC' THEN
         SP_BORRA_VALID_ERRORES_RTC_VA ( i_anopro, i_mespro, i_codemp );
      END IF;
   ELSE
      IF i_cod_reporte in ('RCA', 'RCM', 'RCT', 'RCO') THEN
         SP_BORRA_VALID_ERRORES_RCA (i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
      END IF;

      IF i_cod_reporte = 'RCD' THEN
         SP_BORRA_VALID_ERRORES_RCD ( i_anopro, i_mespro, i_codemp );
      END IF;

      IF i_cod_reporte = 'RTC' THEN
         SP_BORRA_VALID_ERRORES_RTC ( i_anopro, i_mespro, i_codemp );
      END IF;
   END IF;
--
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
END SP_BORRA_VALID_ERRORES;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ERRORES_RCA
         (i_cod_reporte   IN VARCHAR2,
          i_anopro        IN VARCHAR2,
          i_mespro        IN VARCHAR2,
          i_codemp        IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Borra registros de tabla CRA_VAL_CONTROLES_RCD_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
    PK_VALIDADOR_RCA.SP_BORRA_VALID_ERRORES_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_ERRORES_RCA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ERRORES_RCA_VA
         (i_cod_reporte   IN VARCHAR2,
          i_anopro     IN VARCHAR2,
          i_mespro     IN VARCHAR2,
          i_codemp     IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- Autor   : Jaime Lopez-Torres M. - 05 Diciembre 2001
-- Objetivo: Borra registros de validacion en tabla CRA_VAL_CONTROLES_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
    PK_VALIDADOR_RCA.SP_BORRA_VALID_ERRORES_RCA_VA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
END SP_BORRA_VALID_ERRORES_RCA_VA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_CONTROL_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_control      IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Borra registros de validacion de un control en tabla CRA_VAL_CONTROLES_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
    PK_VALIDADOR_RCA.SP_BORRA_VALID_CONTROL_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_control, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
END SP_BORRA_VALID_CONTROL_RCA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ERRORES_RCD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Borra registros de tabla CRA_VAL_CONTROLES_RCD_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 413;
   n_cod_est_pro := 'P';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
--
   BEGIN
    DELETE CRA_VAL_CONTROLES_RCD_X_SEC
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
     n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
--
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_ERRORES_RCD;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ERRORES_RCD_VA
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Borra registros de validacion en tabla CRA_VAL_CONTROLES_RCD_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 414;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
      DELETE CRA_VAL_CONTROLES_RCD_X_SEC
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro
         AND cod_empresa   = i_codemp
         AND cod_control IN ( SELECT cod_control
                                FROM CRA_CONTROL_HIS_VALIDACION
                               WHERE ano_refer = i_anopro AND mes_refer = i_mespro
                                 AND cod_reporte  = 'RCD' AND ind_pro_val  = 'VA' );
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_ERRORES_RCD_VA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_CONTROL_RCD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2,
          i_control IN VARCHAR2)
-- Autor   : Jaime Lopez-Torres M. - Enero 2004
-- Objetivo: Borra registros de validacion de un control en tabla CRA_VAL_CONTROLES_RCD_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 472;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
     DELETE CRA_VAL_CONTROLES_RCD_X_SEC
      WHERE ano_refer = i_anopro AND mes_refer = i_mespro
        AND cod_empresa = i_codemp AND cod_control = i_control;
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_CONTROL_RCD;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ERRORES_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Borra registros de tabla CRA_VAL_CONTROLES_RTC_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 420;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE CRA_VAL_CONTROLES_RTC_X_SEC
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,80));
END SP_BORRA_VALID_ERRORES_RTC;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_ERRORES_RTC_VA
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Abril 2002
-- Objetivo: Borra registros de validacion en tabla CRA_VAL_CONTROLES_RTC_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 419;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
      DELETE CRA_VAL_CONTROLES_RTC_X_SEC
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro
          AND cod_empresa   = i_codemp
          AND cod_control IN ( SELECT cod_control
                                 FROM CRA_CONTROL_HIS_VALIDACION
                                WHERE ano_refer = i_anopro AND mes_refer = i_mespro
                                  AND cod_reporte  = 'RTC' AND ind_pro_val  = 'VA' );
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,80));
END SP_BORRA_VALID_ERRORES_RTC_VA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_CONTROL_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2,
          i_control IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2004
-- Objetivo: Borra registros de validacion de un control en tabla CRA_VAL_CONTROLES_RTC_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 473;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
      DELETE CRA_VAL_CONTROLES_RTC_X_SEC
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro
         AND cod_empresa = i_codemp AND cod_control = i_control;
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_CONTROL_RTC;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_SALDOS_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_VALID_SALDOS.
-- -----------------------------------------------------------------------------
IS
BEGIN
    PK_VALIDADOR_RCA.SP_BORRA_VALID_SALDOS_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
END SP_BORRA_VALID_SALDOS_RCA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_IDENTIF_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_VALID_IDENTIF.
-- -----------------------------------------------------------------------------
IS
BEGIN
    PK_VALIDADOR_RCA.SP_BORRA_VALID_IDENTIF_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
END SP_BORRA_VALID_IDENTIF_RCA;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_SALDOS_RCD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_VALID_SALDOS_RCD.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 424;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE CRA_VALID_SALDOS_RCD
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
       n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_SALDOS_RCD;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_IDENTIF_RCD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_VALID_IDENTIF_RCD.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 425;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE CRA_VALID_IDENTIF_RCD
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
     n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_IDENTIF_RCD;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_SALDOS_RDD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codreporte IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Juan Gonzalez Jimenez - Julio 2002
-- Objetivo: Borra registros de tabla CRA_VALID_SALDOS_REP_ADIC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 724;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE FROM CRA_VALID_SALDOS_REP_ADIC
     WHERE ano_refer = i_anopro AND
           mes_refer = i_mespro AND
           cod_reporte = i_codreporte AND
           cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
       n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_SALDOS_RDD;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_IDENTIF_RDD
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codreporte IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_VALID_IDENTIF_RCD.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 725;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE CRA_VALID_IDENTIF_REP_ADIC
     WHERE ano_refer = i_anopro AND
           mes_refer = i_mespro AND
           cod_reporte = i_codreporte AND
           cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
     n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_IDENTIF_RDD;
----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DETALLE_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_VALID_DETALLE_RTC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 426;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE CRA_VALID_DETALLE_RTC
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_DETALLE_RTC;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_IDENTIF_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_VALID_IDENTIF_RTC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 427;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE CRA_VALID_IDENTIF_RTC
    WHERE ano_refer    = i_anopro
      AND mes_refer    = i_mespro
      AND cod_empresa  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
      n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_IDENTIF_RTC;

-----------------------------------------------------------------------------------------------------------------

PROCEDURE SP_VAL_PROCESA_RCA
         (i_cod_form     IN  VARCHAR2,
          i_cod_anexo    IN  VARCHAR2,
          i_anopro       IN  VARCHAR2,
          i_mespro       IN  VARCHAR2,
          i_codemp       IN  VARCHAR2,
          i_fileloc      IN  VARCHAR2,
          i_cod_reporte  IN  VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros:
--          i_cod_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Envia a procesar el RCA, RCM y RCO cada vez que se procesa el RCD
-- -----------------------------------------------------------------------------
BEGIN
   PK_VALIDADOR_RCA.SP_VAL_PROCESA_RCA ( i_cod_form, i_cod_anexo, i_anopro, i_mespro, i_codemp, i_fileloc, i_cod_reporte, i_dia_refer, i_cod_sec_envio );

END SP_VAL_PROCESA_RCA;

-----------------------------------------------------------------------------------------------------------------

PROCEDURE SP_VAL_PRE_VALIDACION
         (i_cod_form     IN  VARCHAR2,
          i_cod_anexo    IN  VARCHAR2,
          i_anopro       IN  VARCHAR2,
          i_mespro       IN  VARCHAR2,
          i_codemp       IN  VARCHAR2,
          i_fileloc      IN  VARCHAR2,
          i_cod_reporte  IN  VARCHAR2 DEFAULT '',
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- --------------------------------------------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Febrero 2002
-- Motivo: Realiza la Pre-validacion de los datos del movimiento RCD y RTC.
-- --------------------------------------------------------------------------------------------------------------
-- Revisiones:
--     Fecha        Autor                                           Descripcion
-- -------------  --------------------------  -------------------------------------------------------------------
-- 28/01/2004     Jaime Lopez-Torres M.       Se reemplazan valores 'E' por 'F' y 'T' por 'W' al actualizar el
--                                            codigo de estado de la etapa en la tabla CRA_PERIODO_INF_EMP_ETAPA,
--                                            por medio del procedure SP_ACT_EST_PERIODO_EMP_ETAPA.
-- -------------  --------------------------  -------------------------------------------------------------------
-- 05/05/2010     Juan Carlos Fernández S.    Se actualiza el SP con los cambios por la Resolución 11356.
-- --------------------------------------------------------------------------------------------------------------
-- 30/09/2015     Juan Carlos Fernández S.    Se actualiza el SP con los nuevos parametros i_dia_refer y i_cod_sec_envio
-- --------------------------------------------------------------------------------------------------------------
IS
  CURSOR cur_a (n_reporte VARCHAR2) IS
  SELECT cod_control,
         ind_activ_control,
         tip_control_val,
         cod_niv_val
    FROM CRA_CONTROL_HIS_VALIDACION
   WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = n_reporte;

-----------------------------------------------------------
-- CURSOR DE LA PRE-VALIDACION PARA EL CONTROL 21 - FVSH 20050614
-- Se actualizo el cursor para poder observar todos los deudores que presentan esta incidencia, adicionalmente
-- se hace uso de sentencias de agrupacion en lugar de comparar registros uno a uno
----------------------------------
  CURSOR cur_b_rtc (n_reporte VARCHAR2) IS
  SELECT num_sec_reg,
         cod_unico_clie,
         nom_cliente
    FROM CRA_VALID_IDENTIF_AUX
   WHERE ano_refer = i_anopro AND mes_refer = i_mespro
     AND cod_reporte = n_reporte AND cod_empresa = i_codemp
     AND dia_refer = i_dia_refer AND cod_sec_envio = i_cod_sec_envio
   ORDER BY cod_unico_clie DESC;

  CURSOR cur_b (n_reporte VARCHAR2) IS
  SELECT a.num_sec_reg,
         a.cod_unico_clie,
         a.nom_cliente
    FROM CRA_VALID_IDENTIF_AUX a
   WHERE a.ano_refer = i_anopro AND a.mes_refer = i_mespro
     AND a.cod_reporte = n_reporte AND a.cod_empresa = i_codemp
     AND dia_refer = i_dia_refer AND cod_sec_envio = i_cod_sec_envio
     AND a.cod_unico_clie in
               ( select x.cod_unico_clie
                   from CRA_VALID_IDENTIF_AUX x
                  where x.ano_refer = i_anopro and x.mes_refer = i_mespro
                    and x.cod_reporte = n_reporte and x.cod_empresa = i_codemp
                    and x.dia_refer = i_dia_refer and x.cod_sec_envio = i_cod_sec_envio
                 group by x.cod_unico_clie
                 having count(1) > 1
               )
ORDER BY a.cod_unico_clie DESC;
--------------------------------------------------------------
-- FVSH - Cambio 808: Los Arreglos y Variables se ampliaron de 200 a 250

-- Definicion de Arreglos
   TYPE def_arr_error  IS VARRAY(504) OF NUMBER(6);
   TYPE def_arr_activ  IS VARRAY(504) OF VARCHAR2(1);
   TYPE def_arr_tipcon IS VARRAY(504) OF VARCHAR2(1);
   TYPE def_arr_nivval IS VARRAY(504) OF VARCHAR2(1);

-- Definicion de variables
   arr_error              def_arr_error  := def_arr_error (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
   arr_activ              def_arr_activ  := def_arr_activ ('','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','');
   arr_tipcon             def_arr_tipcon := def_arr_tipcon
   arr_nivval             def_arr_nivval := def_arr_nivval
   n_count                NUMBER   (06);
   ls_filename            VARCHAR2 (032);
   ls_registro            VARCHAR2 (1024);
   n_cont                 NUMBER   (10);
   file_id                UTL_FILE.FILE_TYPE;
   lb_is_open             BOOLEAN;
   n_fecini_pro           DATE   ;
   n_hay_res_controles    NUMBER   (01);
   n_observaciones        VARCHAR2 (255);
   ls_error               VARCHAR2 (2000);
   n_control              NUMBER   (03);
   n_cod_ide_pro          NUMBER   (03);
   n_cod_etapa_val        VARCHAR2 (02)  ;
   ln_can_reg_cab         NUMBER   := 0;
   ln_can_reg_id          NUMBER   := 0;
   ln_can_reg_sal         NUMBER   := 0;
   ln_can_bad_cab         NUMBER   := 0;
   ln_can_bad_id          NUMBER   := 0;
   ln_can_bad_sal         NUMBER   := 0;
-- Registro de Cabecera
   ls_cod_form            VARCHAR2 (04);
   ls_cod_anexo           VARCHAR2 (02);
   ls_fec_refer           NUMBER   (08);
   ls_ano_refer           VARCHAR2 (04);
   ls_mes_refer           VARCHAR2 (02);
   ls_cod_ent_vig         VARCHAR2 (05);
   ls_cod_expresion       NUMBER   (3);
   ls_dato_control        VARCHAR2 (15);
   ls_monto_minimo        NUMBER   (15,2);
-- Datos comunes
   ls_tip_doc             VARCHAR2 (01);
   ls_tip_inf             VARCHAR2 (01);
   ln_num_sec             NUMBER   (08);
   ln_num_sec_ant         NUMBER   (08);
   n_hay_error            NUMBER   (01);
   n_es_cancelatorio      NUMBER   (01);
   n_error_for            NUMBER   (01);
   n_nro_sec              NUMBER   (08);
   n_nro_cta              NUMBER   (04);
   n_pto_control          NUMBER   (01);
   n_for_ant              NUMBER   (01);
   n_inf_ant              NUMBER   (01);
   n_loop                 NUMBER   (03);
   n_reporte              VARCHAR2 (03);
   n_mensaje              VARCHAR2 (255);
   n_codemp               VARCHAR2 (05);
   n_long_nom_cliente     NUMBER   (03);
   n_long_registro        NUMBER   (05);
-- Registro de identificacion
   ls_cod_unico           VARCHAR2 (20);
   ls_cod_unico_ant       VARCHAR2 (20);
   n_temp_cod_unico_ant   VARCHAR2 (20);
   n_temp_nom_cliente_ant VARCHAR2 (180);
   ls_tip_doc_trib        VARCHAR2 (01);
   ln_cod_doc_trib        NUMBER   (11);
   ln_cod_doc_trib_ant    NUMBER   (11);
   ls_cod_doc_id          VARCHAR2 (12);
   ls_cod_doc_id_ant      VARCHAR2 (12);
   ls_tip_persona         VARCHAR2 (01);
   ls_tip_persona_ant     VARCHAR2 (01);
   ls_tip_residencia      VARCHAR2 (01);
   ls_tip_clasif_deu      VARCHAR2 (01);
   ls_tip_magnitud        VARCHAR2 (01);
   ls_ind_accionista      VARCHAR2 (01);
   ls_fec_nac             VARCHAR2 (08);
   ld_fec_nac             DATE;
   ls_sexo                VARCHAR2 (01);
   ls_est_civil           VARCHAR2 (01);
   ls_dsdeu               VARCHAR2 (280);
   ls_ape_pat             VARCHAR2 (120);
   ls_ape_mat             VARCHAR2 (40);
   ls_ape_cas             VARCHAR2 (40);
   ls_pri_nom             VARCHAR2 (40);
   ls_seg_nom             VARCHAR2 (40);
   ls_dsdeu_ant           VARCHAR2 (280);
   ls_dsdeu_aux           VARCHAR2 (280);
   n_tipo_tributario      VARCHAR2 (06);
-- Otros datos de identificacion
   n_es_nombre_mancomuno  NUMBER   (01);
   ls_direccion           VARCHAR2 (80);
-- Registro de saldos
   ls_cod_ofi             VARCHAR2 (04);
   ls_ofi_ubigeo          VARCHAR2 (06);
   ls_saldo               VARCHAR2 (18);   -- JCFS 05/05/2010: Se aumenta la Longitud de 15 a 18
-- Registro de ATC, CCC O Rectificaciones
   ls_tip_reporte         VARCHAR2 (02);
   ls_tip_motivo_anul     VARCHAR2 (01);
   ls_fec_apertura        VARCHAR2 (08);
   ld_fec_apertura        DATE;
   ls_fec_anul_cierre     VARCHAR2 (08);
   ld_fec_anul_cierre     DATE;
   ls_fec_public_peru     VARCHAR2 (08);
   ld_fec_public_peru     DATE;
   ls_fec_rec_rectif      VARCHAR2 (08);
   ld_fec_rec_rectif      DATE;
   ls_fec_fin_rectif      VARCHAR2 (08);
   ld_fec_fin_rectif      DATE;
   ln_num_sec_reg         NUMBER   (08);  -- JCFS 02/09/2010: Nueva Variable para almacenar la Secuencia de Error
   ls_fec_venta_cartera   VARCHAR2 (08);  -- JCFS 12/07/2011: Nueva Variable para almacenar la Fecha de Venta de Cartera (RCT)
   ls_doc_trib_adq        VARCHAR2 (11);  -- JCFS 12/07/2011: Nueva Variable para almacenar el RUC del Adquiriente (RCT)
   ls_razon_social_adq    VARCHAR2 (120); -- JCFS 12/07/2011: Nueva Variable para almacenar la Razón Social del Adquiriente (RCT)
   n_hay_error_cab_rct    NUMBER   (01);
   ls_tipentidad          VARCHAR2 (02);
   ls_dia_refer           VARCHAR2 (02);
   ls_est_proc            VARCHAR2 (02);
   ln_num_proc            NUMBER;
   ls_ingreso_ext         VARCHAR2 (02);
   ln_resultado           NUMBER;
   ls_tip_doc_iden_adq    VARCHAR2 (1);  -- JAGJ 16/01/2014: Nueva Variable para almacenar el Tipo de documento del Adquiriente (RCT)
   ls_cod_doc_id_adq      VARCHAR2 (12); -- JAGJ 16/01/2014: Nueva Variable para almacenar el Código de documento del Adquiriente (RCT)
   ln_num_secuencia       NUMBER;        -- JAGJ 16/01/2014: Nueva Variable para almacenar el número de Secuencia (RCT)
   ln_paso                NUMBER;
   lb_existe_rcd          BOOLEAN;

BEGIN
   -- JCFS 2018-02: Inicio de "exoneración" del registro de auditoría
   PKG_APPLICATION_INFO.Inicio;

   n_hay_error       := 0;
   n_es_cancelatorio := 0;
   n_fecini_pro      := SYSDATE;
   n_count           := 0;
   n_cod_etapa_val   := '02';

   IF i_cod_form = '0106'  THEN
      n_reporte     := 'RCD';
      n_cod_ide_pro := 4;
   END IF;
   IF i_cod_form = '0208'  THEN
      n_reporte     := 'RTC';
      n_cod_ide_pro := 8;
   END IF;

   IF i_cod_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
      IF i_cod_reporte = 'RCA' THEN
          n_reporte     := 'RCA';
          n_cod_ide_pro := 600;
      ELSE
          IF i_cod_reporte = 'RCM' THEN
              n_reporte     := 'RCM';
              n_cod_ide_pro := 800;
          ELSE
             IF i_cod_reporte = 'RCO' THEN
                n_reporte     := 'RCO';
                n_cod_ide_pro := 850;
             ELSE
                n_reporte     := 'RCT';
                n_cod_ide_pro := 900;
             END IF;
          END IF;
      END IF;
   END IF;

   IF i_cod_reporte = 'RDD' THEN
      n_reporte     := 'RDD';
      n_cod_ide_pro := 700;
   END IF;

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD, DIA_REFER, COD_SEC_ENVIO)
   VALUES (i_anopro, i_mespro, i_cod_reporte, '21', ln_paso, SYSDATE, 'PROCESO DE PRE-VALIDACIÓN - INICIO', i_codemp, i_dia_refer, i_cod_sec_envio);
   COMMIT;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL, i_dia_refer, i_cod_sec_envio);   -- Actualiza CRA_PAR_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);   -- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'P', i_dia_refer, i_cod_sec_envio);           -- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_BORRA_VALID_ERRORES (i_cod_reporte, i_anopro, i_mespro, i_codemp, 'PV', i_dia_refer, i_cod_sec_envio); -- Borra registros de la tabla CRA_VAL_CONTROLES_RCD/RTC/RCA_X_SEC
   SP_BORRA_VALID_IDENTIF_AUX  (i_anopro, i_mespro, i_codemp, n_reporte, i_dia_refer, i_cod_sec_envio);      -- Borra registros de tabla CRA_VALID_IDENTIF_AUX.
   SP_VAL_BORRA_CONTROLES_EMPRESA (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);   -- Borra registros de la tabla CRA_VAL_CONTROLES_X_EMPRESA

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD, DIA_REFER, COD_SEC_ENVIO)
   VALUES (i_anopro, i_mespro, i_cod_reporte, '21', ln_paso, SYSDATE, 'PROCESO DE PRE-VALIDACIÓN - FIN DE TAREAS PRELIMINARES', i_codemp, i_dia_refer, i_cod_sec_envio);
   COMMIT;

-- Verificacion del numero de controles de validacion
   BEGIN
     SELECT COUNT(*)
       INTO n_tot_controles
       FROM CRA_CONTROL_HIS_VALIDACION
      WHERE ano_refer   = i_anopro
        AND mes_refer   = i_mespro
        AND cod_reporte = n_reporte;
   EXCEPTION
      WHEN OTHERS THEN
           n_tot_controles := 0;
           n_code  := SQLCODE;
           n_error := SQLERRM;
           n_observaciones := substr(n_error,1,255);
           n_cod_est_pro := 'E';
           IF n_reporte IN ('RCD', 'RDD') THEN
              SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones, i_dia_refer, i_cod_sec_envio);
              SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
              SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
           END IF;
           IF n_reporte = 'RTC' THEN
              SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
           END IF;
           IF n_reporte IN ('RCA', 'RCM', 'RCO') THEN
              SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
           END IF;
           SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                         ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                         ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
           RETURN;
   END;

   IF n_tot_controles > 252 THEN
      n_es_cancelatorio := 1;
      n_observaciones := 'ERROR: Numero de controles de validacion excede implementacion. Dar aviso a la Gerencia de Informatica';
      IF n_reporte = 'RCD' THEN
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
      END IF;
      IF n_reporte = 'RTC' THEN
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
      END IF;

      IF n_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
      END IF;

      SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                    ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                    ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
      RETURN;
   END IF;

-- Obtiene Datos de Controles
   FOR cur in cur_a (n_reporte) LOOP
      arr_activ  (cur.cod_control) := cur.ind_activ_control;
      arr_tipcon (cur.cod_control) := cur.tip_control_val;
      arr_nivval (cur.cod_control) := cur.cod_niv_val;
      arr_error  (cur.cod_control) := n_count;
   END LOOP;

-- Nombre del archivo de entrada
   IF n_reporte = 'RCT' THEN
      ls_filename := PK_VALIDADOR_RCA.SF_NOMBRE_FILE_MATRICULA_RCA(n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
   ELSIF n_reporte = 'RCO' THEN
      ls_filename := 'rccod'||i_anopro||i_mespro||'.'||substr(i_codemp,3,3);
   ELSE
      ls_filename := lower(n_reporte)||i_anopro||i_mespro||'.'||substr(i_codemp,3,3);
   END IF;

-- Abre el archivo
   file_id := UTL_FILE.FOPEN (i_fileloc, ls_filename, 'r');

   ls_cod_ent_vig   := i_codemp;
   ls_ano_refer     := i_anopro;
   ls_mes_refer     := i_mespro;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD, DIA_REFER, COD_SEC_ENVIO)
   VALUES (i_anopro, i_mespro, i_cod_reporte, '21', ln_paso, SYSDATE, 'PROCESO DE PRE-VALIDACIÓN - PREVIO A LA LECTURA DE LA CABECERA', i_codemp, i_dia_refer, i_cod_sec_envio);
   COMMIT;

/*********************************************/
/***** Lee y Valida Registro de Cabecera *****/
/*********************************************/

   IF n_reporte = 'RCD' or n_reporte = 'RTC' OR n_reporte = 'RCT' THEN
      UTL_FILE.GET_LINE(file_id, ls_registro);
      n_long_registro := LENGTH(ls_registro);

      IF n_long_registro > 796 THEN
         IF n_reporte = 'RCD' THEN
            n_observaciones := 'ERROR: Longitud de Cabecera de Archivo RCD mayor que Diseño de Registro.';
         END IF;
         IF n_reporte = 'RTC' THEN
            n_observaciones := 'ERROR: Longitud de Cabecera de Archivo RTC mayor que Diseño de Registro.';
         END IF;
         IF n_reporte = 'RCT' THEN
            n_observaciones := 'ERROR: Longitud de Cabecera de Archivo RCT mayor que Diseño de Registro.';
         END IF;

         ln_can_bad_cab := ln_can_bad_cab + 1;
         --  Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
         --  Actualiza CRA_PERIODO_INF_EMP_ETAPA
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
         --  Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
         UTL_FILE.FCLOSE(file_id);
         SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                       ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                       ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
         RETURN;
      END IF;

      -- Obtiene Datos de Cabecera
      ln_can_reg_cab   := ln_can_reg_cab + 1;
      ls_cod_form      := Lpad(Ltrim(Rtrim(Substr(ls_registro, 1,4))) ,4,'0') ;
      ls_cod_anexo     := Lpad(Ltrim(Rtrim(Substr(ls_registro, 5,2))) ,2,'0') ;
      ls_cod_ent_vig   := Lpad(Ltrim(Rtrim(Substr(ls_registro, 7,5))) ,5,'0') ;
      ls_fec_refer     := Test_Number(Substr(ls_registro,12,8));
      ls_ano_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,12,4))) ,4,'0') ;
      ls_mes_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,16,2))) ,2,'0') ;
      ln_num_secuencia := null;

      IF n_reporte = 'RCT' THEN
         IF ls_ano_refer > '2013' THEN
            ln_num_secuencia := Test_Number(Substr(ls_registro,20,2));
            ls_cod_expresion := Test_Number(Substr(ls_registro,22,3));
            ls_dato_control  := Lpad(Ltrim(Rtrim(Substr(ls_registro,25,15))) ,15,'0') ;
            ls_monto_minimo  := Test_Number(Substr(ls_registro,38,15));
         ELSE
            ls_cod_expresion := Test_Number(Substr(ls_registro,20,3));
            ls_dato_control  := Lpad(Ltrim(Rtrim(Substr(ls_registro,23,15))) ,15,'0') ;
            ls_monto_minimo  := Test_Number(Substr(ls_registro,38,15));
         END IF;
      ELSE
         ls_cod_expresion := Test_Number(Substr(ls_registro,20,3));
           ls_dato_control  := Lpad(Ltrim(Rtrim(Substr(ls_registro,23,15))) ,15,'0') ;
           ls_monto_minimo  := Test_Number(Substr(ls_registro,38,15));
      END IF;

      -- Valida datos de Cabecera
      -- 08 MAR 2003 Se inhabilita control 192
      ---- Codigo de Formato informado no corresponde al lote
      --   n_control := 192;
      --   IF arr_activ(n_control) = 'S' THEN
      ---      IF ls_cod_form != i_cod_form THEN
      --         IF arr_tipcon(n_control) = 'V' THEN
      --            n_hay_error := 1;
      --         END IF;
      --         arr_error (n_control) := arr_error (n_control) + 1;
      --         IF n_reporte = 'RCD' THEN
      --            SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control) );
      --         END IF;
      --         IF n_reporte = 'RTC' THEN
      --            SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control) );
      --         END IF;
      --      END IF;
      --   END IF;

      -- Archivo no corresponde al Anexo 6 (Formato 0106)
      n_control := 199;
      IF arr_activ (n_control) = 'S' THEN
         IF n_reporte = 'RCD' THEN
            IF ls_cod_form <> '0106' THEN
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio );
            END IF;
         END IF;
      END IF;

      -- Archivo no corresponde al Anexo 8 (Formato 0208)
      n_control := 200;
      IF arr_activ (n_control) = 'S' THEN
         IF n_reporte = 'RTC' THEN
            IF ls_cod_form <> '0208' THEN
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio );
            END IF;
         END IF;
      END IF;

      -- Codigo de Anexo informado no corresponde al lote
      n_control := 193;
      IF arr_activ (n_control) = 'S' THEN
         IF ls_cod_anexo != i_cod_anexo THEN
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
            END IF;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio );
         END IF;
      END IF;
   END IF;

   IF n_reporte = 'RDD' THEN
      UTL_FILE.GET_LINE(file_id, ls_registro);
      n_long_registro := LENGTH(trim(ls_registro));

      IF n_long_registro > 256 THEN
         IF n_reporte = 'RDD' THEN
            n_observaciones := 'ERROR: Longitud de Cabecera de Archivo RDD mayor que Diseño de Registro.';
         END IF;

         ln_can_bad_cab := ln_can_bad_cab + 1;
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
         UTL_FILE.FCLOSE(file_id);
         SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                       ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                       ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
         RETURN;
      END IF;

      -- Obtiene Datos de Cabecera
      ln_can_reg_cab   := ln_can_reg_cab + 1;
      ls_fec_refer     := Test_Number(Substr(ls_registro,9,8));
      ls_ano_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,9,4))) ,4,'0') ;
      ls_mes_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,13,2))) ,2,'0') ;
      ls_monto_minimo  := Test_Number(Substr(ls_registro,17,15));
      ls_cod_ent_vig   := Lpad(Ltrim(Rtrim(Substr(ls_registro,32,5))) ,5,'0') ;
   END IF;

   -- Codigo de Empresa informado no corresponde al lote
   n_control := 27;
   IF arr_activ (n_control) = 'S' THEN
      IF ls_cod_ent_vig <> i_codemp THEN
         IF arr_tipcon(n_control) = 'V' THEN
            n_hay_error := 1;
         END IF;
         arr_error (n_control) := arr_error (n_control) + 1;
         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio );
      ELSE
--       Cod. de empresa que identifica al lote no registrado en la tabla
         n_control := 26;
         IF arr_activ (n_control) = 'S' THEN
            BEGIN
              SELECT cod_ent_vig
                INTO n_codemp
                FROM AYS_ENT_VIGILADA
               WHERE cod_ent_vig = i_codemp;
               IF SQL%ROWCOUNT = 0 THEN
                  IF arr_tipcon(n_control) = 'V' THEN
                     n_hay_error := 1;
                  END IF;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio );
              END IF;
            EXCEPTION
               WHEN OTHERS THEN
                    IF arr_tipcon(n_control) = 'V' THEN
                       n_hay_error := 1;
                    END IF;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio );
            END;
         END IF;
      END IF;
   END IF;

   IF n_reporte = 'RCD' or n_reporte = 'RTC' OR n_reporte = 'RCT' THEN
      -- Fecha, monto minimo y/o CEM no son numericos
      n_control := 35;
      IF arr_activ (n_control) = 'S' THEN
         IF ls_fec_refer IS NULL OR ls_cod_expresion IS NULL THEN
         --      OR ls_monto_minimo  IS NULL
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
            END IF;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         END IF;
      END IF;
   END IF;

-- Fecha informada no corresponde al lote
   n_control := 28;
   IF arr_activ (n_control) = 'S' THEN
      IF ls_ano_refer != i_anopro OR ls_mes_refer != i_mespro THEN
         IF arr_tipcon(n_control) = 'V' THEN
            n_hay_error := 1;
         END IF;
         arr_error (n_control) := arr_error (n_control) + 1;
         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
      END IF;
   END IF;

   IF n_reporte = 'RCD' or n_reporte = 'RTC' THEN
      -- Codigo de Expresion de Montos informado no corresponde al lote
      n_control := 194;
      IF arr_activ (n_control) = 'S' THEN
         IF n_reporte = 'RCD' THEN
            IF ls_cod_expresion <> '012' THEN
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
            END IF;
         END IF;
         IF n_reporte = 'RTC' THEN
            IF ls_cod_expresion <> '000' THEN
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
            END IF;
         END IF;
      END IF;
   END IF;

   -- JCFS 11/07/2011: Se validan los datos de Cabecera que solo corresponden al RCT
   --                  Los errores se graban como VA y no como PV para que puedan ser consultados en la consulta de los Controles de Validación en el SISCOR
   n_hay_error_cab_rct  := 0;
   IF n_reporte = 'RCT' THEN
      IF ls_ano_refer > '2013' THEN
         ls_fec_venta_cartera := Substr(ls_registro,55,8);
         ls_tip_doc_iden_adq  := trim(Substr(ls_registro,63,1));
         ls_cod_doc_id_adq    := trim(Substr(ls_registro,64,12));
         ls_doc_trib_adq      := trim(Substr(ls_registro,76,11));
         ls_razon_social_adq  := trim(Substr(ls_registro,87,120));
      ELSE
          ls_fec_venta_cartera := Substr(ls_registro,53,8);
          ls_tip_doc_iden_adq  := null;
          ls_cod_doc_id_adq    := null;
          ls_doc_trib_adq      := trim(Substr(ls_registro,61,11));
          ls_razon_social_adq  := trim(Substr(ls_registro,72,120));
      END IF;

      -- Fecha de venta de la cartera no informada
      n_control := 93;
      IF arr_activ (n_control) = 'S' THEN
         IF ls_fec_venta_cartera IS NULL OR nvl(trim(ls_fec_venta_cartera), ' ') = ' ' THEN
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
            END IF;
            n_hay_error_cab_rct := 1;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         END IF;
      END IF;

      -- Fecha de venta de la cartera no es válida
      n_control := 94;
      IF arr_activ (n_control) = 'S' THEN
         IF ls_fec_venta_cartera IS NOT NULL AND nvl(trim(ls_fec_venta_cartera), ' ') <> ' ' THEN
            IF SF_VALIDA_FECHA(ls_fec_venta_cartera) IS NULL THEN
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
               END IF;
               n_hay_error_cab_rct := 1;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
            END IF;
         END IF;
      END IF;

      -- Documento tributario del adquiriente no informado
      n_control := 95;
      IF arr_activ (n_control) = 'S' THEN
         IF ls_doc_trib_adq IS NULL OR nvl(trim(ls_doc_trib_adq), ' ') IN (' ', '0', '00000000000') THEN
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
            END IF;
            n_hay_error_cab_rct := 1;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         ELSE
            -- Documento tributario del adquiriente no es válido o no cumple módulo 11
            n_control := 96;
            IF arr_activ (n_control) = 'S' THEN
               IF LENGTH(ls_doc_trib_adq) <> 11 OR NOT SF_VERIFICA_MOD11 (ls_doc_trib_adq, 'RUC') THEN
                  IF arr_tipcon(n_control) = 'V' THEN
                     n_hay_error := 1;
                  END IF;
                  n_hay_error_cab_rct := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
               END IF;
            END IF;
         END IF;
      END IF;

      -- Razón social del adquiriente no ha sido informada
      n_control := 97;
      IF arr_activ (n_control) = 'S' THEN
         n_rc := 0;
         -- Se reutiliza la validación del control 59, que tiene la misma lógica que se debne aplicar para este control
         n_rc := sf_valida_control_59 ( ls_razon_social_adq, n_reporte );
         IF n_rc <> 1 THEN
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
            END IF;
            n_hay_error_cab_rct := 1;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         ELSE
            -- Razón social del adquiriente con caracteres no válidos o más de un blanco entre palabras
            n_control := 98;
            IF arr_activ (n_control) = 'S'  THEN
               n_rc := 0;
               -- Se reutiliza la validación del control 60, que tiene la misma lógica que se debe aplicar para este control
               n_rc := sf_valida_control_60 ( 0, '2', ls_razon_social_adq, n_reporte );
               IF n_rc <> 1 THEN
                  IF arr_tipcon(n_control) = 'V' THEN
                     n_hay_error := 1;
                  END IF;
                  n_hay_error_cab_rct := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
               END IF;
            END IF;
         END IF;
      END IF;

      -- Tipo de Documento de Identidad del adquiriente no informado
      n_control := 250;
      IF arr_activ (n_control) = 'S' THEN
         IF ls_tip_doc_iden_adq IS NULL OR nvl(trim(ls_tip_doc_iden_adq), ' ') IN (' ', '0') THEN
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
            END IF;
            n_hay_error_cab_rct := 1;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         ELSE
            -- Tipo de Documento de Identidad del adquiriente no es válido o no es 1 o 2
            n_control := 251;
            IF arr_activ (n_control) = 'S' THEN
               IF LENGTH(ls_tip_doc_iden_adq) <> 1 OR ls_tip_doc_iden_adq not in ('1', '2') THEN
                  IF arr_tipcon(n_control) = 'V' THEN
                     n_hay_error := 1;
                  END IF;
                  n_hay_error_cab_rct := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
               END IF;
            END IF;
         END IF;
      END IF;

      -- Número de Documento de Identidad del adquiriente no informado
      n_control := 252;
      IF arr_activ (n_control) = 'S' THEN
         IF ls_cod_doc_id_adq IS NULL OR nvl(trim(ls_cod_doc_id_adq), ' ') IN (' ', '0') THEN
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
            END IF;
            n_hay_error_cab_rct := 1;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, 0, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         END IF;
      END IF;

   END IF;

   IF n_hay_error = 1 THEN
      n_es_cancelatorio := 1;
   END IF;


/*********************************************/
/***** Lee y Valida Registros de Datos *******/
/*********************************************/

-- Inicializa Variables
   n_cont              := 0;
   n_nro_sec           := 0;
   n_nro_cta           := 0;
   n_for_ant           := 0;
   n_inf_ant           := 2;
   ln_num_sec_ant      := 0;
   n_hay_res_controles := 0;
   ls_dsdeu_ant        := NULL;
   ls_cod_doc_id_ant   := NULL;
   ln_cod_doc_trib_ant := NULL;

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD, DIA_REFER, COD_SEC_ENVIO)
   VALUES (i_anopro, i_mespro, i_cod_reporte, '22', ln_paso, SYSDATE, 'PROCESO DE PRE-VALIDACIÓN - INICIO DE LECTURA DE REGISTROS DE DATOS', i_codemp, i_dia_refer, i_cod_sec_envio);
   COMMIT;

-- ********** Lee los registros hasta EOF (No_Data_Found) ****************
   LOOP
     BEGIN
       <<Lectura>>
       UTL_FILE.GET_LINE(file_id, ls_registro);

--     No considera registros sin informacion
       IF (Substr(ls_registro, 1,1) in ('chr(13)','chr(10)',' ')) OR
          (Substr(ls_registro, 1,1)) IS NULL THEN
           GOTO Lectura;
       END IF;

       IF n_reporte = 'RDD' THEN
          ln_num_sec := Test_Number(Lpad(Ltrim(Rtrim(Substr(ls_registro,1,8))), 8,'0'));
          ls_tip_doc := '1';
          ls_tip_inf := '1';
       ELSE
           ls_tip_doc := Substr(ls_registro,1,1);
           ls_tip_inf := Substr(ls_registro,2,1);
           IF n_reporte = 'RTC' THEN
              ln_num_sec := Test_Number(Lpad(Ltrim(Rtrim(Substr(ls_registro,3,6))), 6,'0'));
           ELSE
              ln_num_sec := Test_Number(Lpad(Ltrim(Rtrim(Substr(ls_registro,3,8))), 8,'0'));
           END IF;
       END IF;

       n_error_for := 0;

--     Controla EOF
       IF ls_tip_doc = chr(26) THEN
          EXIT;
       ELSE
          IF ls_tip_doc = '2' THEN
             n_for_ant := ls_tip_doc;
             n_inf_ant := ls_tip_inf;  -- JCFS 2012-01: Se guarda el último tipo de información
             EXIT;
          END IF;
       END IF;

--     Numero de secuencia informado invalido
       n_rc := 0;
       n_control := 195;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_195(ln_num_sec, n_reporte);
          IF n_rc <> 1 THEN
             IF arr_tipcon(n_control) = 'V' THEN
                n_hay_error := 1;
                ln_can_bad_id := ln_can_bad_id + 1;
             END IF;
             arr_error (n_control) := arr_error (n_control) + 1;

             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
             n_mensaje := 'OBS: Numero de secuencia no es numerico despues de secuencia ' || n_nro_sec;

             SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje, i_dia_refer, i_cod_sec_envio);
             SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
             SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
             n_es_cancelatorio := 1;
             EXIT;
          END IF;
       END IF;

--     Número de secuencia no existe en el RCD
       IF n_reporte = 'RCO' THEN
          n_control := 404;
          IF arr_activ (n_control) = 'S' THEN
             n_rc := sf_valida_control_404(i_codemp, i_anopro, i_mespro, ln_num_sec);
             IF n_rc <> 1 THEN
                lb_existe_rcd := FALSE;
                /* A solicitud del DCR, se cambia este control a la validación, pero se sigue llamando a la función, porque se necesita la variable lb_existe_rcd
                IF arr_tipcon(n_control) = 'V' THEN
                   n_hay_error := 1;
                   ln_can_bad_id := ln_can_bad_id + 1;
                END IF;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);

                n_mensaje := 'OBS: Numero de secuencia no existe en el RCD ' || n_nro_sec;
                SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje, i_dia_refer, i_cod_sec_envio);
                SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                n_es_cancelatorio := 1;
                EXIT;
                */
             ELSE
                lb_existe_rcd := TRUE;
             END IF;
          END IF;
       END IF;

       IF n_reporte <> 'RDD' THEN
--        "Tipo de Formulario" no es valido
         n_rc := 0;
         n_control := 10;
         IF arr_activ (n_control) = 'S' THEN
            n_rc := sf_valida_control_10 (ls_tip_doc, n_reporte);
            IF n_rc <> 1 THEN
               n_error_for := 1;
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
                  ln_can_bad_id := ln_can_bad_id + 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
            END IF;
         END IF;

--       "Tipo de Informacion" no es valido
         n_rc := 0;
         n_control := 11;
         IF arr_activ (n_control) = 'S' THEN
            n_rc := sf_valida_control_11 (ls_tip_inf, n_reporte);
            IF n_rc <> 1 THEN
               n_error_for := 1;
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
                  ln_can_bad_id := ln_can_bad_id + 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
            END IF;
         END IF;

         IF n_error_for = 1 THEN
            ln_can_bad_id := ln_can_bad_id + 1;
            SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'OBS: En Formularios del Deudor', i_dia_refer, i_cod_sec_envio);
            SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
            SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'OBS: En Formularios del Deudor', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
            n_es_cancelatorio := 1;
            EXIT;
         END IF;
       END IF;

       /*************************************/
       /***** DATOS DE IDENIIFICACION *******/
       /*************************************/

       -- FVSH  '0': RCO   '1': RCD / RTC   '3' : RCM / RCO  '4' : RCA
       IF ls_tip_inf IN ('0', '1', '3', '4')  THEN
          IF ls_tip_doc = '1' THEN
             if n_reporte = 'RCO' AND ls_tip_inf = '3' then
                ln_can_reg_sal := ln_can_reg_sal  + 1;
             else
                ln_can_reg_id := ln_can_reg_id  + 1;
             end if;
          END IF;

          if n_reporte IN ('RCA', 'RCM') THEN -- 'RCO' no
             ln_num_sec_reg := ln_can_reg_id;
          else
             ln_num_sec_reg := ln_num_sec;
          end if;

          n_nro_sec     := n_nro_sec + 1;
          n_nro_cta     := 0;
          IF ln_num_sec != n_nro_sec THEN
             IF ln_num_sec > n_nro_sec THEN
--              Numero de secuencia no es correlativo
                n_control := 13;
                IF arr_activ (n_control) = 'S' THEN
                   IF arr_tipcon(n_control) = 'V' THEN
                      n_hay_error := 1;
                      ln_can_bad_id := ln_can_bad_id + 1;
                   END IF;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                END IF;
                n_nro_sec := ln_num_sec;
             END IF;
             IF ln_num_sec < n_nro_sec THEN
--              Secuencia no esta en orden ascendente
                n_control := 16;
                IF arr_activ (n_control) = 'S' THEN
                   IF arr_tipcon(n_control) = 'V' THEN
                      n_hay_error := 1;
                      ln_can_bad_id := ln_can_bad_id + 1;
                   END IF;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                END IF;
                n_nro_sec := ln_num_sec;
             END IF;
          ELSE
             IF ln_num_sec = ln_num_sec_ant THEN
--              Numero de secuencia esta duplicado
                n_control := 12;
                IF arr_activ (n_control) = 'S' THEN
                   IF arr_tipcon(n_control) = 'V' THEN
                      n_hay_error := 1;
                      ln_can_bad_id := ln_can_bad_id + 1;
                   END IF;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                END IF;
                n_nro_sec := ln_num_sec;
             END IF;
          END IF;

          IF ls_tip_doc = '1' THEN
            -- Código SBS informado no es numérico (CONTROL NO USADO)
/*
             n_control := 38;
             IF arr_activ (n_control) = 'S' THEN
                ls_cod_sbs := Ltrim(Rtrim(Substr(ls_registro,  9, 10) ));
                IF ls_cod_sbs IS NULL THEN
                   ln_cod_sbs := 0;
                ELSE
                   ln_cod_sbs := Test_Number(Substr(ls_registro,  9, 10) ) ;
                END IF;
                IF ln_cod_sbs IS NULL THEN
                   ln_can_bad_id := ln_can_bad_id + 1;
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, 0, 'PV', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
*/

             IF n_reporte = 'RCO' AND ls_tip_inf = '0' THEN

                -- Tipo de documento tributario diferente al informado en el RCD
                ls_tip_doc_trib := Ltrim(Rtrim(Substr(ls_registro, 21,  1) ));
                n_control := 400;
                IF arr_activ (n_control) = 'S' AND lb_existe_rcd THEN
                   n_rc := sf_valida_control_400(i_codemp, i_anopro, i_mespro, ln_num_sec, ls_tip_doc_trib);
                   IF n_rc <> 1 THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_id := ln_can_bad_id + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);

      /*                n_mensaje := 'OBS: Numero de secuencia no existe en el RCD ' || n_nro_sec;
                      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje, i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                      n_es_cancelatorio := 1;
                      EXIT; */
                   END IF;
                END IF;

                -- Tipo de documento tributario no es 2 ni 3.
                n_rc := 0;
                n_control := 52;
                n_tipo_tributario := 'Valido';
                IF arr_activ (n_control) = 'S' THEN
                   n_rc := sf_valida_control_52 (ls_tip_doc_trib, n_reporte);
                   IF n_rc <> 1 THEN
                      arr_error (n_control) := arr_error (n_control) + 1;
                      IF arr_nivval (n_control) = 1 THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_id := ln_can_bad_id + 1;
                            n_tipo_tributario := 'Inval';
                         END IF;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 9, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      ELSE
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 9, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   END IF;
                END IF;

                -- Documento tributario diferente al informado en el RCD
                ls_doc_trib_adq     := Trim(Substr(ls_registro, 22, 11));
                n_control := 401;
                IF arr_activ (n_control) = 'S' AND lb_existe_rcd THEN
                   n_rc := sf_valida_control_401(i_codemp, i_anopro, i_mespro, ln_num_sec, ls_doc_trib_adq);
                   IF n_rc <> 1 THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_id := ln_can_bad_id + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);

      /*                n_mensaje := 'OBS: Numero de secuencia no existe en el RCD ' || n_nro_sec;
                      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje, i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                      n_es_cancelatorio := 1;
                      EXIT; */
                   END IF;
                END IF;

                -- Tipo de documento de identidad diferente al informado en el RCD
                ls_tip_doc_iden_adq := Trim(Substr(ls_registro, 33, 1));
                n_control := 402;
                IF arr_activ (n_control) = 'S' AND lb_existe_rcd THEN
                   n_rc := sf_valida_control_402(i_codemp, i_anopro, i_mespro, ln_num_sec, ls_tip_doc_iden_adq);
                   IF n_rc <> 1 THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_id := ln_can_bad_id + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);

      /*                n_mensaje := 'OBS: Numero de secuencia no existe en el RCD ' || n_nro_sec;
                      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje, i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                      n_es_cancelatorio := 1;
                      EXIT; */
                   END IF;
                END IF;

                -- Documento de identidad diferente al informado en el RCD
                ls_cod_doc_id       := Trim(Substr(ls_registro, 34, 12));
                n_control := 403;
                IF arr_activ (n_control) = 'S' AND lb_existe_rcd THEN
                   n_rc := sf_valida_control_403(i_codemp, i_anopro, i_mespro, ln_num_sec, ls_cod_doc_id);
                   IF n_rc <> 1 THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_id := ln_can_bad_id + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);

      /*                n_mensaje := 'OBS: Numero de secuencia no existe en el RCD ' || n_nro_sec;
                      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje, i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                      SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                      n_es_cancelatorio := 1;
                      EXIT; */
                   END IF;
                END IF;

             ELSE
                 IF n_reporte <> 'RDD' THEN
      --           Tipo de residencia no es valido.
                   n_rc := 0;
                   n_control := 87;
                   IF arr_activ (n_control) = 'S' THEN
                      IF n_reporte = 'RTC' THEN
                         ls_tip_residencia := Ltrim(Rtrim(Substr(ls_registro, 84,  1) ));
                      ELSE
                         ls_tip_residencia := Ltrim(Rtrim(Substr(ls_registro, 86,  1) ));
                      END IF;
                      n_rc := sf_valida_control_87 (ls_tip_residencia, n_reporte);
                      IF n_rc <> 1 THEN
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                             END IF;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                       END IF;
                    END IF;
                 END IF;

    --           Clasificacion del Cliente/Deudor no es valida (No es del 0 al 4, ni es 8).
                 n_rc := 0;
                 n_control := 88;
                 IF arr_activ (n_control) = 'S' THEN
                    ls_tip_clasif_deu := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                    n_rc := sf_valida_control_88 (ls_tip_clasif_deu, n_reporte);
                    IF n_rc <> 1 THEN
                        arr_error (n_control) := arr_error (n_control) + 1;
                        IF arr_nivval (n_control) = 1 THEN
                           IF arr_tipcon(n_control) = 'V' THEN
                              n_hay_error := 1;
                              ln_can_bad_id := ln_can_bad_id + 1;
                           END IF;
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                        ELSE
                            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                        END IF;
                    END IF;
                 END IF;

    --           Tipo de Persona no es valido (No es del 1 al 4 o incoherente con el nombre informado).
                 IF n_reporte IN ('RCD', 'RCA', 'RCM', 'RCO') THEN
                    n_rc := 0;
                    n_control := 89;
                    IF arr_activ (n_control) = 'S' THEN
                       ls_tip_persona := Ltrim(Rtrim(Substr(ls_registro, 85,  1) ));
                       n_rc := sf_valida_control_89 (ls_tip_persona, n_reporte);
                       IF n_rc <> 1 THEN
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                             END IF;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                       ELSE
                          IF ls_tip_persona = '1' THEN --OR ls_tip_persona = '3' THEN
                             IF n_reporte = 'RCO' THEN
                                ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,96,120)));
                                ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,216,40)));
                                ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,256,40)));
                                ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,396,40)));
                                ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,336,40)));
                             ELSE
                                ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,117,120)));
                                ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,237,40)));
                                ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,277,40)));
                                ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,317,40)));
                                ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,357,40)));
                             END IF;

                             ls_dsdeu := ls_ape_pat;
                             if nvl(ls_ape_mat, ' ') <> ' ' then
                                ls_dsdeu := ls_dsdeu || ' ' || ls_ape_mat;
                             else
                                ls_dsdeu := ls_dsdeu || ' ' || ls_ape_cas;
                             end if;
                             ls_dsdeu := ls_dsdeu || ' ' || ls_pri_nom || ' ' || ls_seg_nom;
                             n_long_nom_cliente := LENGTH(ls_dsdeu);
                             IF n_long_nom_cliente > 0 THEN
                                n_loop := 1;
                                n_es_nombre_mancomuno := 0;
                                FOR n_loop in 1..n_long_nom_cliente LOOP
                                    IF Substr(ls_dsdeu, n_loop, 3) = 'Y/O' THEN
                                       n_es_nombre_mancomuno := 1;
                                    END IF;
                                END LOOP;
                                IF n_es_nombre_mancomuno = 1 THEN
                                   arr_error (n_control) := arr_error (n_control) + 1;
                                   IF arr_nivval (n_control) = 1 THEN
                                      IF arr_tipcon(n_control) = 'V' THEN
                                         n_hay_error := 1;
                                         ln_can_bad_id := ln_can_bad_id + 1;
                                      END IF;
                                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                                   ELSE
                                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                                   END IF;
                                END IF;
                             END IF;
                          END IF;
                       END IF;
                    END IF;
                 ELSE
                    IF n_reporte = 'RTC' THEN
                        n_rc := 0;
                        n_control := 89;
                        IF arr_activ (n_control) = 'S' THEN
                           ls_tip_persona := Ltrim(Rtrim(Substr(ls_registro, 83,  1) ));
                           n_rc := sf_valida_control_89 (ls_tip_persona, n_reporte);
                           IF n_rc <> 1 THEN
                              arr_error (n_control) := arr_error (n_control) + 1;
                              IF arr_nivval (n_control) = 1 THEN
                                 IF arr_tipcon(n_control) = 'V' THEN
                                    n_hay_error := 1;
                                    ln_can_bad_id := ln_can_bad_id + 1;
                                 END IF;
                                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                              ELSE
                                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                              END IF;
                           END IF;
                         END IF;
                       END IF;
                 END IF;

                 IF n_reporte <> 'RDD' THEN
      --           Identificacion de accionista no es valida (No es 0 ni 1).
                   n_rc := 0;
                   n_control := 90;
                   IF arr_activ (n_control) = 'S' THEN
                      IF n_reporte = 'RTC' THEN
                         ls_ind_accionista := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                      ELSIF n_reporte = 'RCO' THEN
                         ls_ind_accionista := Ltrim(Rtrim(Substr(ls_registro, 88,  1) ));
                      ELSE
                         ls_ind_accionista := Ltrim(Rtrim(Substr(ls_registro, 89,  1) ));
                      END IF;
                      n_rc := sf_valida_control_90 (ls_ind_accionista, n_reporte);
                      IF n_rc <> 1 THEN
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                             END IF;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                      END IF;
                   END IF;

      --           Magnitud Empresarial no es valida (no es 0, 1, 5, 6, 7, 8).
                   n_rc := 0;
                   n_control := 25;
                   IF arr_activ (n_control) = 'S' THEN
                      IF n_reporte = 'RTC' THEN
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 86,  1) ));
                      ELSIF n_reporte = 'RCO' THEN
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                      ELSE
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 88,  1) ));
                      END IF;
                      n_rc := sf_valida_control_25 (ls_tip_magnitud, n_reporte);
                      IF n_rc <> 1 THEN
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                             END IF;
                              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                      END IF;
                   END IF;

      --           Magnitud de Empresa no corresponde al Tipo de Persona 2 o 4.
                   n_rc := 0;
                   n_control := 55;
                   IF arr_activ (n_control) = 'S' THEN
                      IF n_reporte = 'RTC' THEN
                         ls_tip_persona  := Ltrim(Rtrim(Substr(ls_registro, 83,  1) ));
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 86,  1) ));
                      ELSIF n_reporte = 'RCO' THEN
                         ls_tip_persona  := Ltrim(Rtrim(Substr(ls_registro, 85,  1) ));
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                      ELSE
                         ls_tip_persona  := Ltrim(Rtrim(Substr(ls_registro, 85,  1) ));
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 88,  1) ));
                      END IF;
                      n_rc := sf_valida_control_55 (ls_tip_persona, ls_tip_magnitud, n_reporte);
                      IF n_rc <> 1 THEN
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                             END IF;
                              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                      END IF;
                   END IF;

      --           Magnitud de Empresarial no corresp. al Tipo de Persona 1 o 3.
                   n_rc := 0;
                   n_control := 91;
                   IF arr_activ (n_control) = 'S' THEN
                      IF n_reporte = 'RTC' THEN
                         ls_tip_persona  := Ltrim(Rtrim(Substr(ls_registro, 83,  1) ));
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 86,  1) ));
                      ELSIF n_reporte = 'RCO' THEN
                         ls_tip_persona  := Ltrim(Rtrim(Substr(ls_registro, 85,  1) ));
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                      ELSE
                         ls_tip_persona  := Ltrim(Rtrim(Substr(ls_registro, 85,  1) ));
                         ls_tip_magnitud := Ltrim(Rtrim(Substr(ls_registro, 88,  1) ));
                      END IF;
                      n_rc := sf_valida_control_91 (ls_tip_persona, ls_tip_magnitud, n_reporte);
                      IF n_rc <> 1 THEN
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                             END IF;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                      END IF;
                   END IF;
                 END IF;

    --           Fecha de Nacimiento
                 -- JCFS 05/05/2010: Se reutilizará el control 162 para validar la Fecha de Nacimiento que viene como Dato Complementario del RCD según la Res. 11356.
                 IF n_reporte IN ('RCD', 'RCA', 'RCM', 'RDD', 'RCO') THEN
                    n_rc := 0;
                    n_control := 162;  -- Fecha de nacimiento no es válida
                    IF arr_activ (n_control) = 'S' THEN
                       IF n_reporte = 'RCO' THEN
                          ls_fec_nac := Ltrim(Rtrim(Substr(ls_registro, 376, 8)));
                       ELSE
                          ls_fec_nac := Ltrim(Rtrim(Substr(ls_registro, 425, 8)));
                       END IF;

                       IF ls_fec_nac IS NOT NULL AND ls_fec_nac <> '0' AND ls_fec_nac < '00000000' THEN  -- ls_fec_nac < '00000000' incluye: ls_fec_nac <> '00000000'
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                             END IF;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                       END IF;
                    END IF;
                 END IF;

                 IF n_reporte = 'RDD' THEN
    --              Sexo
                    ls_sexo := Ltrim(Rtrim(Substr(ls_registro,303,  1) ));
                    IF ls_sexo > ' ' THEN
                       IF ls_sexo NOT IN ('M', 'F') THEN
                          n_control := 164;
                          IF arr_activ (n_control) = 'S' THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_sal := ln_can_bad_sal + 1;
                             END IF;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                       END IF;
                     ELSE
                        n_control := 163;
                        IF arr_activ (n_control) = 'S' THEN
                           IF arr_tipcon(n_control) = 'V' THEN
                              n_hay_error := 1;
                              ln_can_bad_sal := ln_can_bad_sal + 1;
                           END IF;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                        END IF;
                     END IF;
    --              Estado Civil
                    ls_est_civil := Ltrim(Rtrim(Substr(ls_registro, 304, 1) ));
                    IF ls_est_civil > ' ' THEN
                       IF ls_est_civil NOT IN ('S', 'C', 'D', 'V') THEN
                          n_control := 166;
                          IF arr_activ (n_control) = 'S' THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_sal := ln_can_bad_sal + 1;
                             END IF;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                           END IF;
                        END IF;
                     ELSE
                          n_control := 166;
                          IF arr_activ (n_control) = 'S' THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_sal := ln_can_bad_sal + 1;
                             END IF;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                      END IF;
                 END IF;

                 IF n_reporte = 'RTC' THEN
    --              Fecha de Nacimiento
                    ls_tip_persona := Ltrim(Rtrim(Substr(ls_registro, 83,  1) ));
                    IF ls_tip_persona = '1' THEN
                       n_control := 162;
                       IF arr_activ (n_control) = 'S' THEN
                          ls_fec_nac := Ltrim(Rtrim(Substr(ls_registro, 93,  8) ));
                          IF ls_fec_nac > '00000000' THEN
                             ld_fec_nac := SF_VALIDA_FECHA (ls_fec_nac);
                             IF ld_fec_nac IS NULL THEN
                                IF arr_tipcon(n_control) = 'V' THEN
                                   n_hay_error := 1;
                                   ln_can_bad_sal := ln_can_bad_sal + 1;
                                END IF;
                                arr_error (n_control) := arr_error (n_control) + 1;
                                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                             END IF;
                          END IF;
                       END IF;
                    ELSE
                       n_control := 162;
                       IF arr_activ (n_control) = 'S' THEN
                          ls_fec_nac := Ltrim(Rtrim(Substr(ls_registro, 93,  8) ));
                          IF ls_fec_nac > '00000000' THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_sal := ln_can_bad_sal + 1;
                             END IF;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                       END IF;
                    END IF;

    --              Sexo
                    ls_tip_persona := Ltrim(Rtrim(Substr(ls_registro, 83,  1) ));
                    ls_sexo := Ltrim(Rtrim(Substr(ls_registro,101,  1) ));
                    IF ls_sexo > ' ' THEN
                       IF ls_tip_persona = '1' THEN
                          IF ls_sexo NOT IN ('M', 'F') THEN
                             n_control := 164;
                             IF arr_activ (n_control) = 'S' THEN
                                IF arr_tipcon(n_control) = 'V' THEN
                                   n_hay_error := 1;
                                   ln_can_bad_sal := ln_can_bad_sal + 1;
                                END IF;
                                arr_error (n_control) := arr_error (n_control) + 1;
                                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                             END IF;
                          END IF;
                       ELSE
                          IF ls_tip_persona IN ('2', '3') THEN
                             n_control := 164;
                             IF arr_activ (n_control) = 'S' THEN
                                IF arr_tipcon(n_control) = 'V' THEN
                                   n_hay_error := 1;
                                   ln_can_bad_sal := ln_can_bad_sal + 1;
                                END IF;
                                arr_error (n_control) := arr_error (n_control) + 1;
                                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                             END IF;
                          END IF;
                       END IF;
                    ELSE
                       IF ls_tip_persona = '1' THEN
                          n_control := 163;
                          IF arr_activ (n_control) = 'S' THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_sal := ln_can_bad_sal + 1;
                             END IF;
                             arr_error (n_control) := arr_error (n_control) + 1;
                              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                       END IF;
                    END IF;

    --              Estado Civil
                    ls_est_civil := Ltrim(Rtrim(Substr(ls_registro, 102, 1) ));
                    IF ls_est_civil > ' ' THEN
                       IF ls_tip_persona = '1' THEN
                          -- JCFS 14/09/2011: Se elimina el valor 'O' (Conviviente) que no es válido
                          IF ls_est_civil NOT IN ('S', 'C', 'D', 'V') THEN
                             n_control := 166;
                             IF arr_activ (n_control) = 'S' THEN
                                IF arr_tipcon(n_control) = 'V' THEN
                                   n_hay_error := 1;
                                   ln_can_bad_sal := ln_can_bad_sal + 1;
                                END IF;
                                arr_error (n_control) := arr_error (n_control) + 1;
                                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                             END IF;
                          END IF;
                       ELSE
                          IF ls_tip_persona IN ('2', '3') THEN
                             n_control := 166;
                             IF arr_activ (n_control) = 'S' THEN
                                IF arr_tipcon(n_control) = 'V' THEN
                                   n_hay_error := 1;
                                   ln_can_bad_sal := ln_can_bad_sal + 1;
                                END IF;
                                arr_error (n_control) := arr_error (n_control) + 1;
                                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                             END IF;
                          END IF;
                       END IF;
                    ELSE
                       IF ls_tip_persona = '1' THEN
                          n_control := 166;
                          IF arr_activ (n_control) = 'S' THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_sal := ln_can_bad_sal + 1;
                             END IF;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                       END IF;
                    END IF;

    --              Direccion
                    n_control := 152;
                    IF arr_activ (n_control) = 'S' THEN
                       ls_direccion := Ltrim(Rtrim(Substr(ls_registro,255, 80) ));
                       IF ls_direccion = ' ' THEN
                          IF arr_tipcon(n_control) = 'V' THEN
                             n_hay_error := 1;
                             ln_can_bad_sal := ln_can_bad_sal + 1;
                          END IF;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                       END IF;
                    END IF;
                 END IF;

                 IF n_reporte <> 'RDD' THEN
      --           Tipo de documento tributario no es 2 ni 3.
                   n_rc := 0;
                   n_control := 52;
                   n_tipo_tributario := 'Valido';
                   IF arr_activ (n_control) = 'S' THEN
                      IF n_reporte = 'RTC' THEN
                         ls_tip_doc_trib := Ltrim(Rtrim(Substr(ls_registro, 58,  1) ));
                      ELSE
                         ls_tip_doc_trib := Ltrim(Rtrim(Substr(ls_registro, 60,  1) ));
                      END IF;
                      n_rc := sf_valida_control_52 (ls_tip_doc_trib, n_reporte);
                      IF n_rc <> 1 THEN
                          arr_error (n_control) := arr_error (n_control) + 1;
                          IF arr_nivval (n_control) = 1 THEN
                             IF arr_tipcon(n_control) = 'V' THEN
                                n_hay_error := 1;
                                ln_can_bad_id := ln_can_bad_id + 1;
                                n_tipo_tributario := 'Inval';
                             END IF;
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          ELSE
                             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          END IF;
                      END IF;
                   END IF;
                 END IF;

    --           Nombre y documento de identidad y/o RUC iguales u omit. y codigos unicos difer.
                 n_control := 22;
                 IF arr_activ (n_control) = 'S' AND n_tipo_tributario = 'Valido' THEN
                     BEGIN
                       IF n_reporte = 'RTC' THEN
                          ls_dsdeu        := Ltrim(Rtrim(Substr(ls_registro,135,120) ));
                          ls_cod_doc_id   := Ltrim(Rtrim(Substr(ls_registro, 71, 12) ));
                          ln_cod_doc_trib := Test_Number(Substr(ls_registro, 59, 11) ) ;
                          ls_cod_unico    := Ltrim(Rtrim(Substr(ls_registro, 19, 20) ));
                       ELSE
                          IF n_reporte = 'RDD' THEN
                             ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,9,120)));
                             ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,129,40)));
                             ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,169,40)));
                             ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,209,40)));
                             ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,249,40)));
                             ls_dsdeu := ls_ape_pat;
                          ELSIF n_reporte = 'RCO' THEN
                              ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,96,120)));
                              ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,216,40)));
                              ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,256,40)));
                              ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,296,40)));
                              ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,336,40)));
                              ls_dsdeu := ls_ape_pat;
                          ELSE
                              ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,117,120)));
                              ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,237,40)));
                              ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,277,40)));
                              ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,317,40)));
                              ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,357,40)));
                              ls_dsdeu := ls_ape_pat;
                          END IF;

                          if nvl(ls_ape_mat, ' ') <> ' ' then
                             ls_dsdeu := ls_dsdeu || ' ' || ls_ape_mat;
                          else
                             ls_dsdeu := ls_dsdeu || ' ' || ls_ape_cas;
                          end if;
                          ls_dsdeu := ls_dsdeu || ' ' || ls_pri_nom || ' ' || ls_seg_nom;
                          IF n_reporte = 'RDD' THEN
                            ls_cod_doc_id   := Ltrim(Rtrim(Substr(ls_registro, 290, 12) ));
                          ELSE
                             ls_cod_doc_id   := Ltrim(Rtrim(Substr(ls_registro, 73, 12) ));
                             ln_cod_doc_trib := Test_Number(Substr(ls_registro, 61, 11) ) ;
                             ls_cod_unico    := Ltrim(Rtrim(Substr(ls_registro, 21, 20) ));
                          END IF;
                       END IF;

                       IF ln_cod_doc_trib IS NOT NULL AND
                          -- FVSH 260060724  RES-426-2006
                          -- Esta condicion solo se validara para  Naturales/Juridicos
                          -- Para Mancomunos ('3') se puede presentar la sgte situacion:
                          -- Reporta como Natural y es titular de un Mancomuno
                          -- Reporta como Juridico y es titular de un Mancomuno
                          -- Reporta como Mancomuno y es titular de otro Mancomuno

                          -- JCFS 05/05/2010: Se agrega el Tipo de Persona 4 - RES 11356
                          (ls_tip_persona in ('1', '2', '4') and ls_tip_persona_ant in ('1', '2', '4')) THEN
                          IF ls_dsdeu = ls_dsdeu_ant AND ls_cod_unico <> ls_cod_unico_ant THEN
                             IF ln_cod_doc_trib_ant > 0 AND ln_cod_doc_trib = ln_cod_doc_trib_ant THEN
                                arr_error (n_control) := arr_error (n_control) + 1;
                                IF arr_nivval (n_control) = 1 THEN
                                   IF arr_tipcon(n_control) = 'V' THEN
                                      n_hay_error := 1;
                                      ln_can_bad_id := ln_can_bad_id + 1;
                                   END IF;
                                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                                ELSE
                                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                                END IF;
                             END IF;

                             IF ls_cod_doc_id_ant > ' ' AND ls_cod_doc_id = ls_cod_doc_id_ant THEN
                                arr_error (n_control) := arr_error (n_control) + 1;
                                IF arr_nivval (n_control) = 1 THEN
                                   IF arr_tipcon(n_control) = 'V' THEN
                                      n_hay_error := 1;
                                      ln_can_bad_id := ln_can_bad_id + 1;
                                   END IF;
                                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                                ELSE
                                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                                END IF;
                             END IF;
                          END IF;
                       END IF;
                    EXCEPTION
                       WHEN OTHERS THEN
                          n_pto_control := 1;
                    END;
                 END IF;

    --           Nombre y documento de identidad y/o RUC iguales u omit. y codigos unicos difer.
                 n_control := 23;
                 IF arr_activ (n_control) = 'S' AND n_tipo_tributario = 'Valido' THEN
                     BEGIN
                       IF n_reporte = 'RTC' THEN
                          ls_dsdeu        := Ltrim(Rtrim(Substr(ls_registro,135,120) ));
                          ls_cod_doc_id   := Ltrim(Rtrim(Substr(ls_registro, 71, 12) ));
                          ln_cod_doc_trib := Test_Number(Substr(ls_registro, 59, 11) ) ;
                       ELSE
                          IF n_reporte = 'RDD' THEN
                             ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,9,120)));
                             ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,129,40)));
                             ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,169,40)));
                             ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,209,40)));
                             ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,249,40)));
                             ls_dsdeu := ls_ape_pat;
                          ELSIF n_reporte = 'RCO' THEN
                             ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,96,120)));
                             ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,216,40)));
                             ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,256,40)));
                             ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,296,40)));
                             ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,336,40)));
                             ls_dsdeu := ls_ape_pat;
                          ELSE
                              ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,117,120)));
                              ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,237,40)));
                              ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,277,40)));
                              ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,317,40)));
                              ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,357,40)));
                              ls_dsdeu := ls_ape_pat;
                          END IF;

                          if nvl(ls_ape_mat, ' ') <> ' ' then
                             ls_dsdeu := ls_dsdeu || ' ' || ls_ape_mat;
                          else
                             ls_dsdeu := ls_dsdeu || ' ' || ls_ape_cas;
                          end if;
                          ls_dsdeu := ls_dsdeu || ' ' || ls_pri_nom || ' ' || ls_seg_nom;

                          IF n_reporte = 'RDD' THEN
                             ls_cod_doc_id   := Ltrim(Rtrim(Substr(ls_registro, 290, 12) ));
                          ELSE
                             ls_cod_doc_id   := Ltrim(Rtrim(Substr(ls_registro, 73, 12) ));
                             ln_cod_doc_trib := Test_Number(Substr(ls_registro, 61, 11) ) ;
                          END IF;
                       END IF;

                       IF ln_cod_doc_trib IS NOT NULL AND
                          --FVSH 260060724  RES-426-2006
                          -- Esta condicion solo se validara para  Naturales/Juridicos
                          -- Para Mancomunos ('3') se puede presentar la sgte situacion:
                          -- Reporta como Natural y es titular de un Mancomuno
                          -- Reporta como Juridico y es titular de un Mancomuno
                          -- Reporta como Mancomuno y es titular de otro Mancomuno

                          -- JCFS 05/05/2010: Se agrega el Tipo de Persona 4 - RES 11356
                          ls_tip_persona in ('1', '2', '4') AND ls_tip_persona_ant in ('1', '2', '4') THEN
                          IF ls_dsdeu = ls_dsdeu_ant AND
                             ( (ls_cod_doc_id = ls_cod_doc_id_ant AND ls_cod_doc_id_ant > ' ') OR
                               (ln_cod_doc_trib = ln_cod_doc_trib_ant AND ln_cod_doc_trib_ant > 0) ) THEN
                             arr_error (n_control) := arr_error (n_control) + 1;
                             IF arr_nivval (n_control) = 1 THEN
                                IF arr_tipcon(n_control) = 'V' THEN
                                   n_hay_error := 1;
                                   ln_can_bad_id := ln_can_bad_id + 1;
                                END IF;
                                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                             ELSE
                                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                             END IF;
                          END IF;
                       END IF;
                     EXCEPTION
                        WHEN OTHERS THEN
                           n_pto_control := 1;
                     END;
                 END IF;

    --           Nombre no esta en orden alfabetico.
                 n_control := 34;
                 IF arr_activ (n_control) = 'S' THEN
                    IF ls_dsdeu < ls_dsdeu_ant THEN
                       arr_error (n_control) := arr_error (n_control) + 1;
                       IF arr_nivval (n_control) = 1 THEN
                          IF arr_tipcon(n_control) = 'V' THEN
                             n_hay_error := 1;
                             ln_can_bad_id := ln_can_bad_id + 1;
                          END IF;
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                       ELSE
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                       END IF;
                    END IF;
                 END IF;

                 ls_dsdeu_ant := ls_dsdeu;
                 ls_cod_doc_id_ant   := ls_cod_doc_id;
                 ln_cod_doc_trib_ant := ln_cod_doc_trib;
                 ls_cod_unico_ant    := ls_cod_unico;
                 ls_tip_persona_ant  := ls_tip_persona;   --FVSH 260060724  RES-426-2006

                 IF n_reporte = 'RTC' THEN
                    ls_cod_unico := Ltrim(Rtrim(Substr(ls_registro, 19, 20) ));
                    ls_dsdeu     := Ltrim(Rtrim(Substr(ls_registro,135,120) ));
                 ELSE
                    IF n_reporte = 'RDD' THEN
                        ls_tip_persona := '1';
                        ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,9,120)));
                        ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,129,40)));
                        ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,169,40)));
                        ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,209,40)));
                        ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,249,40)));
                        ls_dsdeu := ls_ape_pat;
                    ELSE
                        ls_cod_unico := Ltrim(Rtrim(Substr(ls_registro, 21, 20) ));
                        IF n_reporte = 'RCO' THEN
                           ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,96,120)));
                           ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,216,40)));
                           ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,256,40)));
                           ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,296,40)));
                           ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,336,40)));
                        ELSE
                           ls_ape_pat := Ltrim(Rtrim(Substr(ls_registro,117,120)));
                           ls_ape_mat := Ltrim(Rtrim(Substr(ls_registro,237,40)));
                           ls_ape_cas := Ltrim(Rtrim(Substr(ls_registro,277,40)));
                           ls_pri_nom := Ltrim(Rtrim(Substr(ls_registro,317,40)));
                           ls_seg_nom := Ltrim(Rtrim(Substr(ls_registro,357,40)));
                        END IF;
                        ls_dsdeu := ls_ape_pat;
                    END IF;

                    IF ls_tip_persona = '1' THEN
                       if nvl(ls_ape_mat, ' ') <> ' ' then
                          ls_dsdeu := ls_dsdeu || ' ' || ls_ape_mat;
                       else
                          ls_dsdeu := ls_dsdeu || ' ' || ls_ape_cas;
                       end if;
                       ls_dsdeu := ls_dsdeu || ' ' || ls_pri_nom || ' ' || ls_seg_nom;
                       ls_dsdeu := ls_dsdeu ;
                    END IF;
                    /*-- FVSH 808 valida la longitud del campo por tipo de persona ---*/
                      -- Juridicas y Mancomunas: Longitud no debe exceder 120 caracteres
                    n_rc := 0;
                    n_control := 221;
                    IF arr_activ (n_control) = 'S' THEN
                       n_rc := sf_valida_control_221 (ls_tip_persona, ls_dsdeu, n_reporte);
                       IF n_rc <> 1 THEN
                          SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                          IF arr_tipcon(n_control) = 'V' THEN
                             n_hay_error := 1;
                             n_es_cancelatorio := 1;
                          END IF;
                       END IF;
                    END IF;
                 END IF;
                 ls_dsdeu_aux := translate(ls_dsdeu,chr(39), RPAD(' ',35) );

                 IF n_reporte in ('RCA', 'RCM', 'RCO') THEN
                    -- Se excluye la grabacion de la tabla CRA_VALID_IDENTIF_AUX
                    -- la secuencia para el RCA, RCM y RCO se puede repetir ocasionando error de PK en la tabla auxiliar
                    -- para incluir estos reportes se debe modificar el contador num_sec
                    ln_num_sec := ln_num_sec;
                 ELSE
                     BEGIN
                         INSERT INTO CRA_VALID_IDENTIF_AUX ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_sec_reg, cod_unico_clie, nom_cliente, dia_refer, cod_sec_envio )
                         VALUES ( i_anopro, i_mespro, n_reporte, i_codemp, ln_num_sec, ls_cod_unico, ls_dsdeu, i_dia_refer, i_cod_sec_envio );

                         -- Control de transacciones
                         n_cont := n_cont + 1;
                         IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
                            COMMIT;
                            n_cont := 0;
                         END IF;
                     EXCEPTION
                       WHEN OTHERS THEN
                          n_es_cancelatorio := 1;
                     END;
                 END IF;

              END IF;

          END IF;   -- IF ls_tip_doc = '1' THEN (Tipo de Formulario = Del Deudor)



          IF n_reporte = 'RDD' THEN -----DATOS DE SALDOS
             ln_can_reg_sal := ln_can_reg_sal  + 1;
             n_nro_cta      := n_nro_cta + 1;

             n_rc := 0;
             n_control := 186;
             IF arr_activ (n_control) = 'S' THEN
--                 186 Saldo de la cuenta no es numerico o tiene signo y/o punto decimal
--                   ls_saldo := Substr(ls_registro,36,15);
                   -- JCFS 05/05/2010: Se modifica la lectura del Saldo según la Res. 11356
                ls_saldo := Substr(ls_registro, 373, 18);
                n_rc := sf_valida_control_186 (ls_saldo, n_reporte);   -- JCFS 05/05/2010: Función Modificada
                IF n_rc <> 1 THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                END IF;
             END IF;
          END IF;

       /*****************************/
       /***** DATOS DE SALDOS *******/
       /*****************************/

       ELSE   -- IF ls_tip_inf IN ('1','3','4')  THEN (Si el Tipo de Información es de Saldos)

          ln_can_reg_sal := ln_can_reg_sal  + 1;
          n_nro_cta      := n_nro_cta + 1;
          IF ln_num_sec != n_nro_sec THEN
--           Registro de identificacion esta fuera de secuencia
             n_control := 14;
             IF arr_activ (n_control) = 'S' THEN
                IF arr_tipcon(n_control) = 'V' THEN
                   n_hay_error := 1;
                   ln_can_bad_sal := ln_can_bad_sal + 1;
                END IF;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
             END IF;
             n_nro_sec := ln_num_sec;
          END IF;
          n_inf_ant := ls_tip_inf;

          IF ls_tip_doc = '1' THEN
             IF n_reporte = 'RTC' THEN  -- JCFS 06/05/2010: Se corrige RCD por RTC
                ls_cod_ofi := Lpad(Ltrim(Rtrim(Substr(ls_registro, 9, 4))), 4,'0');
             ELSE
                ls_cod_ofi := Lpad(Ltrim(Rtrim(Substr(ls_registro, 11, 4))), 4,'0');
             END IF;
--           Codigo de oficina no es numerico
             n_rc := 0;
             n_control := 36;
             IF arr_activ (n_control) = 'S' THEN
                n_rc := sf_valida_control_36 (ls_cod_ofi, n_reporte);
                IF n_rc <> 1 THEN
                   IF arr_tipcon(n_control) = 'V' THEN
                      n_hay_error := 1;
                      ln_can_bad_sal := ln_can_bad_sal + 1;
                   END IF;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                END IF;
             END IF;

             IF n_reporte = 'RTC' THEN
                ls_ofi_ubigeo := Lpad(Ltrim(Rtrim(Substr(ls_registro,13, 6))), 6,'0');
             ELSE
                ls_ofi_ubigeo := Lpad(Ltrim(Rtrim(Substr(ls_registro,15, 6))), 6,'0');
             END IF;

--           Codigo de UBIGEO de la oficina no es numerico
             n_rc := 0;
             n_control := 37;
             IF arr_activ (n_control) = 'S' THEN
                n_rc := sf_valida_control_37 (ls_ofi_ubigeo, n_reporte);
                IF n_rc <> 1 THEN
                   IF arr_tipcon(n_control) = 'V' THEN
                      n_hay_error := 1;
                      ln_can_bad_sal := ln_can_bad_sal + 1;
                   END IF;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                END IF;
             END IF;

             IF n_reporte = 'RCD' OR n_reporte  = 'RCA' OR n_reporte = 'RCT' THEN
                n_rc := 0;
                n_control := 186;
                IF arr_activ (n_control) = 'S' THEN
--                 186 Saldo de la cuenta no es numerico o tiene signo y/o punto decimal
--                   ls_saldo := Substr(ls_registro,36,15);
                   -- JCFS 05/05/2010: Se modifica la lectura del Saldo según la Res. 11356
                   ls_saldo := Substr(ls_registro, 37, 18);
                   n_rc := sf_valida_control_186 (ls_saldo, n_reporte);   -- JCFS 05/05/2010: Función Modificada
                   IF n_rc <> 1 THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                   END IF;
                END IF;
             END IF;
          END IF;  -- IF ls_tip_doc = '1' THEN

          IF n_reporte = 'RTC' THEN
--           Fecha de Apertura o Expedicion de la cuenta no valida
             n_control := 137;
             IF arr_activ (n_control) = 'S' THEN
                ls_fec_apertura    := Ltrim(Rtrim(Substr(ls_registro, 84, 8)));
                IF ls_fec_apertura > '00000000' THEN
                   ld_fec_apertura := SF_VALIDA_FECHA (ls_fec_apertura);
                   IF ld_fec_apertura IS NULL THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_sal := ln_can_bad_sal + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
--                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control) );
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                   END IF;
                ELSE
                   IF ls_fec_apertura IN (' ', '0') THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_sal := ln_can_bad_sal + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                   END IF;
                END IF;
             END IF;

--           Fecha de Anulacion o Cierre
             n_control := 114;
             IF arr_activ (n_control) = 'S' THEN
                ls_fec_anul_cierre := Ltrim(Rtrim(Substr(ls_registro, 93, 8)));
                ld_fec_anul_cierre := SF_VALIDA_FECHA (ls_fec_anul_cierre);
                IF ld_fec_anul_cierre IS NULL THEN
                   IF arr_tipcon(n_control) = 'V' THEN
                      n_hay_error := 1;
                      ln_can_bad_sal := ln_can_bad_sal + 1;
                   END IF;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                END IF;
             END IF;
/*
Se han hecho correcciones porque no validaba las fechas de anulacion o cierre cuando estas venian en blanco
             IF arr_activ (n_control) = 'S' THEN
                ls_fec_anul_cierre := Ltrim(Rtrim(Substr(ls_registro, 93, 8)));
                IF ls_fec_anul_cierre >= '00000000' THEN
                   ld_fec_anul_cierre := SF_VALIDA_FECHA (ls_fec_anul_cierre);
                   IF ld_fec_anul_cierre IS NULL THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_sal := ln_can_bad_sal + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
--                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, n_nro_cta, 'PV', arr_tipcon(n_control) );
                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, 0, 'PV', arr_tipcon(n_control) );
                   END IF;
                ELSE
                   IF ls_fec_anul_cierre IN (' ', '0') THEN
                      IF arr_tipcon(n_control) = 'V' THEN
                         n_hay_error := 1;
                         ln_can_bad_sal := ln_can_bad_sal + 1;
                      END IF;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, 0, 'PV', arr_tipcon(n_control) );
                   END IF;
                END IF;
             END IF;
*/
--           Fecha de Publicacion Invalida o no corresponde al tipo de reporte
             n_control := 198;
             IF arr_activ (n_control) = 'S' THEN
                ls_fec_public_peru := Ltrim(Rtrim(Substr(ls_registro,101, 8)));
                ls_tip_reporte := Ltrim(Rtrim(Substr(ls_registro,19,  2) ));
                IF ls_tip_reporte IN ('RC', 'RT') THEN
                   IF ls_fec_public_peru > '00000000' THEN
                      ld_fec_public_peru := SF_VALIDA_FECHA (ls_fec_public_peru);
                      IF ld_fec_public_peru IS NULL THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_sal := ln_can_bad_sal + 1;
                         END IF;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   ELSE
                      IF ls_fec_public_peru IN (' ', '0') THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_sal := ln_can_bad_sal + 1;
                         END IF;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   END IF;
                ELSE
--                  13 ENE 2003 (JLT) No se considera error si en CC o TC se reporta fecha de publicacion (Adriana Valenzuela)
--                   IF ls_fec_public_peru > '00000000' THEN
--                      IF arr_tipcon(n_control) = 'V' THEN
--                         n_hay_error := 1;
--                         ln_can_bad_sal := ln_can_bad_sal + 1;
--                      END IF;
--                      arr_error (n_control) := arr_error (n_control) + 1;
--                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec, 0, 'PV', arr_tipcon(n_control) );
--                   END IF;
--                 Se valida existencia de fecha de publicacion
                   IF ls_fec_public_peru > '00000000' THEN
                      ld_fec_public_peru := SF_VALIDA_FECHA (ls_fec_public_peru);
                      IF ld_fec_public_peru IS NULL THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_sal := ln_can_bad_sal + 1;
                         END IF;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   END IF;
                END IF;
             END IF;

--           Fecha de Recepcion de la solicitud de Rectificacion
--           Fecha en que concluyo el proceso de Rectificacion
             n_control := 148;
             IF arr_activ (n_control) = 'S' THEN
                ls_tip_reporte := Ltrim(Rtrim(Substr(ls_registro,19,  2) ));
                IF ls_tip_reporte IN ('RC', 'RT') THEN
--                 Fecha de Recepcion de la solicitud de Rectificacion
                   ls_fec_rec_rectif := Ltrim(Rtrim(Substr(ls_registro,113, 8)));
                   IF ls_fec_rec_rectif > '00000000' THEN
                      ld_fec_rec_rectif := SF_VALIDA_FECHA (ls_fec_rec_rectif);
                      IF ld_fec_rec_rectif IS NULL THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_sal := ln_can_bad_sal + 1;
                         END IF;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   ELSE
                      IF ls_fec_rec_rectif IN (' ', '0') THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_sal := ln_can_bad_sal + 1;
                         END IF;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   END IF;
--                 Fecha en que concluyo el proceso de Rectificacion
                   ls_fec_fin_rectif := Ltrim(Rtrim(Substr(ls_registro,121, 8)));
                   IF ls_fec_fin_rectif > '00000000' THEN
                      ld_fec_fin_rectif := SF_VALIDA_FECHA (ls_fec_fin_rectif);
                      IF ld_fec_fin_rectif IS NULL THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_sal := ln_can_bad_sal + 1;
                         END IF;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   ELSE
                      IF ls_fec_rec_rectif IN (' ', '0') THEN
                         IF arr_tipcon(n_control) = 'V' THEN
                            n_hay_error := 1;
                            ln_can_bad_sal := ln_can_bad_sal + 1;
                         END IF;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                      END IF;
                   END IF;
/*
                ELSE
                   IF (ls_fec_rec_rectif > '00000000') OR (ls_fec_fin_rectif > '00000000') THEN
                       IF arr_tipcon(n_control) = 'V' THEN
                          n_hay_error := 1;
                          ln_can_bad_sal := ln_can_bad_sal + 1;
                       END IF;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control) );
                   END IF;
*/
                END IF;
             END IF;

--           Motivo de Anulacion o Cierre
             n_control := 132;
             IF arr_activ (n_control) = 'S' THEN
                ls_tip_motivo_anul := Ltrim(Rtrim(Substr(ls_registro, 92, 1) ));
                IF (ls_tip_motivo_anul NOT IN ('1', '2', '3', '4', '5')) OR (ls_tip_motivo_anul IS NULL) THEN
                    IF arr_tipcon(n_control) = 'V' THEN
                       n_hay_error := 1;
                       ln_can_bad_sal := ln_can_bad_sal + 1;
                    END IF;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                ELSE
                   ls_tip_reporte := Ltrim(Rtrim(Substr(ls_registro,19,  2) ));
                   n_control := 159;
                   IF  ls_tip_reporte = 'TC' AND (ls_tip_motivo_anul NOT IN ('4')) AND arr_activ (n_control) = 'S' THEN
--                   AND (ls_tip_motivo_anul NOT IN ('2', '4'))
                       IF arr_tipcon(n_control) = 'V' THEN
                          n_hay_error := 1;
                          ln_can_bad_sal := ln_can_bad_sal + 1;
                       END IF;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                   END IF;
                   n_control := 158;
                   IF  ls_tip_reporte = 'CC'
                   AND (ls_tip_motivo_anul NOT IN ('1', '2', '3', '4', '5'))
                   AND arr_activ (n_control) = 'S' THEN
                       IF arr_tipcon(n_control) = 'V' THEN
                          n_hay_error := 1;
                          ln_can_bad_sal := ln_can_bad_sal + 1;
                       END IF;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                   END IF;
                END IF;
             END IF;
          END IF;   -- IF n_reporte = 'RTC' THEN
       END IF;   -- IF ls_tip_inf IN ('1','3','4')

       n_control := 15;
       IF arr_activ (n_control) = 'S' THEN
          IF  (ln_num_sec <> ln_num_sec_ant) THEN
              IF ((ls_tip_inf <> '1') AND n_reporte NOT IN ('RCA', 'RCM', 'RCO')) OR
                 ((ls_tip_inf <> '3') AND n_reporte = 'RCM' )   OR
                 ((ls_tip_inf <> '0') AND n_reporte = 'RCO' )   OR
                 ((ls_tip_inf <> '4') AND n_reporte = 'RCA' )   THEN
                  IF arr_tipcon(n_control) = 'V' THEN
                     n_hay_error := 1;
                     ln_can_bad_id := ln_can_bad_id + 1;
                  END IF;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
               END IF;
          END IF;
       END IF;
       n_for_ant := ls_tip_doc;
       n_inf_ant := ls_tip_inf;  -- JCFS 2012-01: Se guarda el último tipo de información
       ln_num_sec_ant := ln_num_sec;

     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         EXIT;
     END;
   END LOOP;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD, DIA_REFER, COD_SEC_ENVIO)
   VALUES (i_anopro, i_mespro, i_cod_reporte, '22', ln_paso, SYSDATE, 'PROCESO DE PRE-VALIDACIÓN - FIN DE LECTURA DE REGISTROS DE DATOS', i_codemp, i_dia_refer, i_cod_sec_envio);
   COMMIT;

   -- Se ha omitido el "Tipo de Formulario" 1
   IF n_reporte = 'RCD' OR n_reporte = 'RCT' THEN
      IF n_reporte = 'RCD' AND n_for_ant = 0 THEN
         n_es_cancelatorio := 1;
         n_control := 1;
         IF arr_activ (n_control) = 'S' THEN
            IF arr_tipcon(n_control) = 'V' THEN
               n_hay_error := 1;
               ln_can_bad_sal := ln_can_bad_sal + 1;
            END IF;
            ln_num_sec_reg := 0;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         END IF;
      ELSE
        IF n_for_ant = 0 AND ls_tip_doc = '2' THEN
            n_control := 1;
            IF arr_activ (n_control) = 'S' THEN
               IF arr_tipcon(n_control) = 'V' THEN
                  n_hay_error := 1;
                  ln_can_bad_sal := ln_can_bad_sal + 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
            END IF;
        END IF;
      END IF;

--    Se ha omitido el "Tipo de Formulario" 2
      IF n_for_ant = 1 THEN
         n_control := 2;
         IF arr_activ (n_control) = 'S' THEN
            IF arr_tipcon(n_control) = 'V' THEN
                n_hay_error := 1;
            END IF;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
         END IF;
      -- JCFS 2012-01: Se valida que exista Identificación y Saldos de Totales
      ELSE
         IF n_inf_ant = 1 THEN
            -- Se ha omitido los Saldos de Totales
            n_control := 4;
            -- Se lee la línea siguiente, que debe ser de Saldos
            begin
               UTL_FILE.GET_LINE(file_id, ls_registro);
            exception
               WHEN OTHERS THEN
                  IF arr_activ (n_control) = 'S' THEN
                     IF arr_tipcon(n_control) = 'V' THEN
                        n_hay_error := 1;
                     END IF;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
                  END IF;
            end;
            IF (Substr(ls_registro, 1,1) in ('chr(13)', 'chr(10)', chr(26), ' ')) OR
               Substr(ls_registro, 1,1) IS NULL OR
               Substr(ls_registro, 1,1) <> '2' OR
               Substr(ls_registro, 2,1) <> '2' THEN
               IF arr_activ (n_control) = 'S' THEN
                  IF arr_tipcon(n_control) = 'V' THEN
                     n_hay_error := 1;
                  END IF;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
               END IF;
            END IF;
         ELSE -- n_inf_ant <> 1, es decir, debe ser 2
            -- Se ha omitido la Identificación de Totales
            n_control := 3;
            IF arr_activ (n_control) = 'S' THEN
               IF arr_tipcon(n_control) = 'V' THEN
                   n_hay_error := 1;
               END IF;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
            END IF;
         END IF;
      END IF;
   END IF;

   IF n_reporte = 'RTC' THEN
--    Se ha omitido el "Tipo de Formulario" 1
      IF  n_for_ant = 0 THEN
          n_control := 1;
          IF arr_activ (n_control) = 'S' THEN
             IF arr_tipcon(n_control) = 'V' THEN
                n_hay_error := 1;
                ln_can_bad_sal := ln_can_bad_sal + 1;
             END IF;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, ln_num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
          END IF;
      END IF;
   END IF;

-- Cierra el archivo
   UTL_FILE.FCLOSE(file_id);
   lb_is_open  := UTL_FILE.IS_OPEN(file_id);
   IF lb_is_open THEN
     DBMS_OUTPUT.PUT_LINE ('Archivo no se pudo cerrar');
   END IF;
   COMMIT;

--------------------------------------------------------------
-- PROCESO DE EJECUCION DEL CONTROL 21
-- FVSH 20050614: Cliente/Deudor con nombres diferentes y el mismo codigo unico.
   n_control := 21;
   IF arr_activ (n_control) = 'S' and n_reporte = 'RTC' THEN
      n_temp_cod_unico_ant   := NULL;
      n_temp_nom_cliente_ant := NULL;
      FOR cur in cur_b_rtc (n_reporte) LOOP
          IF cur.cod_unico_clie = n_temp_cod_unico_ant AND cur.nom_cliente <> n_temp_nom_cliente_ant THEN
              arr_error (n_control) := arr_error (n_control) + 1;
              IF arr_nivval (n_control) = 1 THEN
                 IF arr_tipcon(n_control) = 'V' THEN
                    n_hay_error := 1;
                    ln_can_bad_id := ln_can_bad_id + 1;
                 END IF;
                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
              ELSE
                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
              END IF;
          END IF;
          n_temp_cod_unico_ant   := cur.cod_unico_clie;
          n_temp_nom_cliente_ant := cur.nom_cliente;
      END LOOP;
   END IF;

   n_control := 21;
   IF arr_activ (n_control) = 'S' and n_reporte = 'RCD' THEN
      FOR cur in cur_b (n_reporte) LOOP
          arr_error (n_control) := arr_error (n_control) + 1;
          IF arr_nivval (n_control) = 1 THEN
             IF arr_tipcon(n_control) = 'V' THEN
                n_hay_error := 1;
                ln_can_bad_id := ln_can_bad_id + 1;
             END IF;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'PV', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
          ELSE
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte, i_dia_refer, i_cod_sec_envio);
          END IF;
      END LOOP;
   END IF;

   -- Actualiza CRA_VAL_CONTROLES_X_EMPRESA
   -- JCFS 11/07/2011: Si hay errores en la Cabecera del RCT, también actualizan CRA_VAL_CONTROLES_X_EMPRESA
   IF n_hay_error = 1 OR n_hay_error_cab_rct = 1 THEN
      SP_GRABA_CONTROL_X_EMP_PV (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
      n_hay_res_controles := 1;
   END IF;

   IF n_es_cancelatorio = 0 THEN
      IF n_hay_error = 1 THEN
         n_observaciones := 'OBS: Pre-Validacion con Observaciones';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', n_observaciones, i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
      ELSE
         n_observaciones := 'MSJ: Pre-Validacion OK';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', n_observaciones, i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'W', i_dia_refer, i_cod_sec_envio);
      END IF;
   ELSE
      n_observaciones := 'OBS: Pre-Validacion con observacion cancelatoria, se rechaza el archivo. Ver Resultados ';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
      SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
   END IF;
   COMMIT;

   -- JCFS 17/10/2011: Se actualiza la etapa del RCD en las tablas de SUCAVE
   IF n_reporte = 'RCD' THEN
      SELECT tip_entidad, to_char(last_day(to_date(i_anopro||i_mespro||'01', 'yyyymmdd')), 'dd')
        INTO ls_tipentidad, ls_dia_refer
        FROM ays_ent_vigilada
       WHERE cod_ent_vig = i_codemp;

      ln_paso := ln_paso + 1;
      INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD, DIA_REFER, COD_SEC_ENVIO)
      VALUES (i_anopro, i_mespro, i_cod_reporte, '22', ln_paso, SYSDATE, 'PROCESO DE PRE-VALIDACIÓN - PREVIO A LA LLAMADA A PK_SUCAVI', i_codemp, i_dia_refer, i_cod_sec_envio);
      COMMIT;

      ln_resultado := PK_SUCAVI.SF_GET_ESTADO_Y_NUM_PROC ( '0106', '01', i_anopro, i_mespro, ls_dia_refer, i_codemp,
                                                           ls_tipentidad, ls_est_proc, ln_num_proc, ls_ingreso_ext );
      IF ln_resultado = 1 THEN
         ln_resultado := PK_SUCAVI.SF_SET_ESTADO_PROC ( '0106', '01', i_anopro, i_mespro, ls_dia_refer,
                                                        i_codemp, ls_tipentidad, 'PV', ln_num_proc );
      END IF;
   END IF;

   SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                 ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                 ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD, DIA_REFER, COD_SEC_ENVIO)
   VALUES (i_anopro, i_mespro, i_cod_reporte, '23', ln_paso, SYSDATE, 'PROCESO DE PRE-VALIDACIÓN - FIN', i_codemp, i_dia_refer, i_cod_sec_envio);
   COMMIT;

   -- JCFS 2018-02: Fin de "exoneración" del registro de auditoría
   PKG_APPLICATION_INFO.Fin;

   IF n_es_cancelatorio = 0 AND n_hay_error = 0 THEN
      SP_VAL_CARGA_A_SISTEMA ( i_cod_form, i_cod_anexo, i_anopro, i_mespro, i_codemp, i_fileloc, n_reporte, i_dia_refer, i_cod_sec_envio );
      -- ENVIA A PROCESAR AVALES Y MANCOMUNOS
      -- 13/03/2009 No procesar validacion de RCA a pedido de DCR
      -- SP_VAL_PROCESA_RCA (i_cod_form, i_cod_anexo, i_anopro, i_mespro, i_codemp, i_fileloc, n_reporte, i_dia_refer, i_cod_sec_envio);
   ELSE
      RETURN;
   END IF;

EXCEPTION
-- Finaliza con error
   WHEN NO_DATA_FOUND THEN
        n_observaciones := 'ERROR: UTL_FILE: No encontro datos'||'  '||substr(ls_error,1,220);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'Fin de registro', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'Fin de registro', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN UTL_FILE.INVALID_PATH THEN
        n_observaciones := 'ERROR: UTL_FILE: Ruta no valida'||'  '||substr(ls_error,1,220);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'ERROR: UTL_FILE: Ruta no valida', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'ERROR: UTL_FILE: Ruta no valida', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN UTL_FILE.READ_ERROR THEN
        n_observaciones := 'ERROR: UTL_FILE: Error en lectura'||'  '||substr(ls_error,1,220);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'ERROR: UTL_FILE: Error en lectura', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'ERROR: UTL_FILE: Error en lectura', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN UTL_FILE.WRITE_ERROR THEN
        UTL_FILE.FCLOSE(file_id);
        n_observaciones := 'ERROR: UTL_FILE: Error en escritura'||'  '||substr(ls_error,1,220);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'ERROR: UTL_FILE: Error en escritura', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'ERROR: UTL_FILE: Error en escritura', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN OTHERS THEN
        ls_error := SQLERRM;
        n_mensaje := 'ERROR: Error luego de secuencia => Ident: '|| ln_can_reg_id || '   Mov: '|| ln_can_reg_sal || '   ' || substr(ls_error,1,145);
        n_observaciones := substr(ls_error,1,255);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

        IF n_hay_error = 1 AND n_hay_res_controles = 0 THEN
--          Actualiza CRA_VAL_CONTROLES_X_EMPRESA
            IF n_hay_error = 1 THEN
               SP_GRABA_CONTROL_X_EMP_PV (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
            END IF;
        END IF;
END;

----------------------------------------------------------------------------------------------------------------------

PROCEDURE SP_VAL_VALIDACION_RCD
         (i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2)
-- --------------------------------------------------------------------------------------------------------------------
-- Autor : Jaime López-Torres M. - Diciembre 2001
-- Motivo: Realiza la validación de los datos del movimiento RCD.
-- --------------------------------------------------------------------------------------------------------------------
-- Revisiones:
--     Fecha        Autor                                           Descripción
-- -------------  --------------------------  -------------------------------------------------------------------------
-- 04/02/2003     Jaime López-Torres M.       Se incorpora la cuenta 8103 y divisionarias (Cuentas Incobrables Castigadas)
--                                            en la validación del control 183.
-- 21/02/2003     Jaime López-Torres M.       Se incorpora función SF_SEC_VALID_IDENTIF_RCD.
-- 12/06/2003     Jaime López-Torres M.       Condición en días se amplía de 3 a 4 caracteres.
-- 13/06/2003     Jaime López-Torres M.       Se incorpora la cuenta 1406 y divisionarias(Créditos en Cobranza Judicial)
--                                            en la validación del control 183.
-- 22/09/2003     Jaime López-Torres M.       Se incluye tipo de documento '9' (Extranjero no residente).
-- 22/12/2003     Jaime López-Torres M.       A solicitud de Informática (Jenny Ortiz) se inhibe el acceso a las
--                                            cuentas contables fijas.
---------------------------------------------------------------------------------
-- 04/04/2004     Francisco Vite Shelton      Adecuacion a la resolucion 808
-- --------------------------------------------------------------------------------------------------------------------
-- xx/07/2010     Juan Carlos Fernández S.    Se adecúa todo el SP a la Resolución 11356
-- --------------------------------------------------------------------------------------------------------------------
IS
-------------------    -------------------
-- FVSH    2006-11-21
-- Se cambia la validacion segmentando la carga a memoria del cursor
-- El cursor obtiene todas las iteraciones que se darán en el proceso de
-- validacion de acuerdo a un registros base, en este caso será 100,000

ln_i                NUMBER(3);
ln_iter             NUMBER(3);
ln_reg_base         NUMBER(10);
ln_num_sec_reg_min  NUMBER(10);
ln_num_sec_reg_max  NUMBER(10);
lv_clasif_reg_mov   cri_persona.tip_reg_mv%type;

CURSOR cur_iteraciones IS
SELECT trunc(t.max_num_sec/t.reg_base) + 1 as num_iter
      ,reg_base
      ,t.max_num_sec
 FROM (
       select max(i.num_sec_reg) as max_num_sec
             ,50000             as reg_base
         from cra_valid_identif_rcd i
        where i.ano_refer   = i_anopro
          and i.mes_refer   = i_mespro
          and i.cod_empresa = i_codemp
       ) t
     ;
------------------------------------------

-- Cursor para obtener la lista de controles del RCD que intervienen en un periodo determinado.
  CURSOR cur_a IS
  SELECT cod_control,
         ind_activ_control,
         tip_control_val
    FROM CRA_CONTROL_HIS_VALIDACION
   WHERE ano_refer   = i_anopro
     AND mes_refer   = i_mespro
     AND cod_reporte = 'RCD'
     AND cod_control > 0;

-- Lista de Deudores reportados x entidad y periodo.
  CURSOR cur_b IS
  SELECT num_sec_reg,
         tip_informacion,
         num_sec,
         cod_sbs,
         cod_unico_clie,
         cod_ciiu3,
         cod_sunarp,
         tip_doc_trib,
         replace(num_doc_trib,'.','') as num_doc_trib,
         tip_doc_iden,
         num_doc_iden,
         tip_persona,
         tip_residencia,
         tip_clasif_clie,
         tip_magnitud,
         ind_accionista,
         tip_rellab,
         cod_pais,
         nom_sigla,
         nom_cliente,
         nom_cliente as ape_paterno,
         ape_materno,
         ape_casada,
         primer_nombre,
         segundo_nombre,
         genero,
         estado_civil,
         ind_riesgo_camb_cred,
         ind_atraso,
         clasif_interna_ent,
         -- JCFS 26/05/2010: Nuevos campos de la Resolución 11356
         cla_deu_sin_ali,
         fec_nac,
         tip_doc_iden_com,
         num_doc_iden_com,
         -- JAGJ 31/07/2013: Nuevos campos de la Resolución 11356
         ind_sobreendeudamiento
    FROM CRA_VALID_IDENTIF_RCD
   WHERE ano_refer   = i_anopro
     AND mes_refer   = i_mespro
     AND cod_empresa = i_codemp
     AND num_sec_reg >= ln_num_sec_reg_min
     AND num_sec_reg <= ln_num_sec_reg_max
    -- AND num_sec_reg > 0    --    FVSH 20061121
     AND tip_formulario = '1'
ORDER BY num_sec_reg;

-----
-- NOM_CLIENTE: es el nombre tal como es informado por la entidad no se aprecia que este sea descompuesto para la validacion
------------------------------
-- Para tener un mayor analisis en la validacion de los nombres se generan
-- dos variables para contener el nombre del cliente para el caso de personas naturales.
   lv_cur_nom_cliente           VARCHAR2(280);
   lv_cur_nom_cliente_casada    VARCHAR2(280);
-----------------------------------------

-- Saldos reportados por cada deudor de una entidad y un periodo determinado. El enlace es la secuencia.
  CURSOR cur_c (p_num_sec_reg VARCHAR2) IS
  SELECT num_sec_reg,
         num_sec_cta,
         tip_informacion,
         num_sec,
         cod_oficina,
         cod_ubigeo_ofic,
         cod_cuenta,
         cod_tipo_cre,
         val_saldo,
         can_dias,
         cond_esp_cta,  -- nuevos campos ingresados Res. 808
         cond_disponibilidad,
         fac_conv_cred  -- JCFS 26/05/2010: Nuevo campo de la Resolución 11356
    FROM CRA_VALID_SALDOS_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND num_sec_reg    = p_num_sec_reg
     AND tip_formulario = '1'
ORDER BY num_sec_cta;

----------------------------------------------------------------------
-- FVSH 2004-07-20: CAMBIOS 808
-- Cursor que obtiene las cuentas del saldo de un deudor en un determinado
-- periodo. Busca la asociacion de estas cuentas a dos conceptos:
--         (a) Total Deuda, Concepto 53
--         (b) Castigos, Concepto 68
-- con esto se valida que la clasificacion '8' no este asociada a una cuenta de estos conceptos. Es decir cada
-- vez que se reporte una cuenta relacionada a los conceptos descritos
-- la clasificaion tiene que ser "0,1,2,3,4"
------------------------                    --------------------------
  CURSOR cur_clasif (p_num_sec_reg VARCHAR2) IS
  SELECT c.cod_cta
       , c.cod_tipo_cre
       , c.cod_situacion_cre
       , c.cod_modalidad_cre
   FROM cra_rel_his_concepto_cuenta c
  WHERE ( c.cod_concepto = 53 or c.cod_concepto = 68 )
    AND c.tip_plan = 'MF'
    AND c.num_version = 1
    AND c.ano_refer = i_anopro
    AND c.mes_refer = i_mespro
    AND c.cod_cta IN (  Select s.cod_cuenta
                          from CRA_VALID_SALDOS_RCD s
                         where s.ano_refer      = i_anopro
                           and s.mes_refer      = i_mespro
                           and s.cod_empresa    = i_codemp
                           and s.num_sec_reg    = p_num_sec_reg
                           and s.tip_formulario = '1'
                      )
  ORDER BY c.cod_cta;

-- Total de saldos reportados por cada cuenta en todos los saldos de los clientes.
  CURSOR cur_d IS
  SELECT cod_cuenta,
         cod_tipo_cre,
         to_number(can_dias) can_dias,
         SUM(to_number(val_saldo)) val_saldo
    FROM CRA_VALID_SALDOS_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND num_sec_reg    > 0
     AND tip_formulario = '1'
GROUP BY cod_cuenta, cod_tipo_cre, to_number(can_dias)
ORDER BY cod_cuenta, cod_tipo_cre, to_number(can_dias) ;

-- Saldos Totales reportados a nivel de cuenta
  CURSOR cur_e IS
  SELECT num_sec_reg,
         max(num_sec_cta) num_sec_cta,
         cod_cuenta,
         cod_tipo_cre,
         to_number(can_dias) can_dias,
         sum(nvl(to_number(val_saldo),0)) val_saldo
    FROM CRA_VALID_SALDOS_RCD
   WHERE ano_refer       = i_anopro
     AND mes_refer       = i_mespro
     AND cod_empresa     = i_codemp
     AND num_sec_reg     > 0
     AND tip_formulario  = '2'
     AND tip_informacion = '2'
GROUP BY cod_cuenta, cod_tipo_cre, to_number(can_dias), num_sec_reg
ORDER BY cod_cuenta, cod_tipo_cre, to_number(can_dias) ;

-- JCFS 2012-02: Diferencias entre el Detalle y el Resumen de Saldos
  CURSOR cur_f IS
  SELECT nvl(dt2.num_sec_reg, dt1.num_sec_reg) AS num_sec_reg,
         nvl(dt2.num_sec_cta, dt1.num_sec_cta) AS num_sec_cta,
         nvl(dt2.cod_cuenta, dt1.cod_cuenta) AS cod_cuenta,
         nvl(dt2.cod_tipo_cre, dt1.cod_tipo_cre) AS cod_tipo_cre,
         nvl(dt2.val_saldo, dt1.val_saldo) AS val_saldo
    FROM ( SELECT max(num_sec_reg) AS num_sec_reg, max(num_sec_cta) AS num_sec_cta,
                  cod_cuenta, cod_tipo_cre, SUM(to_number(val_saldo)) AS val_saldo
             FROM CRA_VALID_SALDOS_RCD
            WHERE ano_refer      = i_anopro
              AND mes_refer      = i_mespro
              AND cod_empresa    = i_codemp
              AND num_sec_reg    > 0
              AND tip_formulario = '1'
            GROUP BY cod_cuenta, cod_tipo_cre
         ) dt1
         LEFT OUTER JOIN
         ( SELECT max(num_sec_reg) AS num_sec_reg, max(num_sec_cta) AS num_sec_cta,
                  cod_cuenta, cod_tipo_cre, sum(nvl(to_number(val_saldo),0)) AS val_saldo
             FROM CRA_VALID_SALDOS_RCD
            WHERE ano_refer       = i_anopro
              AND mes_refer       = i_mespro
              AND cod_empresa     = i_codemp
              AND num_sec_reg     > 0
              AND tip_formulario  = '2'
              AND tip_informacion = '2'
            GROUP BY cod_cuenta, cod_tipo_cre
         ) dt2 ON dt1.cod_cuenta = dt2.cod_cuenta AND dt1.cod_tipo_cre = dt2.cod_tipo_cre
   WHERE nvl(dt2.val_saldo, 0) <> nvl(dt1.val_saldo, 0)
   UNION
  SELECT nvl(dt2.num_sec_reg, dt1.num_sec_reg) AS num_sec_reg,
         nvl(dt2.num_sec_cta, dt1.num_sec_cta) AS num_sec_cta,
         nvl(dt2.cod_cuenta, dt1.cod_cuenta) AS cod_cuenta,
         nvl(dt2.cod_tipo_cre, dt1.cod_tipo_cre) AS cod_tipo_cre,
         nvl(dt2.val_saldo, dt1.val_saldo) AS val_saldo
    FROM ( SELECT max(num_sec_reg) AS num_sec_reg, max(num_sec_cta) AS num_sec_cta,
                  cod_cuenta, cod_tipo_cre, SUM(to_number(val_saldo)) AS val_saldo
             FROM CRA_VALID_SALDOS_RCD
            WHERE ano_refer      = i_anopro
              AND mes_refer      = i_mespro
              AND cod_empresa    = i_codemp
              AND num_sec_reg    > 0
              AND tip_formulario = '1'
            GROUP BY cod_cuenta, cod_tipo_cre
         ) dt1
         RIGHT OUTER JOIN
         ( SELECT max(num_sec_reg) AS num_sec_reg, max(num_sec_cta) AS num_sec_cta,
                  cod_cuenta, cod_tipo_cre, sum(nvl(to_number(val_saldo),0)) AS val_saldo
             FROM CRA_VALID_SALDOS_RCD
            WHERE ano_refer       = i_anopro
              AND mes_refer       = i_mespro
              AND cod_empresa     = i_codemp
              AND num_sec_reg     > 0
              AND tip_formulario  = '2'
              AND tip_informacion = '2'
            GROUP BY cod_cuenta, cod_tipo_cre
         ) dt2 ON dt1.cod_cuenta = dt2.cod_cuenta AND dt1.cod_tipo_cre = dt2.cod_tipo_cre
   WHERE nvl(dt2.val_saldo, 0) <> nvl(dt1.val_saldo, 0)
   ORDER BY num_sec_reg, num_sec_cta;

-- Obtiene lista de clientes que cuenten con codigos reemplazados
  CURSOR cur_g IS
  SELECT TO_NUMBER(A.cod_sbs) AS cod_sbs_rplzdo,
         C.cod_sbs_ult_rplzte
    FROM CRA_VALID_IDENTIF_RCD  "A",
         CRI_PERSONA            "B",
         CRI_REEMPLAZO          "C"
   WHERE A.ano_refer          = i_anopro
     AND A.mes_refer          = i_mespro
     AND A.cod_empresa        = i_codemp
     AND A.cod_sbs            > 0
     AND B.cod_sbs            = TO_NUMBER(A.cod_sbs)
     AND B.tip_condicion      = 'RPZDO'
     AND C.cod_sbs_remplazado = B.COD_SBS;

------------------------------------------
-- FVSH    2005-05-16
-- Se cambia la validacion del control 197, no se toma en cuenta la calificacion
-- El cursor obtiene todos los Codigos SBS Duplicados y que sean diferentes a cero
  CURSOR cur_codsbs_duplicados IS
  SELECT cod_sbs,
         count(*) AS nro_secs
    FROM CRA_VALID_IDENTIF_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND cod_sbs        > 0
     AND tip_formulario = '1'
     AND tip_persona   <> '3' -- JCFS 13/10/2010: Se filtra las personas de tipo Mancomunadas por estar pendiente de definición
   GROUP BY cod_sbs
  HAVING COUNT(1) > 1;
-------------------    -------------------
lv_cod_sbs  cra_valid_identif_rcd.cod_sbs%type;
-------------------    -------------------
-- Obtiene las secuencias de los cod_sbs duplicados
CURSOR CUR_SEC_DUPLICADAS IS
SELECT NUM_SEC_REG
  FROM CRA_VALID_IDENTIF_RCD
 WHERE ano_refer   = i_anopro
   AND mes_refer   = i_mespro
   AND cod_empresa = i_codemp
   AND cod_sbs     = lv_cod_sbs
   AND tip_formulario = '1'
   AND tip_persona   <> '3'; -- JCFS 13/10/2010: Se filtra las personas de tipo Mancomunadas por estar pendiente de definición

------------------------------------------
-- Definición de Arreglos
   TYPE def_arr_error  IS VARRAY(252) OF   NUMBER(07);
   TYPE def_arr_activ  IS VARRAY(252) OF VARCHAR2(01);
   TYPE def_arr_tipcon IS VARRAY(252) OF VARCHAR2(01);

-- Definición de Arreglos para longitud de nombre
-- FVSH 808 permite controlar la longitude de los campos ID
   TYPE def_arr_long_nombre  IS VARRAY(6) OF   NUMBER(03);
   TYPE def_arr_flag_valida_nombre  IS VARRAY(5) OF   NUMBER(03);

-- Definición de variables
   arr_error           def_arr_error  := def_arr_error (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);

   arr_activ           def_arr_activ  := def_arr_activ ('','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','');

   arr_tipcon          def_arr_tipcon := def_arr_tipcon('','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','');

--- FVSH 808  nuevo arreglo definido
   long_nombre              def_arr_long_nombre  := def_arr_long_nombre (0,0,0,0,0,0);
   ln_flag_valida_nombre    def_arr_flag_valida_nombre  := def_arr_flag_valida_nombre (0,0,0,0,0);

/*--
La estructura de este areglo mantendra la longitud de los nombres
para las personas naturales
 (1)  : Indicador del estado de la validacion
 (2)  : Long. Apellido Paterno
 (3)  : Long. Apellido Materno
 (4)  : Long. Apellido de Casada
 (5)  : Long. Primer Nombre
 (6)  : Long. Segundo Nombre
--*/

   n_cont                 NUMBER(10);
   n_cont_total           NUMBER(08);
   n_codigo_valido        NUMBER(01);
   n_control              NUMBER(03);
   n_reg_altas            NUMBER(07);
   n_reg_no_alertas       NUMBER(07);
   n_loop                 NUMBER(03);
   n_blancos              NUMBER(03);
   n_error                VARCHAR2(2000);
   n_num_ruc              VARCHAR2(11);
   n_num_ruc11            VARCHAR2(11);
   n_hay_error            NUMBER(01);
   n_num_seq_val          NUMBER(03);
   n_tip_persona          VARCHAR2(01);
   n_cod_ide_pro          NUMBER(3);
   n_cod_est_pro          VARCHAR2(1);
   n_cod_etapa            VARCHAR2(02);
   n_observaciones        VARCHAR2(255);
   n_tip_condicion        VARCHAR2(5);
   n_no_encuentra         NUMBER(1);
   n_long_cod_unico       NUMBER(2);
   n_cod_unico_clie_aux   VARCHAR2(20);
   n_ind_fijo_nombre      VARCHAR2(1);
   n_ind_fijo_ruc         VARCHAR2(1);
   n_ind_fijo_doc_id      VARCHAR2(1);
   n_ind_fijo_sunarp      VARCHAR2(1);
   n_ind_fijo_ciiu3       VARCHAR2(1);
   n_valor                BOOLEAN;
   n_sec_identif          NUMBER(08);
   n_sec_saldos           NUMBER(08);
   n_cod_sbs              NUMBER(10);
   n_cod_sbs_informado    NUMBER(10);
   n_cod_sbs_ruc8         NUMBER(10);
   n_cod_sbs_ruc11        NUMBER(10);
   n_cod_sbs_nat          NUMBER(10);
   n_cod_sbs_entidad      NUMBER(10);
   n_cod_sbs_nom_cliente  NUMBER(10);
   n_cod_sbs_sigla        NUMBER(10);
   n_cod_sbs_sigla_dup    NUMBER(03);
   n_cod_sbs_nombre_dup   NUMBER(03);
   n_cod_pais             VARCHAR2(04);
   n_cod_sbs_ult_rplzte   NUMBER(10);
   n_cod_actividad_econ   VARCHAR2(04);
   n_nom_sigla            VARCHAR2(20);
   n_tip_docto_ident_maes VARCHAR2(03);
   n_num_docto_ident_maes VARCHAR2(15);
   n_nom_cliente_maes     VARCHAR2(280);
   n_cod_onrp_maes        VARCHAR2(15);
   -- Variables de identificacion del cliente
   s_nom_cliente_maes_casada     cri_persona_nat.ape_casada%type;
   s_nom_cliente_maes_ape_casada cri_persona_nat.ape_casada%type;
   s_sexo_maes                   cri_persona_nat.tip_sexo%type;
   s_estado_civil_maes           cri_persona_nat.tip_estado_civil%type;
   ln_validacion                 NUMBER(3);
   ln_long_nombre                NUMBER(4);
   ln_dif_long_nombre            NUMBER(4);
   lv_tip_docto_id_mae_ctr_62    cri_persona_nat.tip_docto_ident%type;
   lv_num_docto_id_mae_ctr_62    cri_persona_nat.num_docto_ident%type;
   lv_num_ruc_mae_ctr_62         cri_persona.num_ruc%type;
   lv_num_ruc11_mae_ctr_62       cri_persona.num_ruc11%type;
   lv_tip_persona_mae_ctr_62     cri_persona.tip_persona%type;
   n_val_saldo          NUMBER(18,2);  -- JCFS 06/05/2010: Se aumenta la precisión de (15,2) a (18,2)
   n_val_saldo_t        NUMBER(18,2);  -- JCFS 06/05/2010: Se aumenta la precisión de (15,2) a (18,2)
   n_val_saldo_cli      NUMBER(18,2);  -- JCFS 06/05/2010: Se aumenta la precisión de (15,2) a (18,2)
   n_lim_min_dias       NUMBER(04);
   n_lim_max_dias       NUMBER(06);  -- JCFS 19/10/2009: Se aumenta la precision a 6 para evitar error en el Control 183
   n_can_dias           NUMBER(04);
   n_candia             NUMBER(04);
   n_candia_ant         NUMBER(04);
   n_cod_cuenta         VARCHAR2(14);
   n_cod_cuenta_ant     VARCHAR2(14);
   n_cod_tipo_cre       VARCHAR2(02);  -- JCFS 06/05/2010: Se aumenta el tamaño de 1 a 2
   n_cod_tipo_cre_ant   VARCHAR2(02);  -- JCFS 06/05/2010: Se aumenta el tamaño de 1 a 2
   n_ind_cta_rcd        VARCHAR2(01);
   n_num_sec_reg        NUMBER(08);
   n_num_sec_cta        NUMBER(08);
   n_codigo_unico_difer NUMBER(01);
   n_ruc_iguales_u_omit NUMBER(01);
   n_reporte            VARCHAR2(3);
   ld_fec_nac           DATE;          -- JCFS 26/05/2010: Nueva variable utilizada para validar la Fecha de Nacimiento (Res. 11356)
   ln_paso              NUMBER;
   ls_estado_entidad    VARCHAR2(02);
   ls_ind_reporta_rcd   VARCHAR2(01);
   ls_ubigeo_oficina    VARCHAR2(06);
   ls_tip_est_oficina   VARCHAR2(02);
   ln_count        number(6);

   /* JCFS 12/09/2011: Se utilizará una tabla indexada para consultar las Oficinas */
   type typTableOficinas IS TABLE OF ays_oficina%ROWTYPE;
   colTableOficinas typTableOficinas;
   type typInxOficinas IS TABLE OF ays_oficina%ROWTYPE INDEX BY ays_oficina.num_oficina%TYPE;
   colInxOficinas typInxOficinas;

BEGIN
   -- JCFS 2018-02: Inicio de "exoneración" del registro de auditoría
   PKG_APPLICATION_INFO.Inicio;

   ln_validacion      := 0;
   n_cont             := 0;
   n_cod_ide_pro      := 400;
   n_cod_etapa        := '05';
   n_hay_error        := 0;
   n_cod_est_pro      := 'P';
   n_reporte := 'RCD';

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '51', ln_paso, SYSDATE, 'PROCESO DE VALIDACIÓN - INICIO', i_codemp);
   COMMIT;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

-- Borra registros de la tabla CRA_VAL_CONTROLES_X_EMPRESA
-- FVSH ¿ Es necesario Borrarlos o se debe mantener un historico ?
   SP_VAL_BORRA_CONTROLES_EMPRESA (n_reporte, i_anopro, i_mespro, i_codemp, '01', '01');
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_VAL_BORRA_CONTROLES_EMPRESA');
   n_cod_ide_pro := 400;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros de validación en la tabla CRA_VALID_ERRORES_RCD   -- FVSH   "CRA_VAL_CONTROLES_RCD_X_SEC"
   SP_BORRA_VALID_ERRORES (n_reporte,i_anopro, i_mespro, i_codemp, 'VA');
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VALID_ERRORES_' || n_reporte || '_VA');
   n_cod_ide_pro := 400;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Actualiza CRA_NRO_VALIDACION
   BEGIN
     SELECT MAX(num_seq_val)
       INTO n_num_seq_val
       FROM CRA_NRO_VALIDACION
      WHERE ano_refer    = i_anopro
        AND mes_refer    = i_mespro
        AND cod_reporte  = n_reporte
        AND cod_empresa  = i_codemp;
     n_num_seq_val := n_num_seq_val + 1;
     INSERT INTO CRA_NRO_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_seq_val, cod_est_val, fec_ini_val, fec_fin_val )
          VALUES (i_anopro, i_mespro, n_reporte, i_codemp, n_num_seq_val, 'P', SYSDATE, NULL);
   EXCEPTION
     WHEN OTHERS THEN
          n_num_seq_val := 1;
          INSERT INTO CRA_NRO_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_seq_val, cod_est_val, fec_ini_val, fec_fin_val )
               VALUES (i_anopro, i_mespro, n_reporte, i_codemp, n_num_seq_val, 'P', SYSDATE, NULL);
   END;
   COMMIT;

-- Verificación del número de controles de validación
   BEGIN
     SELECT COUNT(1)
       INTO n_tot_controles
       FROM CRA_CONTROL_HIS_VALIDACION
      WHERE ano_refer   = i_anopro
        AND mes_refer   = i_mespro
        AND cod_reporte = n_reporte;
   EXCEPTION
      WHEN OTHERS THEN
           n_error := SQLERRM;
           n_cod_est_pro := 'E';
           SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
           SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
           SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
           RETURN;
   END;

   IF n_tot_controles > 252 THEN
      n_observaciones := 'ERROR: Número de controles de validación excede implementación. Dar aviso a la Gerencia de Informática';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Obtiene Datos de Controles
   FOR cur in cur_a LOOP
       arr_activ  (cur.cod_control) := cur.ind_activ_control;
       arr_tipcon (cur.cod_control) := cur.tip_control_val;
       arr_error  (cur.cod_control) := 0;
   END LOOP;

   n_val_saldo_cli := 0;
   n_sec_saldos    := 0;
   n_sec_identif   := 0;
   n_codigo_valido := 1;


  /* JCFS 03/08/2010: Para validación de Países -> Se carga la Nested Table y luego se recorre la misma para cargar la Tabla Indexada (Associative Array) */
  SELECT *
    BULK COLLECT INTO colTableAdmElemento
    FROM adm_elemento
   WHERE cod_tabla = 'COD_PAIS_ISO3166';

  IF colTableAdmElemento.COUNT < 1 THEN
      n_observaciones := 'ERROR: No se encontró Elementos en la Tabla de Países ISO. Dar aviso.';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
  END IF;

  FOR i IN colTableAdmElemento.FIRST..colTableAdmElemento.LAST LOOP
      colInxAdmElemento(colTableAdmElemento(i).cod_elemento) := colTableAdmElemento(i).des_elemento;
  END LOOP;


  /* JCFS 12/08/2010: Para validación de Condición en Días -> Se carga la Nested Table y luego se recorre la misma para cargar la Tabla Indexada (Associative Array) */
  SELECT *
    BULK COLLECT INTO colTableCondicionDias
    FROM cra_rel_condicion_cuenta;

  IF colTableCondicionDias.COUNT < 1 THEN
     n_observaciones := 'ERROR: No se encontró Elementos en la Tabla de Rangos de Condición en Días. Dar aviso.';
     n_cod_est_pro := 'E';
     SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
     SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
     SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
     RETURN;
  END IF;

  FOR i IN colTableCondicionDias.FIRST..colTableCondicionDias.LAST LOOP
      colInxCondicionDias(colTableCondicionDias(i).cuenta) := colTableCondicionDias(i);
  END LOOP;


  -- JCFS 12/09/2011: Se obtiene el estado de la entidad, que será utilizado en la validación de oficinas cerradas
  SELECT tip_est_ent_vig INTO ls_estado_entidad
    FROM ays_ent_vigilada
   WHERE cod_ent_vig = i_codemp;


  /* JCFS 12/09/2011: Para validación de Oficinas -> Se carga la Nested Table y luego se recorre la misma para cargar la Tabla Indexada (Associative Array) */
  SELECT *
    BULK COLLECT INTO colTableOficinas
    FROM ays_oficina
   WHERE cod_ent_vig = i_codemp;

  IF colTableOficinas.COUNT < 1 THEN
     n_observaciones := 'ERROR: No se encontró Elementos en la Tabla de Oficinas de la Entidad. Dar aviso.';
     n_cod_est_pro := 'E';
     SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
     SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa, n_cod_est_pro);
     SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
     RETURN;
  END IF;

  FOR i IN colTableOficinas.FIRST..colTableOficinas.LAST LOOP
      colInxOficinas(colTableOficinas(i).num_oficina) := colTableOficinas(i);
  END LOOP;


---------------   CALCULO DE LAS ITERACIONES  -----------     FVSH 20061121
ln_reg_base := 0;
ln_num_sec_reg_min := 0;
ln_num_sec_reg_max := 0;

FOR cur_iter IN cur_iteraciones LOOP
    ln_iter     := cur_iter.num_iter;
    ln_reg_base := cur_iter.reg_base;
END LOOP;


ln_paso := ln_paso + 1;
INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
VALUES (i_anopro, i_mespro, 'RCD', '51', ln_paso, SYSDATE, 'PROCESO DE VALIDACIÓN - FIN DE CARGAS PRELIMINARES', i_codemp);
COMMIT;


---------------   INICIO DE LAS ITERACIONES  -----------     FVSH 20061121
FOR ln_i in 1 .. ln_iter LOOP
    ln_num_sec_reg_min := ln_num_sec_reg_max + 1;
    ln_num_sec_reg_max := ln_num_sec_reg_max + ln_reg_base;

    INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
    VALUES (i_anopro, i_mespro, 'RCD', '52', ln_i, SYSDATE, 'INICIO DE ITERACIÓN ' || ln_i || ' DE ' || ln_iter, i_codemp);
    COMMIT;

-- Registros de Identificación de Clientes
   FOR cur in cur_b LOOP
       <<Lectura>>
       n_cont                 := n_cont + 1;
       n_codigo_unico_difer   := 0;
       n_ruc_iguales_u_omit   := 0;
       n_cod_sbs_informado    := 0;
       n_cod_actividad_econ   := NULL;
       n_tip_persona          := NULL;
       n_num_ruc              := NULL;
       n_num_ruc11            := NULL;
       n_nom_cliente_maes     := NULL;
       n_tip_docto_ident_maes := NULL;
       n_num_docto_ident_maes := NULL;
       n_cod_onrp_maes        := NULL;
       n_tip_condicion        := NULL;
       n_ind_fijo_nombre      := NULL;
       n_ind_fijo_ruc         := NULL;
       n_ind_fijo_doc_id      := NULL;
       n_ind_fijo_sunarp      := NULL;
       n_ind_fijo_ciiu3       := NULL;
       n_cod_pais             := NULL;

       -- Validacion de los nombres del cliente
       lv_cur_nom_cliente            := NULL;
       lv_cur_nom_cliente_casada     := NULL;

       lv_cur_nom_cliente := cur.nom_cliente;

       -- Cuando es persona natural ==> hace cambios en la composicion de los nombres
       -- OJO con este cambio. Premisa: dar priorida a los datos del maestro
       IF cur.tip_persona = '1' THEN
          lv_cur_nom_cliente := rtrim(cur.ape_paterno || ' ' || cur.ape_materno) || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
          lv_cur_nom_cliente_casada := lv_cur_nom_cliente;

          IF length(cur.ape_casada) > 0 THEN
             lv_cur_nom_cliente_casada := rtrim(cur.ape_paterno || ' ' || cur.ape_materno) || ' ' || cur.ape_casada || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
          END IF;
       END IF;

       -- MANCOMUNOS RESOL 426
       IF cur.tip_persona = '3' THEN
          lv_cur_nom_cliente := rtrim(cur.ape_paterno || ' ' || cur.ape_materno) || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
          lv_cur_nom_cliente := rtrim(lv_cur_nom_cliente);
       END IF;

       IF n_codigo_valido = 1 THEN
          IF n_sec_saldos <> n_sec_identif THEN
             n_control := 17;  -- Registro de saldos no informado
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, n_sec_identif, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;

          IF n_cont > 1 AND n_val_saldo_cli = 0 THEN
             n_control := 39;  -- Registro del Cliente/Deudor con saldos en cero
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, n_sec_identif, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

        n_sec_identif   := cur.num_sec_reg;
        n_val_saldo_cli := 0;

/***** Valida Datos de Campos *****/

--     Código SBS
       n_codigo_valido := 1;
       n_cod_sbs := Test_Number(cur.cod_sbs);
       IF n_cod_sbs IS NULL THEN
          n_codigo_valido := 0;
          n_control := 38;
          n_hay_error := 1;
          arr_error (n_control) := arr_error (n_control) + 1;
          SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
       ELSE
          IF n_cod_sbs = 0 THEN
             n_control := 41;
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          ELSE
             n_valor := SF_VERIFICA_MOD11 (cur.cod_sbs, 'SBS');
             IF n_valor = FALSE THEN
                n_codigo_valido := 0;
                n_control := 42;  -- Código SBS no cumple módulo 11
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             ELSE
                n_cod_sbs_informado := n_cod_sbs;
                n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (n_cod_sbs);
                IF n_tip_condicion = 'RPZDO' THEN
                   n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs);
                   IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
                      IF n_cod_sbs_ult_rplzte > 0 THEN
                         -- FVSH 18/03/2004: ¿Es lo mismo el código Reemplazante e informado?
                         n_cod_sbs           := n_cod_sbs_ult_rplzte;
                         n_cod_sbs_informado := n_cod_sbs_ult_rplzte;
                      END IF;
                   END IF;
                END IF;

                n_control := 43;  -- Código SBS no está registrado en la SBS
                BEGIN
                  -- JCFS 20091013: Se lee columna para saber si el registro es Valido (tip_reg_mv)
                  SELECT cod_actividad_econ, num_ruc, num_ruc11,
                         tip_persona, cod_pais_origen, tip_reg_mv
                    INTO n_cod_actividad_econ, n_num_ruc, n_num_ruc11,
                         n_tip_persona, n_cod_pais, lv_clasif_reg_mov
                    FROM CRI_PERSONA
                   WHERE cod_sbs = n_cod_sbs;
                  IF SQL%ROWCOUNT = 0 THEN
                     n_codigo_valido := 0;
                     n_hay_error := 1;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_codigo_valido := 0;
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END;
                IF n_codigo_valido = 1 THEN
                   IF n_tip_persona = '1' THEN
                      BEGIN
                        -- JCFS 14/09/2011: Se corrige la carga de las variables s_estado_civil_maes y s_sexo_maes (estaba al revés)
                        SELECT rtrim(n.ape_paterno || ' ' || n.ape_materno ) || ' ' || rtrim(n.nom_persona || ' ' || n.segundo_nombre),
                               n.tip_docto_ident,
                               n.num_docto_ident,
                               rtrim(n.ape_paterno) || ' ' || rtrim(n.nom_persona || ' ' || n.segundo_nombre),
                               n.ape_casada,
                               nvl(n.tip_estado_civil,''),
                               nvl(n.tip_sexo,'')
                          INTO n_nom_cliente_maes,
                               n_tip_docto_ident_maes,
                               n_num_docto_ident_maes,
                               s_nom_cliente_maes_casada,
                               s_nom_cliente_maes_ape_casada,
                               s_estado_civil_maes,
                               s_sexo_maes
                          FROM CRI_PERSONA_NAT n
                         WHERE n.cod_sbs = n_cod_sbs;

                           -- FVSH: Cambios 808, asignacion de nombres.
                           -- verifica los tipos de nombre del maestro
                        IF SQL%ROWCOUNT > 0 THEN
                           -- JCFS 20091013: Se verifica si el Cliente esta Inactivo
                           IF n_tip_docto_ident_maes = '1' AND lv_clasif_reg_mov = 'I' THEN
                              n_control := 236;
                              n_hay_error := 1;
                              arr_error (n_control) := arr_error (n_control) + 1;
                              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, n_sec_identif, 0, 'VA', arr_tipcon(n_control), n_reporte );
                           END IF;
                           -- JCFS 20091013: Fin de verificacion si el Cliente esta Inactivo

                           -- verifica si es una persona casada o viuda para reportar ape_casada
                           ln_validacion := SF_DETERMINA_APELLIDO_CASADA( s_sexo_maes, s_estado_civil_maes);
                           IF ln_validacion = 1 THEN
                              ------------------
                              -- OBS APE_CASADA
                              -- Cuando se actualice el maestro se debe descomentar estas lineas de codigo
                              -- para que no considere el apellido de casada con este comentario se esta efectuando
                              -- que todos los clientes sean validados con apellido paterno/primer nombre/segundo nombre
                              -----------------
                              lv_cur_nom_cliente_casada := rtrim(cur.ape_paterno) || ' ' || rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre);
                              n_nom_cliente_maes := s_nom_cliente_maes_casada;
                              lv_cur_nom_cliente := lv_cur_nom_cliente_casada;
                              /*-----
                              IF nvl(length(rtrim(ltrim(s_nom_cliente_maes_ape_casada))),0) > 0 THEN
                                  n_nom_cliente_maes := s_nom_cliente_maes_casada;
                                  lv_cur_nom_cliente := lv_cur_nom_cliente_casada;
                                 --------------------------------------------------------------------
                                 -- lv_cur_nom_cliente := lv_cur_nom_cliente_casada;
                                 -- OJO <<============>>
                                 -- para esta validacion se esta considerando como premisa
                                 -- que lo indicado en nuestro maestro es lo que debe primar para el
                                 -- control en la comparacion de nombres (46) para el caso de las personas
                                 -- casadas. Se debe tener present como afecta la sseparacin de los nombres
                                 -- esta situacion. EL impacto no es considerable debido a la cantidad de
                                 -- personas casasdas que estan en todo el sistema.
                                 -- FVSH_NC
                                 --------------------------------------------------------------------
                              END IF;
                              ---*/
                           END IF;
                        ELSE
                           n_no_encuentra := 1;
                        END IF;

                      EXCEPTION
                         WHEN OTHERS THEN
                            n_no_encuentra := 1;
                      END;
                   END IF;

                   -- JCFS 10/05/2010: Se agrega el Tipo de Persona 4
                   IF n_tip_persona IN ('2', '4') THEN
                      BEGIN
                        SELECT nom_razon_social, cod_onrp INTO n_nom_cliente_maes, n_cod_onrp_maes
                          FROM CRI_PERSONA_JUR
                         WHERE cod_sbs = n_cod_sbs;

                        IF SQL%Rowcount = 0 THEN
                           n_no_encuentra := 1;
                        END IF;
                      EXCEPTION
                         WHEN OTHERS THEN
                            n_no_encuentra := 1;
                      END;
                   END IF;

                   IF n_tip_persona = '3' THEN
                      BEGIN
                        SELECT nom_razon_social, tip_docto_ident, num_docto_ident
                          INTO n_nom_cliente_maes, n_tip_docto_ident_maes, n_num_docto_ident_maes
                          FROM CRI_PERSONA_NOID
                         WHERE cod_sbs = n_cod_sbs;
                        IF SQL%ROWCOUNT = 0 THEN
                           n_no_encuentra := 1;
                        END IF;
                      EXCEPTION
                        WHEN OTHERS THEN
                             n_no_encuentra := 1;
                      END;
                   END IF;

/****  Código Unico del Cliente ****/

                   IF (cur.cod_unico_clie IS NOT NULL) AND (cur.cod_unico_clie NOT IN (' ', '0')) THEN
                      BEGIN
                         SELECT cod_unico_entidad INTO n_cod_unico_clie_aux
                           FROM CRI_DEUDOR_XENT
                          WHERE cod_sbs = n_cod_sbs AND cod_ent_vig = i_codemp;
                          IF SQL%ROWCOUNT <> 0 THEN
                             n_control := 51;  -- Código único informado es diferente al registrado en la SBS
                             IF arr_activ (n_control) = 'S' THEN
                                IF n_cod_unico_clie_aux > ' ' THEN
                                   IF cur.cod_unico_clie <> n_cod_unico_clie_aux THEN
                                      n_codigo_unico_difer := 1;
                                      n_hay_error := 1;
                                      arr_error (n_control) := arr_error (n_control) + 1;
                                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                                   END IF;
                                END IF;
                             END IF;
                          END IF;
                        EXCEPTION
                           WHEN OTHERS THEN
                              n_no_encuentra := 1;
                        END;
                   END IF;
                END IF;
             END IF;
          END IF;

          IF n_cod_sbs = 0 THEN
             IF (cur.cod_unico_clie IS NOT NULL) AND (cur.cod_unico_clie NOT IN (' ', '0')) THEN
                BEGIN
                   n_cod_sbs_entidad := 0;
                    -- FVSH 2004-07-21: Cambios efectuados para la recuperacion de codsbs
                    -- Realiza la busqueda en los Maestros de Personas (antes lo hacía en CRI_DEUDOR_XENT)
                    IF cur.tip_persona = '1' THEN
                       SELECT Min(n.cod_sbs) INTO n_cod_sbs_entidad
                         FROM cri_persona_nat n, cri_persona p
                        WHERE n.cod_sbs = p.cod_sbs
                          AND n.cod_sbs in  ( SELECT cod_sbs FROM CRI_DEUDOR_XENT
                                               WHERE cod_ent_vig  = i_codemp AND cod_unico_entidad = cur.cod_unico_clie
                                            );
                    ELSE
                       -- realiza la busqueda en el maestro de Juridicos
                       -- JCFS 10/05/2010: Se agrega el Tipo de Persona 4
                        IF cur.tip_persona IN ('2', '4') THEN
                            SELECT Min(j.cod_sbs) INTO n_cod_sbs_entidad
                              FROM cri_persona_jur j, cri_persona p
                             WHERE j.cod_sbs = p.cod_sbs
                               AND j.cod_sbs in  ( SELECT cod_sbs FROM CRI_DEUDOR_XENT
                                                    WHERE cod_ent_vig = i_codemp AND cod_unico_entidad = cur.cod_unico_clie
                                                 );
                        ELSE
                            -- realiza la busqueda en el maestro de Mancomunos
                           IF cur.tip_persona = '3' THEN
                                SELECT Min(m.cod_sbs) INTO n_cod_sbs_entidad
                                  FROM cri_persona_noid m, cri_persona p
                                 WHERE m.cod_sbs = p.cod_sbs
                                   AND m.cod_sbs in  ( SELECT cod_sbs FROM CRI_DEUDOR_XENT
                                                        WHERE cod_ent_vig  = i_codemp AND cod_unico_entidad = cur.cod_unico_clie
                                                     );
                           END IF;
                        END IF;
                    END IF;

                    IF SQL%ROWCOUNT <> 0 THEN
                       n_control := 58;  -- Cliente/Deudor registrado para la entidad y no reportó código SBS
                       IF arr_activ (n_control) = 'S' AND n_cod_sbs_entidad > 0 THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                       END IF;
                    END IF;
                  EXCEPTION
                     WHEN OTHERS THEN
                        n_no_encuentra := 1;
                  END;
             END IF;
          END IF;
       END IF;

       IF cur.cod_unico_clie IS NULL OR cur.cod_unico_clie IN (' ', '0') THEN
          n_control := 78;  -- Código Unico no informado
          IF arr_activ (n_control) = 'S' THEN
             -- El control 78 no aplica para las empresas en Liquidacion 20070821
             IF nvl(sf_tip_est_ent_vig (i_codemp),'') not in ('EL') THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF ;
          END IF;
       ELSE
          n_long_cod_unico := LENGTH(cur.cod_unico_clie);
          n_loop := 1;
          n_blancos := 0;
          FOR n_loop in 1..n_long_cod_unico LOOP
              IF Substr(cur.cod_unico_clie,n_loop,1) = ' ' THEN
                 n_blancos := n_blancos + 1;
              END IF;
          END LOOP;
          IF n_blancos > 0 THEN
             n_control := 102;  -- Codigo Unico no es válido
             IF arr_activ (n_control) = 'S' THEN
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          ELSE
             BEGIN
                n_cod_sbs_entidad := 0;
                -- FVSH 2004-07-21: Cambios efectuados para la recuperacion de codsbs
                -- Realiza la busqueda en los maestros de personas (antes lo hacía en CRI_DEUDOR_XENT)
                IF cur.tip_persona = '1' THEN
                   SELECT Min(n.cod_sbs) INTO n_cod_sbs_entidad
                     FROM cri_persona_nat n, cri_persona p
                    WHERE n.cod_sbs = p.cod_sbs
                      AND n.cod_sbs in  ( SELECT cod_sbs FROM CRI_DEUDOR_XENT
                                           WHERE cod_ent_vig  = i_codemp AND cod_unico_entidad = cur.cod_unico_clie
                                        );
                ELSE
                   -- realiza la busqueda en el maestro de Juridicos
                   -- JCFS 10/05/2010: Se agrega el Tipo de Persona 4
                   IF cur.tip_persona IN ('2', '4') THEN
                      SELECT Min(j.cod_sbs) INTO n_cod_sbs_entidad
                        FROM cri_persona_jur j, cri_persona p
                       WHERE j.cod_sbs = p.cod_sbs
                         AND j.cod_sbs in  ( SELECT cod_sbs FROM CRI_DEUDOR_XENT
                                              WHERE cod_ent_vig  = i_codemp AND cod_unico_entidad = cur.cod_unico_clie
                                           );
                   ELSE
                      -- realiza la busqueda en el maestro de Mancomunos
                      IF cur.tip_persona = '3' THEN
                         SELECT Min(m.cod_sbs) INTO n_cod_sbs_entidad
                           FROM cri_persona_noid m, cri_persona p
                          WHERE m.cod_sbs = p.cod_sbs
                            AND m.cod_sbs in  ( SELECT cod_sbs FROM CRI_DEUDOR_XENT
                                                 WHERE cod_ent_vig  = i_codemp AND cod_unico_entidad = cur.cod_unico_clie
                                              );
                      END IF;
                   END IF;
                END IF;

               -- ya encontro el codigo sbs ==> trae el resto de valores
               SELECT ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id, ind_fijo_sunarp, ind_fijo_ciiu3
                 INTO n_ind_fijo_nombre, n_ind_fijo_ruc, n_ind_fijo_doc_id, n_ind_fijo_sunarp, n_ind_fijo_ciiu3
                 FROM CRI_DEUDOR_XENT
                WHERE cod_ent_vig = i_codemp
                  AND cod_unico_entidad = cur.cod_unico_clie
                  AND cod_sbs = n_cod_sbs_entidad
                GROUP BY ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id, ind_fijo_sunarp, ind_fijo_ciiu3;

               IF SQL%ROWCOUNT <> 0 THEN
                  IF n_cod_sbs_entidad > 0 THEN
                     IF n_cod_sbs = 0 OR n_codigo_valido = 0 THEN
                        n_control := 80;  -- Código Unico existe y no informó el código SBS
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                        END IF;
                     ELSE
                        n_control := 79;  -- Código Unico esta asignado a otro Cliente/Deudor
                        IF arr_activ (n_control) = 'S' THEN
                           n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (n_cod_sbs_entidad);
                           IF n_tip_condicion = 'RPZDO' THEN
                              n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs_entidad);
                              IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
                                 IF n_cod_sbs_ult_rplzte > 0 THEN
                                    n_cod_sbs_entidad := n_cod_sbs_ult_rplzte;
                                 END IF;
                              END IF;
                           END IF;
                           IF n_cod_sbs_entidad <> n_cod_sbs_informado THEN
                              n_hay_error := 1;
                              arr_error (n_control) := arr_error (n_control) + 1;
                              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                    n_no_encuentra := 1;
             END;
          END IF;
       END IF;

/***** Código CIIU3 (Sector Económico) ****/

----     CIIU3 no informado en Tipo de Persona 2
--       n_control := 76;
--       IF arr_activ (n_control) = 'S' THEN
--          IF cur.tip_persona = '2' THEN
--             IF cur.cod_ciiu3 IS NULL OR cur.cod_ciiu3 IN (' ', '0') THEN
--                IF n_cod_sbs = 0 THEN
----                IF n_ind_fijo_ciiu3 IS NULL THEN
--                   SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
----                END IF;
--                END IF;
--             END IF;
--          END IF;
--       END IF;

----     Cod CIIU informado es diferente al registrado en la SBS
--       IF  (cur.cod_ciiu3 IS NOT NULL) AND  cur.cod_ciiu3 > ' ' THEN
--            IF (n_cod_actividad_econ IS NOT NULL) AND n_cod_actividad_econ > ' ' THEN
--                n_control := 50;
--                IF arr_activ (n_control) = 'S' THEN
--                   IF cur.cod_ciiu3 <> n_cod_actividad_econ THEN
--                      SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--                   END IF;
--                END IF;
--            END IF;

----          CIIU no registrado en la tabla O.N.U.
--            n_control := 77;
--            IF arr_activ (n_control) = 'S' THEN
--                  BEGIN
--                    SELECT cod_actividad_econ INTO n_cod_act_eco
--                      FROM CRA_ACTIVIDAD_ECON
--                     WHERE cod_actividad_econ = cur.cod_ciiu3;
--                     IF SQL%ROWCOUNT = 0 THEN
--                        SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--                     END IF;
--                  EXCEPTION
--                     WHEN OTHERS THEN
--                        SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--                  END;
--            END IF;
--       END IF;

       -- Valida CIIU en personas Juridicas y Naturales / Mancomunas con negocio
       -- Controles:
       --    76 -->   CIIU no informado en Tipo de Persona 2
       --    201 -->  CIIU no informado en Tipo de Persona 1 o 3 con Negocio

       -- JCFS 10/05/2010: Se modifica el valor '05' por el valor '5' en la condición y
       --                  se agrega el Tipo de Persona 4 (en la pregunta (cur.tip_persona = '2')
       IF cur.tip_persona IN ('2', '4') OR
          ((cur.tip_magnitud = '5') AND (cur.tip_persona = '1' OR  cur.tip_persona = '3')) THEN
          IF nvl(length(trim(cur.cod_ciiu3)), 0) = 0 THEN
             -- Si es cliente nuevo valida consistencia del dato
             IF n_cod_sbs = 0 THEN
                -- JCFS 10/05/2010: Se agrega el Tipo de Persona 4
                IF cur.tip_persona IN ('2', '4') THEN  -- Juridico
                   -- 03.MAR.2003 JLT : "Para el caso de clientes nuevos (personas jurídicas) es obligatorio
                   -- el código de CIIU. En caso se trate de un cliente antiguo en el sistema, se tomará el
                   -- dato de CIIU del maestro de personas".
                   n_control := 76;
                   IF arr_activ (n_control) = 'S' THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                ELSE  -- Natural/Mancomuno con negocio
                   n_control := 201;
                   IF arr_activ (n_control) = 'S' THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                END IF;
             END IF;
          END IF;
       ELSE  -- Valida CIIU en personas Naturales / Mancomunas sin negocio
--        Controles:
--           215 --> CIIU no informado para tipo persona 1,3 sin negocio
--           202 --> CIIU no informado de acuerdo a solicitado para tipo persona 1 y 3 ('9999')
          IF nvl(length(trim(cur.cod_ciiu3)), 0) = 0   THEN
             n_control := 215;
             IF arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          ELSE
             -- verifica si es reportado de acuerdo a lo solicitado
             IF cur.cod_ciiu3 <> '9999'  THEN
                n_control := 202;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          END IF;
       END IF;

--     CIIU informado es diferente al registrado en la SBS
       IF nvl(length(trim(cur.cod_ciiu3)), 0) > 0 THEN
          n_rc      := 0;
          n_control := 50;
          IF arr_activ (n_control) = 'S' THEN
             n_rc := sf_valida_control_50 ( n_cod_actividad_econ, cur.cod_ciiu3, n_reporte);
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

--        CIIU no registrado en la tabla O.N.U.
          n_rc      := 0;
          n_control := 77;
          IF arr_activ (n_control) = 'S' THEN
             n_rc := sf_valida_control_77 ( cur.cod_ciiu3, n_reporte);
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/****  Código SUNARP ****/
       -- JCFS 10/05/2010: Se agrega el Tipo de Persona 4
       IF cur.tip_persona IN ('2', '4') AND cur.tip_residencia = '1' THEN
--        Código ONRP no informado en Tipo de Persona 2 ni 4
          IF cur.cod_sunarp IS NULL OR cur.cod_sunarp IN (' ', '0') THEN
             n_control := 72;
             IF arr_activ (n_control) = 'S' THEN
                IF n_ind_fijo_sunarp IS NULL THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          ELSE
              n_rc      := 0;
              n_control := 75;
              IF arr_activ (n_control) = 'S' THEN

                 n_rc := sf_valida_control_75 ( n_cod_sbs, cur.cod_sunarp, n_reporte);
                 IF n_rc <> 1 THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                 END IF;
              END IF;
           END IF;
       ELSE
--        Código ONRP no es válido o no corresponde al Tipo de Persona 1 ó 3
          n_control := 73;
          IF arr_activ (n_control) = 'S' THEN
             IF (cur.cod_sunarp IS NOT NULL) AND cur.cod_sunarp > ' ' AND cur.tip_persona IN ('1', '3') THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

--     Código ONRP está duplicado en la SBS
       n_rc      := 0;
       n_control := 74;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_74 ( cur.tip_persona, cur.cod_sunarp, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

/****  RUC (Número de Documento Tributario) ****/
       n_rc      := 0;
       n_control := 45;  -- Código RUC informado diferente al registrado en la SBS
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_45 ( n_num_ruc, n_num_ruc11, cur.tip_doc_trib, cur.num_doc_trib, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

       -- 12.ABR.2002 JLT :
       -- "Para el caso de clientes nuevos es obligatorio validar estrictamente el número de R.U.C.".
       -- En caso se trate de un cliente antiguo en el sistema con calificación de riesgo '4' (Pérdida),
       -- se tomará el dato número de R.U.C. del maestro de personas".
       -- (Reunión de la Comisión de Criterios de Aceptación del R.C.D. del 12.ABR.2002).
       n_rc   := 0;
       n_control := 54;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_54 ( n_cod_sbs, cur.tip_doc_trib, cur.num_doc_trib, cur.tip_clasif_clie, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     RUC no informado en personas jurídicas
       n_rc    := 0;
       n_control := 53;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_53 ( cur.tip_persona, cur.tip_residencia, cur.num_doc_trib, n_ind_fijo_ruc, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     RUC no informado en personas naturales
       n_rc    := 0;
       n_control := 103;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_103 ( cur.tip_persona, cur.num_doc_trib, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     JCFS 26/05/2010: RUC informado en Personas Naturales
       n_rc      := 0;
       n_control := 110;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_110 (cur.tip_persona, cur.num_doc_trib, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     RUC está asignado a otro Cliente/Deudor
       n_control := 57;
       IF arr_activ (n_control) = 'S' THEN
          IF n_cod_sbs > 0 THEN
             IF (cur.num_doc_trib IS NOT NULL) AND cur.num_doc_trib > ' ' AND cur.num_doc_trib <> '00000000000' THEN
                -- FVSH  20051202 CAMBIOS EN LA LOGICA DEL CONTROL 57
                -- Se elimina la logica del "MIN" para realizar una busqueda mas detallada
                n_no_encuentra  := 0;
                n_cod_sbs_ruc11 := 0;
                n_cod_sbs_ruc8 := 0;
                BEGIN
                   n_cod_sbs_ruc11 := SF_VALIDA_CONTROL_57 (cur.tip_doc_trib,cur.num_doc_trib,cur.tip_persona,n_cod_sbs,'RCD');
                   IF nvl(n_cod_sbs_ruc11,-1) < 0 THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                EXCEPTION
                   WHEN OTHERS THEN
                      n_no_encuentra := 1;
                END;
             END IF;
          END IF;
       END IF;

--     RUC no es válido para el tipo de persona
       n_rc := 0;
       n_control := 109;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_109 (cur.tip_persona, cur.tip_doc_trib, cur.num_doc_trib, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     RUC está duplicado en la SBS
       n_rc := 0;
       n_control := 56;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_56 ( cur.tip_doc_trib, cur.num_doc_trib, n_reporte );
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     JCFS 12/08/2011: Se agrega validación del RUC en la BD de SUNAT
--     RUC no existe en el maestro de contribuyentes de la SUNAT
       n_rc := 0;
       n_control := 82;
       IF arr_activ (n_control) = 'S' THEN
          IF nvl(cur.tip_doc_trib, ' ') = '3' THEN  -- Solo se valida si se reporta el RUC de 11 dígitos
             n_rc := sf_valida_control_82 ( cur.num_doc_trib );
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             ELSE
                -- JCFS 08/09/2011: Se agrega validación de la Razón Social en la BD de SUNAT
                -- El RUC informado existe en el maestro de contribuyentes de la SUNAT pero la Razón Social informada no es la misma.
                n_rc := 0;
                n_control := 83;
                IF arr_activ (n_control) = 'S' THEN
                   n_rc := sf_valida_control_83 ( cur.num_doc_trib, cur.nom_cliente );
                   IF n_rc <> 1 THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                END IF;
             END IF;
          END IF;
       END IF;


/****  Tipo de Documento de Identificación ****/
       n_rc := 0;
       n_control := 67;  -- Tipo de Doc. de identidad no es del 1 al 5 (en Persona 1 o 3)
       IF arr_activ (n_control) = 'S' THEN
      IF NVL(cur.tip_doc_iden, 'X') <> '9' THEN
             n_rc := sf_valida_control_67 ( cur.tip_persona, cur.tip_doc_iden, n_ind_fijo_doc_id, n_reporte);
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             ELSE /***Juan Gonzalez****/
                  IF cur.tip_doc_iden = '9' and cur.tip_residencia <> '4' THEN
                     n_hay_error := 1;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                  END IF;
             END IF;
          END IF;
       END IF;

--     FVSH 20051016 cambio por Resolucion RENIEC Agosto 2005
--     Resolucion Jefatural 789-2005 (a partir 01/08/2005 solo se acepta DNI como documento de identificacion a nivel nacional)
--     verifica que los clientes nuevos no sean reportados con carnet de las fuerza armadas
       n_rc   := 0;
       n_control := 230;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_230 ( cur.cod_sbs, cur.tip_persona, cur.tip_doc_iden, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

/****************** DESARROLLAR NUEVO CONTROL *************************/

--     Número de Documento de Identificación
       n_rc  := 0;
       n_control := 68;
       IF arr_activ (n_control) = 'S' THEN
      IF NVL(cur.tip_doc_iden, 'X') <> '9' THEN
             n_rc := sf_valida_control_68 ( cur.tip_persona, cur.num_doc_iden, n_ind_fijo_doc_id, n_reporte);
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          end if;
       END IF;

--     Documento de identidad no es válido o no corresp. al tipo de persona 2
       n_rc  := 0;
       n_control := 69;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_69 ( cur.tip_persona, cur.tip_doc_iden, cur.num_doc_iden, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     Documento de identidad está duplicado en la SBS
       n_rc :=  0;
       n_control := 70;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_70 ( cur.tip_persona, cur.tip_doc_iden, cur.num_doc_iden, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     Documento de identidad está asignado a otro Cliente/Deudor.
       n_control := 71;
       IF arr_activ (n_control) = 'S' THEN
          -- FVSH 2005-05-20: Se deshabilita el control 71 para Mancomunos
          IF n_cod_sbs > 0 AND cur.tip_persona = '1' THEN  -- cur.tip_persona IN ('1', '3')
             IF (cur.num_doc_iden IS NOT NULL) AND cur.num_doc_iden > ' '
             -- 22 SET 2003 (JLT) Se incluye tipo de documento '9'
             -- AND cur.tip_doc_iden IN ('1', '2', '3', '4', '5') THEN
             -- JCFS 17/05/2010: Se retira el tipo 9; solo se acepta lo indicado en el instructivo
             -- AND cur.tip_doc_iden IN ('1', '2', '3', '4', '5', '9') THEN
                AND cur.tip_doc_iden IN ('1', '2', '3', '4', '5') THEN
                n_no_encuentra := 0;
                n_cod_sbs_nat := 0;

                -- FVSH  20051202 CAMBIOS EN LA LOGICA DEL CONTROL 71
                -- Se elimina la logica del "MIN" para realizar una busqueda mas detallada
                BEGIN
                   n_cod_sbs_nat := SF_VALIDA_CONTROL_71 (cur.tip_doc_iden,cur.num_doc_iden,n_cod_sbs,'RCD');
                   IF nvl(n_cod_sbs_nat,-1) < 0 AND cur.tip_doc_iden in ('1','3','4') THEN
                      n_cod_sbs_nat := SF_VALIDA_CONTROL_71_FFAA_PP ( cur.tip_doc_iden, cur.num_doc_iden, n_cod_sbs,
                                                                      Trim(cur.ape_paterno)||Trim(cur.ape_materno)||Trim(cur.primer_nombre),
                                                                      'RCD' );
                   END IF;
                   IF nvl(n_cod_sbs_nat,-1) < 0 THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                EXCEPTION
                   WHEN OTHERS THEN
                      n_no_encuentra := 1;
                END;
             END IF;
          END IF;
       END IF;

/****  Tipo de Residencia ****/
--     Cliente/Deudor informado sin residencia y tiene documentos de residente
       n_rc     := 0;
       n_control := 44;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_44 ( cur.tip_residencia, cur.tip_doc_iden, cur.num_doc_iden, cur.num_doc_trib, cur.cod_sunarp, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

/****  Tipo de Relacion Laboral ****/
--     Relacion Laboral no es válida o no corresp. al Tipo de Persona 2 o 3
       n_rc  := 0;
       n_control := 92;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_92 ( cur.tip_persona, cur.tip_rellab, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

/****  Código de País ****/
--     Código de País no informado
       n_rc  := 0;
       n_control := 106;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_106 ( n_cod_sbs, cur.cod_pais, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     Código de país no existe en la tabla de paises
       n_rc  :=  0;
       n_control := 107;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_107 ( cur.cod_pais, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     Tipo de documento de identidad no guarda relación con el código de país
       n_rc     := 0;
       n_control := 108;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_108 ( n_cod_sbs, cur.cod_pais, cur.tip_doc_iden, n_cod_pais, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

--     JCFS 26/05/2010: País de Nacimiento de No Residentes debe ser distinto a Perú
       n_rc     := 0;
       n_control := 111;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_111 (cur.tip_residencia, cur.cod_pais, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

/**** Siglas de Personas Jurídicas ****/
--     Sigla no válida
       n_control := 64;
       IF arr_activ (n_control) = 'S' THEN
          -- JCFS 17/05/2010: Se filtra el Tipo de Persona 4, además del Tipo 2
          IF cur.tip_persona NOT IN ('2', '4') AND  -- <> '2'
             (cur.nom_sigla IS NOT NULL) AND cur.nom_sigla > ' ' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;
--
       IF arr_activ (65) = 'S' OR arr_activ (66) = 'S' THEN
          IF (cur.nom_sigla IS NOT NULL) AND cur.nom_sigla > ' ' AND
             -- JCFS 17/05/2010: Se considera el Tipo de Persona 4, además del Tipo 2
             cur.tip_persona IN ('2', '4') THEN
             n_cod_sbs_sigla_dup := 0;
             BEGIN
                SELECT count(1) INTO n_cod_sbs_sigla_dup
                  FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                 WHERE A.des_siglas = cur.nom_sigla
                   AND B.cod_sbs = A.cod_sbs
                   AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

                IF SQL%Rowcount <> 0 THEN
                   IF n_cod_sbs_sigla_dup > 1 THEN
                      IF arr_activ (65) = 'S' THEN
                         n_control := 65;
                         IF arr_activ (n_control) = 'S' THEN
                            n_hay_error := 1;
                            arr_error (n_control) := arr_error (n_control) + 1;
                            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                         END IF;
                      END IF;
                   ELSE
                      IF arr_activ (66) = 'S' THEN
                         n_cod_sbs_sigla := 0;
                         BEGIN
                            SELECT MIN(A.cod_sbs) INTO n_cod_sbs_sigla
                              FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                             WHERE A.des_siglas = cur.nom_sigla
                               AND B.cod_sbs = A.cod_sbs
                               AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);
                            IF SQL%Rowcount <> 0 THEN
                               IF n_cod_sbs <> n_cod_sbs_sigla AND n_cod_sbs_sigla > 0 THEN
                                  n_control := 66;  -- JCFS 10/06/2010: Se agrega esta línea para corregir el control 66 (se reportaba como 64)
                                  n_hay_error := 1;
                                  arr_error (n_control) := arr_error (n_control) + 1;
                                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                              END IF;
                           END IF;
                         EXCEPTION
                           WHEN OTHERS THEN
                                n_no_encuentra := 1;
                         END;
                      END IF;
                   END IF;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                     n_no_encuentra := 1;
              END;
          END IF;
       END IF;

--     n_long_nom_sigla := LENGTH(cur.nom_sigla);
--     n_nom_sigla_len  := Ltrim(Rtrim(Substr(cur.nom_sigla,1,n_long_nom_sigla)));
--     WHERE Ltrim(Rtrim(Substr(des_siglas,1,n_long_nom_sigla))) = Ltrim(Rtrim(Substr(cur.nom_sigla,1,n_long_nom_sigla)));

       -- JCFS 17/05/2010: Se considera el Tipo de Persona 4, además del Tipo 2
       IF cur.tip_persona IN ('2', '4') AND n_cod_sbs > 0 THEN
          n_nom_sigla := ' ';
          BEGIN
             SELECT des_siglas INTO n_nom_sigla
               FROM CRI_PERSONA_JUR
              WHERE cod_sbs = n_cod_sbs;

             IF SQL%Rowcount <> 0 THEN
                IF (n_nom_sigla IS NOT NULL) AND n_nom_sigla > ' ' THEN
                   IF cur.nom_sigla > ' ' THEN
                      n_control := 47;
                      IF arr_activ (n_control) = 'S' THEN
                         IF cur.nom_sigla <> n_nom_sigla THEN
                            n_hay_error := 1;
                            arr_error (n_control) := arr_error (n_control) + 1;
                            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                         END IF;
                      END IF;
                   ELSE
                      n_control := 63;
                      IF arr_activ (n_control) = 'S' THEN
                         n_hay_error := 1;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                      END IF;
                   END IF;
                END IF;
             END IF;
           EXCEPTION
             WHEN OTHERS THEN
                  n_no_encuentra := 1;
           END;
       END IF;

/**** Nombre del Cliente ****/
--     Nombre del Cliente/Deudor no ha sido informado
       n_rc   := 0;
       n_control := 59;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_59 ( lv_cur_nom_cliente,  n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          ELSE
             n_rc   := 0;
             n_control := 60;
             IF arr_activ (n_control) = 'S'  THEN
                n_rc := sf_valida_control_60 ( n_cod_sbs, cur.tip_persona, lv_cur_nom_cliente,  n_reporte );
                IF n_rc <> 1 THEN
                   IF cur.tip_persona = '2' THEN
                      SELECT COUNT(1) INTO ln_count FROM CRI_RUC_1_DAT_PRINC WHERE NOMBRE = lv_cur_nom_cliente;
                      IF ln_count > 0 THEN
                         n_rc := 1;
                      END IF;
                   END IF;
                END IF;
                IF n_rc <> 1 THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          END IF;
       END IF;

       n_rc  := 0;
       n_control := 104;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_104 ( lv_cur_nom_cliente, cur.tip_persona, n_ind_fijo_nombre, n_reporte);
          IF n_rc <> 1 THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

       n_rc  := 0;
       n_control := 105;
       IF arr_activ (n_control) = 'S' THEN
          n_rc := sf_valida_control_105 ( lv_cur_nom_cliente, cur.tip_persona, n_ind_fijo_nombre, n_reporte);
          IF n_rc <> 1 THEN
                  n_hay_error := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       END IF;

       n_control := 46;
       IF arr_activ (n_control) = 'S' THEN
--FVSH_NC  IF (cur.nom_cliente IS NOT NULL) AND (n_nom_cliente_maes IS NOT NULL) AND cur.nom_cliente > ' ' AND n_nom_cliente_maes > ' ' THEN
          IF (lv_cur_nom_cliente IS NOT NULL) AND (n_nom_cliente_maes IS NOT NULL) AND
             lv_cur_nom_cliente > ' ' AND n_nom_cliente_maes > ' ' THEN
--FVSH_NC    IF cur.nom_cliente <> n_nom_cliente_maes THEN
             IF lv_cur_nom_cliente <> n_nom_cliente_maes THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/*--- Controles 61 y 62: INICIO ---*/
   -- 61: Nombre del Cliente/Deudor está duplicado en la SBS
   -- 62: Nombre está asignado a otro Cliente/Deudor

       IF arr_activ (61) = 'S' OR arr_activ (62) = 'S' THEN
          IF (lv_cur_nom_cliente IS NOT NULL) AND lv_cur_nom_cliente > ' ' THEN

/*--- Controles 61 y 62: Validación de Personas Naturales ---*/
             IF cur.tip_persona = '1' THEN
                n_cod_sbs_nombre_dup := 0;
                BEGIN
                  -- FVSH selecciona por tipo de estado civil
                  -- para este caso se esta considerando si tiene apellido de casada
                  -- ademas si es de sexo femenino y que sea casada o viuda

                  --- Se esta dando prioridad a los datos del maestro
                  ln_validacion := SF_DETERMINA_APELLIDO_CASADA( s_sexo_maes, s_estado_civil_maes);
                  IF nvl(length(cur.ape_casada),0) > 0 AND
                     nvl(length(rtrim(ltrim(s_nom_cliente_maes_ape_casada))),0) > 0 AND
                     ln_validacion = 1 THEN
--                     AND cur.genero = 'F' AND cur.estado_civil IN ('2','4') THEN
                     -- contiene apellido casada
                     SELECT count(1) INTO n_cod_sbs_nombre_dup
                       FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                      WHERE A.ape_paterno = cur.ape_paterno
                        AND A.ape_materno = cur.ape_materno
                        AND A.ape_casada  = cur.ape_casada
                        AND rtrim(A.nom_persona) = rtrim(cur.primer_nombre)
                        AND A.ape_paterno LIKE SUBSTR(lv_cur_nom_cliente, 1, instr(lv_cur_nom_cliente,' ',1) - 1)||'%'
                        AND B.cod_sbs         = A.cod_sbs
                        AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);
                  ELSE
                     SELECT count(1) INTO n_cod_sbs_nombre_dup
                       FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                      WHERE A.ape_paterno = cur.ape_paterno
                        AND A.ape_materno = cur.ape_materno
                        AND rtrim(A.nom_persona) = rtrim(cur.primer_nombre)
                        AND A.ape_paterno LIKE SUBSTR(lv_cur_nom_cliente, 1, instr(lv_cur_nom_cliente,' ',1) - 1)||'%'
                        AND B.cod_sbs         = A.cod_sbs
                        AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);
                  END IF;

                  IF SQL%Rowcount <> 0 THEN
                     IF n_cod_sbs_nombre_dup > 1 THEN
                        n_control := 61;
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                        END IF;
                     ELSE
                        -- Nombre esta asignado a otro cliente deudor
                        n_control := 62;
                        IF  n_cod_sbs > 0 AND arr_activ (n_control) = 'S' THEN
                            n_cod_sbs_nom_cliente := 0;
                            BEGIN
                             -- FVSH selecciona por tipo de estado civil
                             -- para este caso se esta considerando si tiene apellido de casada
                             -- ademas si es de sexo femenino y que sea casada

                             -- Se esta dando prioridad a los datos del maestro
                             ln_validacion := SF_DETERMINA_APELLIDO_CASADA( s_sexo_maes, s_estado_civil_maes);
                             IF nvl(length(cur.ape_casada),0) > 0 AND
                                nvl(length(rtrim(ltrim(s_nom_cliente_maes_ape_casada))),0) > 0 AND
                                ln_validacion = 1 THEN
--                                AND cur.genero = 'F' AND cur.estado_civil IN ('2','4') THEN
                                -- contiene apellido casada
                                SELECT A.cod_sbs, A.Tip_Docto_Ident, A.Num_Docto_Ident
--                                     nvl(sf_tip_persona(cur.cod_sbs),'') - lv_tip_persona_mae_ctr_62
                                  INTO n_cod_sbs_nom_cliente, lv_tip_docto_id_mae_ctr_62, lv_num_docto_id_mae_ctr_62
                                  FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                                 WHERE A.ape_paterno = cur.ape_paterno
                                   AND A.ape_materno = cur.ape_materno
                                   AND A.ape_casada  = cur.ape_casada
                                   AND rtrim(A.nom_persona || ' ' || A.segundo_nombre) = rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre)
                                   AND A.ape_paterno LIKE SUBSTR(lv_cur_nom_cliente, 1, instr(lv_cur_nom_cliente,' ',1) - 1)||'%'
                                   AND B.cod_sbs        = A.cod_sbs
                                   AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);
                              ELSE
                                SELECT A.cod_sbs, A.Tip_Docto_Ident, A.Num_Docto_Ident
--                                     nvl(sf_tip_persona(cur.cod_sbs),'') - lv_tip_persona_mae_ctr_62
                                  INTO n_cod_sbs_nom_cliente, lv_tip_docto_id_mae_ctr_62, lv_num_docto_id_mae_ctr_62
                                  FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                                 WHERE A.ape_paterno = cur.ape_paterno
                                   AND A.ape_materno = cur.ape_materno
                                   AND rtrim(A.nom_persona || ' ' || A.segundo_nombre) = rtrim(cur.primer_nombre || ' ' || cur.segundo_nombre)
                                   AND A.ape_paterno LIKE SUBSTR(lv_cur_nom_cliente, 1, instr(lv_cur_nom_cliente,' ',1) - 1)||'%'
                                   AND B.cod_sbs        = A.cod_sbs
                                   AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);
                              END IF;

                              IF SQL%Rowcount <> 0 THEN
                                 IF n_cod_sbs <> n_cod_sbs_nom_cliente THEN
                                    -- FVSH 20060816: Cambio introducido para comparar tipo y num_doc
                                    -- si los documentos son los mismos, entonces no observa al deudor o si uno de los dos es diferente, lo observa
                                    -- obtiene el tipo_persona del codsbs informado con la entidad esto para discrimar las
                                    -- posibles  e incorrectas asignaciones de codsbs Naturales con Mancomunos

                                    Select nvl(sf_tip_persona(cur.cod_sbs),'') INTO lv_tip_persona_mae_ctr_62
                                      FRom dual;

                                    -- FVSH  20070713
                                    -- Verifica si el dato del maestro esta asociado con algun referente
                                    -- se puede tratar de un homonimo, PRIORIDAD: datos del maestro

                                    BEGIN
                                     Select nvl(tip_reg_mv,'') Into lv_clasif_reg_mov
                                       FROM cri_persona p
                                      where p.cod_sbs = n_cod_sbs_nom_cliente;
                                    END;

                                    IF (lv_tip_docto_id_mae_ctr_62 <> cur.tip_doc_iden  OR
                                       lv_num_docto_id_mae_ctr_62 <> cur.num_doc_iden)  OR
                                       lv_tip_persona_mae_ctr_62  <> cur.tip_persona   THEN
                                       -- Verifica q los datos del maestros no esten validados con algun referente
                                       -- SE AGREGO X PARA NO INCLUIR RECHAZADOS POR RENIEC 18/08/2009
                                       -- JCFS 16/10/2009: SE AGREGO I PARA NO INCLUIR INACTIVOS
                                       IF lv_clasif_reg_mov NOT IN ('R','P','E','X','I') THEN
                                           n_hay_error := 1;
                                           arr_error (n_control) := arr_error (n_control) + 1;
                                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                                       END IF;
                                    END IF;
                                 END IF;
                              END IF;
                            EXCEPTION
                               WHEN OTHERS THEN
                                    n_no_encuentra := 1;
                            END;
                        END IF;
                     END IF;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_no_encuentra := 1;
                END;
             END IF;

/*--- Controles 61 y 62: Validación de Personas Jurídicas ---*/
             -- JCFS 18/05/2010: Se agrega el Tipo de Persona 4 (además del tipo 2)
             IF cur.tip_persona IN ('2', '4') THEN
                n_cod_sbs_nombre_dup := 0;
                BEGIN
                  SELECT count(1) INTO n_cod_sbs_nombre_dup
                    FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                   WHERE A.nom_razon_social = lv_cur_nom_cliente
                     AND B.cod_sbs          = A.cod_sbs
                     AND (B.tip_condicion   <> 'RPZDO' OR B.tip_condicion IS NULL);

                  IF SQL%Rowcount <> 0 THEN
                     IF n_cod_sbs_nombre_dup > 1 THEN
                        n_control := 61;
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                        END IF;
                     ELSE
                        n_control := 62;
                        IF n_cod_sbs > 0 AND arr_activ (n_control) = 'S' THEN
                            n_cod_sbs_nom_cliente := 0;
                            BEGIN
                              SELECT A.cod_sbs, nvl(B.Num_Ruc,''), nvl(B.num_ruc11,'')
--                                     nvl(sf_tip_persona(cur.cod_sbs),'')  -- lv_tip_persona_mae_ctr_62
                                INTO n_cod_sbs_nom_cliente, lv_num_ruc_mae_ctr_62, lv_num_ruc11_mae_ctr_62
                                FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                               WHERE A.nom_razon_social = lv_cur_nom_cliente
                                 AND B.cod_sbs          = A.cod_sbs
                                 AND (B.tip_condicion   <> 'RPZDO' OR B.tip_condicion IS NULL);

                              IF SQL%Rowcount <> 0 THEN
                                 IF n_cod_sbs <> n_cod_sbs_nom_cliente AND n_cod_sbs_nom_cliente > 0 THEN
                                    -- FVSH 20060816: Cambio introducido para comparar tipo y num_RUC
                                    -- Si los documentos son los mismos, entonces no observa al deudor o si uno de los dos es
                                    -- diferente, lo observa. obtiene el tipo_persona del codsbs informado con la entidad
                                    -- esto para discrimar las posibles  e incorrectas asignaciones de codsbs

                                    Select nvl(sf_tip_persona(cur.cod_sbs),'')
                                      INTO lv_tip_persona_mae_ctr_62
                                      FRom dual;

                                    IF not( ( cur.tip_doc_trib = '2' AND cur.num_doc_trib = lv_num_ruc_mae_ctr_62 )
                                         OR ( cur.tip_doc_trib = '3' AND cur.num_doc_trib = lv_num_ruc11_mae_ctr_62 ) )  OR
                                       (lv_tip_persona_mae_ctr_62 <> cur.tip_persona) THEN
                                       n_hay_error := 1;
                                       arr_error (n_control) := arr_error (n_control) + 1;
                                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                                    END IF;
                                 END IF;
                              END IF;
                            EXCEPTION
                               WHEN OTHERS THEN
                                  n_no_encuentra := 1;
                            END;
                        END IF;
                     END IF;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_no_encuentra := 1;
                END;
             END IF;

/*--- Controles 61 y 62: Validación de Personas Mancomunos ---*/
             IF cur.tip_persona = '3' THEN
                n_cod_sbs_nombre_dup := 0;
                BEGIN
                  SELECT count(1) INTO n_cod_sbs_nombre_dup
                    FROM CRI_PERSONA_NOID A, CRI_PERSONA B
                   WHERE A.nom_razon_social = lv_cur_nom_cliente
                     AND B.cod_sbs          = A.cod_sbs
                     AND (B.tip_condicion   <> 'RPZDO' OR B.tip_condicion IS NULL);

                  IF SQL%Rowcount <> 0 THEN
                     IF n_cod_sbs_nombre_dup > 1 THEN
                        n_control := 61;
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                        END IF;
                     ELSE
                        n_control := 62;
                        IF  n_cod_sbs > 0
                        AND arr_activ (n_control) = 'S' THEN
                            n_cod_sbs_nom_cliente := 0;
                            BEGIN
                              SELECT A.cod_sbs, A.Tip_Docto_Ident, A.Num_Docto_Ident
--                                     nvl(sf_tip_persona(cur.cod_sbs),'') - lv_tip_persona_mae_ctr_62
                                INTO n_cod_sbs_nom_cliente, lv_tip_docto_id_mae_ctr_62, lv_num_docto_id_mae_ctr_62
                                FROM CRI_PERSONA_NOID A, CRI_PERSONA B
                               WHERE A.nom_razon_social = lv_cur_nom_cliente
                                 AND B.cod_sbs          = A.cod_sbs
                                 AND (B.tip_condicion   <> 'RPZDO' OR B.tip_condicion IS NULL);

                              IF SQL%Rowcount <> 0 THEN
                                 IF n_cod_sbs <> n_cod_sbs_nom_cliente AND n_cod_sbs_nom_cliente > 0 THEN
                                    -- FVSH 20060816: Cambio introducido para comparar tipo y num_doc
                                    -- si los documentos son los mismos, entonces no observa al deudor o si uno de los dos es
                                    -- diferente, lo observa. Obtiene el tipo_persona del codsbs informado con la entidad, esto
                                    -- para discrimar las posibles  e incorrectas asignaciones de codsbs Naturales con Mancomunos

                                    Select nvl(sf_tip_persona(cur.cod_sbs),'') INTO lv_tip_persona_mae_ctr_62
                                      FRom dual;

                                    IF lv_tip_docto_id_mae_ctr_62 <> cur.tip_doc_iden  OR
                                       lv_num_docto_id_mae_ctr_62 <> cur.num_doc_iden  OR
                                       lv_tip_persona_mae_ctr_62  <> cur.tip_persona   THEN
                                       n_hay_error := 1;
                                       arr_error (n_control) := arr_error (n_control) + 1;
                                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                                    END IF;
                                 END IF;
                              END IF;
                            EXCEPTION
                               WHEN OTHERS THEN
                                    n_no_encuentra := 1;
                            END;
                        END IF;
                     END IF;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_no_encuentra := 1;
                END;
             END IF;
          END IF;
       END IF;
/*--- Controles 61 y 62: FIN ---*/

/*-- (1)  : Indicador del estado de la validacion       (4)  : Long. Apellido de Casada
     (2)  : Long. Apellido Paterno                      (5)  : Long. Primer Nombre
     (3)  : Long. Apellido Materno                      (6)  : Long. Segundo Nombre              --*/

/*-- CONTROLES DE VALIDACION USADOS
     n_control := 210;       -- Apellido casada mal reportado
     n_control := 211;       -- No se reporto apellido paterno

  -- No se reporto apellido materno, antes de ver si es error verificar si es casada
     n_control := 212;       -- No se reporto Apellido Materno o de Casada
     n_control := 213;       -- No se reporto Apellido Materno

     n_control := 214;       -- Nombres no estan reportados en forma solicitada

  -- FVSH 808: Valida si el primer nombre tiene espacios en blanco.
     -- De presentarse este caso quiere decir que esta reportando dos nombre en este campo por ejemplo "FRANK FRANCISCO"
     -- Evaluar que otros campos requieren esta validacion
  -- Retorno mayor a cero quiere decir que encontro blancos
     -- ln_validacion := nvl(instr(replace(cur.primer_nombre,' ','*'),'*'),0);
--*/

  IF cur.tip_persona = '1' THEN
     -- FVSH: Calculando longitud para validacion
     long_nombre(1) := 0;
     long_nombre(2) := nvl(length(ltrim(rtrim(cur.ape_paterno))),0);
     long_nombre(3) := nvl(length(ltrim(rtrim(cur.ape_materno))),0);
     long_nombre(4) := nvl(length(ltrim(rtrim(cur.ape_casada))),0);
     long_nombre(5) := nvl(length(ltrim(rtrim(cur.primer_nombre))),0);
     long_nombre(6) := nvl(length(ltrim(rtrim(cur.segundo_nombre))),0);

/*--- Validación "XXXX" - INICIO ---*/
     IF long_nombre(2) > 0 AND
        (long_nombre(3) > 0 OR long_nombre(4) > 0) AND
        long_nombre(5) > 0 AND
        long_nombre(6) >= 0 THEN
         -- Datos minimos para las personas naturales
         -- Apellido Paterno ; Primer Nombre ; Segundo Nombre(opcional)
         -- Apellido materno o Apellido casada

         -- Validando en caso se de la condicion Apellido Materno o Casada
         IF long_nombre(3) <= 0 THEN
            -- Valida apellido materno      -- OK
            -- si ingresa es porque en esta etapa ape_casada tiene una longitud mayor a cero
            -- ahora valida si es correcta la asignacion por tipo persona

            -- Premisa Inicial:  Apellido casada mal reportado
            long_nombre(1) := 1;
            ln_validacion := SF_DETERMINA_APELLIDO_CASADA( cur.genero, cur.estado_civil);
            IF ln_validacion = 1 THEN
--             IF cur.genero = 'F' AND  cur.estado_civil in ('C','V','2','4') THEN                  -- Valida apellido casada                  -- OK
                  long_nombre(1) := 0;
            END IF;
         END IF;

/*--- Control 216: Apellido paterno con "XX" iniciales, diferente a lo solicitado ---*/
        ln_flag_valida_nombre (1) := 0;
        n_control := 216;
        ln_validacion := 0;
        IF arr_activ (n_control) = 'S' THEN
         -- APELLIDO PATERNO
         -- long_nombre(2)
         -- CONDICION: SOLO se debe aceptar 4 letras x ( "XXXXX")
         -- VALIDACION SERA
         --    Longitud > 4  ==> aceptara un rango de 2 x. Si es "XX????"
         --    Longitud = 4  ==> Exito: todas tienen que ser "X"
         --    Longitud < 4  ==>  Long. 1: si es "X" error
         --                       Long. 2: Si es "XX" error. ¿ Si es "X?" ?
         --                       Long. 3: Si es "XXX" or "XX?"  error

           ln_long_nombre := nvl(length(ltrim(replace(upper(cur.ape_paterno),'X',' '))),0);
           ln_dif_long_nombre := long_nombre(2) - ln_long_nombre;

           IF long_nombre(2) > 4 THEN
             -- long_nombre(2) > 4
             IF ln_dif_long_nombre > 2 THEN
                -- quiere decir que encontro mas de dos "X" al inicio  ==> ERROR
                --               "XXXabcc" ,  "XXXXabcc" , "XXXXXabcc" ... etc
                ln_validacion := -1;  -- ==> ERROR
             END IF;
           ELSE
              --  long_nombre(2) <= 4
              IF long_nombre(2) = 4 THEN
                 -- ln_dif_long_nombre = 4 -- ==> informo "XXXX"  --> OK
                 -- ln_dif_long_nombre = 3 "XXXXa" -- Error
                 -- ln_dif_long_nombre = 2 "XXab"  -- Error
                 -- ln_dif_long_nombre = 1 "Xabc"
                 IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                    ln_validacion := -1; -- ==> ERROR
                 END IF;
              ELSE
                 -- long_nombre(2) < 4
                 IF long_nombre(2) = 3 THEN
                     -- Long. 3: Si es "XXX" or "XX?"  error
                        -- ln_dif_long_nombre = 3 -- ==> informo "XXX"  --> Error
                        -- ln_dif_long_nombre = 2 -- ==> informo "XXa" -- Error
                    IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                       ln_validacion := -1; -- ==> ERROR
                    END IF;
                 ELSE
                    IF long_nombre(2) = 2 THEN
                       -- Long. 2: Si es "XX"   error
                       -- ln_dif_long_nombre = 2 -- ==> informo "XX" -- Error
                       IF (ln_dif_long_nombre = 2 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    ELSE
                       -- long_nombre(2) = 1
                        -- Long. 2: Si es "X"   error
                            -- ln_dif_long_nombre = 1 -- ==> informo "X" -- Error
                       IF (ln_dif_long_nombre = 1 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    END IF;
                 END IF;
              END IF;
           END IF;

           IF ln_validacion = -1 THEN
              ln_flag_valida_nombre (1) := 1;
              n_hay_error := 1;
              arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
           END IF;
        END IF;

/*--- Control 217: Apellido materno con "X" iniciales, diferente a lo solicitado ---*/
        ln_flag_valida_nombre (2) := 0;
        n_control := 217;
        ln_validacion := 0;
        IF arr_activ (n_control) = 'S' THEN
         -- APELLIDO MATERNO
         -- long_nombre(3)
           ln_long_nombre := nvl(length(ltrim(replace(upper(cur.ape_materno),'X',' '))),0);
           ln_dif_long_nombre := long_nombre(3) - ln_long_nombre;

           IF long_nombre(3) > 4 THEN
             -- long_nombre(3) > 4
             IF ln_dif_long_nombre > 2 THEN
                ln_validacion := -1; -- ==> ERROR
             END IF;
           ELSE
              --  long_nombre(3) <= 4
              IF long_nombre(3) = 4 THEN
                 IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                    ln_validacion := -1; -- ==> ERROR
                 END IF;
              ELSE
                 -- long_nombre(3) < 4
                 IF long_nombre(3) = 3 THEN
                    IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                       ln_validacion := -1; -- ==> ERROR
                    END IF;
                 ELSE
                    IF long_nombre(3) = 2 THEN
                       IF (ln_dif_long_nombre = 2 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    ELSE
                       -- long_nombre(3) = 1
                       IF (ln_dif_long_nombre = 1 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    END IF;
                 END IF;
              END IF;
           END IF;

           IF ln_validacion = -1 THEN
              ln_flag_valida_nombre (2) := 1;
              n_hay_error := 1;
              arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
           END IF;
         END IF;

/*-     ln_flag_valida_nombre (3) := 0;
        n_control := 210;
        ln_validacion := 0;
        IF arr_activ (n_control) = 'S' THEN
         --------------------------------------------------------
         -- APELLIDO CASADA
         -- long_nombre(4)
           ln_long_nombre := nvl(length(ltrim(replace(upper(cur.ape_casada),'X',' '))),0);
           ln_dif_long_nombre := long_nombre(4) - ln_long_nombre;

           IF long_nombre(4) > 4 THEN
             -- long_nombre(4) > 4
             IF ln_dif_long_nombre > 2 THEN
                ln_validacion := -1; -- ==> ERROR
             END IF;
           ELSE
              --  long_nombre(4) <= 4
              IF long_nombre(4) = 4 THEN
                 IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                    ln_validacion := -1; -- ==> ERROR
                 END IF;

              ELSE
                 -- long_nombre(4) < 4
                 IF long_nombre(4) = 3 THEN
                    IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                       ln_validacion := -1; -- ==> ERROR
                    END IF;
                 ELSE
                    IF long_nombre(4) = 2 THEN
                       IF (ln_dif_long_nombre = 2 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    ELSE
                       -- long_nombre(4) = 1
                       IF (ln_dif_long_nombre = 1 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    END IF;
                 END IF;
              END IF;
           END IF;

           IF ln_validacion = -1 THEN
              ln_flag_valida_nombre (3) := 1;
              n_hay_error := 1;
              arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
           END IF;
         END IF;
--*/

/*--- Control 219: Primer nombre con mas de  "XX" iniciales ---*/
        ln_flag_valida_nombre (4) := 0;
        n_control := 219;
        ln_validacion := 0;
        IF arr_activ (n_control) = 'S' THEN
         -- PRIMER NOMBRE
         -- long_nombre(5)
           ln_long_nombre := nvl(length(ltrim(replace(upper(cur.primer_nombre),'X',' '))),0);
           ln_dif_long_nombre := long_nombre(5) - ln_long_nombre;

           IF long_nombre(5) > 4 THEN
             -- long_nombre(5) > 4
             IF ln_dif_long_nombre > 2 THEN
                ln_validacion := -1; -- ==> ERROR
             END IF;
           ELSE
              --  long_nombre(5) <= 4
              IF long_nombre(5) = 4 THEN
                 IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                    ln_validacion := -1; -- ==> ERROR
                 END IF;

              ELSE
                 -- long_nombre(5) < 4
                 IF long_nombre(5) = 3 THEN
                    IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                       ln_validacion := -1; -- ==> ERROR
                    END IF;
                 ELSE
                    IF long_nombre(5) = 2 THEN
                       IF (ln_dif_long_nombre = 2 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    ELSE
                       -- long_nombre(5) = 1
                       IF (ln_dif_long_nombre = 1 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    END IF;
                 END IF;
              END IF;
           END IF;

           IF ln_validacion = -1 THEN
              ln_flag_valida_nombre (4) := 1;
              n_hay_error := 1;
              arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
           END IF;
         END IF;

/*--- Control 220: Segundo nombre con mas de "XX" iniciales ---*/
        ln_flag_valida_nombre (5) := 0;
        n_control := 220;
        ln_validacion := 0;
        IF arr_activ (n_control) = 'S' THEN
         -- SEGUNDO NOMBRE
         -- long_nombre(6)
           ln_long_nombre := nvl(length(ltrim(replace(upper(cur.segundo_nombre),'X',' '))),0);
           ln_dif_long_nombre := long_nombre(6) - ln_long_nombre;

           IF long_nombre(6) > 4 THEN
             -- long_nombre(6) > 4
             IF ln_dif_long_nombre > 2 THEN
                ln_validacion := -1; -- ==> ERROR
             END IF;
           ELSE
              --  long_nombre(6) <= 4
              IF long_nombre(6) = 4 THEN
                 IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                    ln_validacion := -1; -- ==> ERROR
                 END IF;

              ELSE
                 -- long_nombre(6) < 4
                 IF long_nombre(6) = 3 THEN
                    IF (ln_dif_long_nombre = 2 OR ln_dif_long_nombre = 3) THEN
                       ln_validacion := -1; -- ==> ERROR
                    END IF;
                 ELSE
                    IF long_nombre(6) = 2 THEN
                       IF (ln_dif_long_nombre = 2 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    ELSE
                       -- long_nombre(6) = 1
                       IF (ln_dif_long_nombre = 1 ) THEN
                          ln_validacion := -1; -- ==> ERROR
                       END IF;
                    END IF;
                 END IF;
              END IF;
           END IF;

           IF ln_validacion = -1 THEN
              ln_flag_valida_nombre (5) := 1;
              n_hay_error := 1;
              arr_error (n_control) := arr_error (n_control) + 1;
              SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
           END IF;
         END IF;

/*--- Control 218: Verifica si APE_PATERNO y APE_MATERNO tienen cadenas invalidas ---*/
        n_control := 218;
        IF arr_activ (n_control) = 'S' THEN
           IF ln_flag_valida_nombre(1) = 1  AND
              ln_flag_valida_nombre(2) = 1 THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
           END IF;
        END IF;
     ELSE
        long_nombre(1) := 2;
     END IF;

/*--- Validación "XXXX" - FIN ---*/

-- Control 210: Apellido casada mal reportado
     IF long_nombre(1) = 1 THEN
        n_control := 210;
        IF arr_activ (n_control) = 'S' THEN
           n_hay_error := 1;
           arr_error (n_control) := arr_error (n_control) + 1;
           SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
        END IF;
     END IF;

/*--- Valida que campos en los nombres no se han reportado ---*/

-- Control 211: No se reporto apellido paterno
     IF long_nombre(1) = 2 THEN
        n_control := 211;
        IF arr_activ (n_control) = 'S' THEN
           IF long_nombre(2) <= 0 THEN
            n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
           END IF;
        END IF;

-- Controles 212 y 213: No se reporto apellido materno
        IF long_nombre(3) <= 0 THEN
           -- Reunion DERC: 15/04/2004
           -- Aceptar Blancos solo en los casos de personas extranjeras
           -- o que es lo mismo Tipo Documento distinto a '1', '3' o '4'
           -- OR
           -- No Aceptar blancos cuando sea tipo documento '1', '3' o '4'

           IF cur.tip_doc_iden IN ('1', '3', '4') THEN
               -- Validar que nombre no sea blanco; antes de ver si es error verificar si es casada
               ln_validacion := SF_DETERMINA_APELLIDO_CASADA( cur.genero, cur.estado_civil);
               -- IF cur.genero = 'F' AND cur.estado_civil in ('C','V','2','4') THEN
               IF ln_validacion = 1 THEN
                  n_control := 212;
                  IF arr_activ (n_control) = 'S' THEN
                     IF long_nombre(4) <= 0 THEN  -- No se reporto Apellido Materno o de Casada
                        n_hay_error := 1;
                        arr_error (n_control) := arr_error (n_control) + 1;
                        SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                     END IF;
                  END IF;
               ELSE
                  n_control := 213;
                  IF arr_activ (n_control) = 'S' THEN  -- No se reporto Apellido Materno
                     n_hay_error := 1;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                  END IF;
               END IF;
           END IF;
        END IF;

-- Control 214: Nombres no estan reportados en forma solicitada
        n_control := 214;
        IF arr_activ (n_control) = 'S' THEN
           IF long_nombre(5) <= 0 THEN
            n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
           END IF;
        END IF;
     END IF;
  END IF;

--     Doc. de identidad informado es diferente al registro en la SBS
       n_control := 48;
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.tip_doc_iden IS NOT NULL) AND (cur.num_doc_iden IS NOT NULL) AND
             cur.tip_doc_iden > ' ' AND cur.num_doc_iden > ' ' THEN
             ---  F.V.SH   2005-05-16
               IF (cur.tip_doc_iden <> n_tip_docto_ident_maes) OR (cur.num_doc_iden <> n_num_docto_ident_maes) THEN
                  IF ( cur.tip_doc_iden = n_tip_docto_ident_maes ) AND
                     ( n_tip_docto_ident_maes in ('3','4') ) AND
                     ( nvl(test_number(cur.num_doc_iden),-1) <> -1 and nvl(test_number(n_num_docto_ident_maes),-1) <> -1 ) AND
                     ( nvl(test_number(cur.num_doc_iden),-1) = nvl(test_number(n_num_docto_ident_maes),-2) ) THEN
                     -- Si El tipo de documento reportado es igual al del maestro y el Tipo doc es ('3' or '4')
                     -- y (es un dato numerico) y (son iguales) entonces no se activa el control 48
                     n_hay_error := n_hay_error;
                  ELSE
                     n_hay_error := 1;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                  END IF;
               END IF;
          --             Esta es la comparación correcta (con tipo y número de documento)
          --             IF (cur.tip_doc_iden <> n_tip_docto_ident_maes) OR (cur.num_doc_iden <> n_num_docto_ident_maes) THEN
          --               IF (cur.num_doc_iden <> n_num_docto_ident_maes) THEN
          --                   SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          --               END IF;
          END IF;
       END IF;

--     Código ONRP informado es diferente al registrado en la SBS
       n_control := 49;
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.cod_sunarp IS NOT NULL) AND cur.cod_sunarp > ' ' THEN
             IF cur.cod_sunarp <> n_cod_onrp_maes THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/**** Valida el tipo de Genero reportado (Sexo) ****/
   -- Valores validos: 'M','F' -> Persona Natural / Mancomunos
   --                  '0'     -> Persona Juridica

-- FVSH 27/04/2004: NUEVOS CAMBIOS DISPUESTOS POR LA 808
--       IF length(nvl(cur.genero,'')) = 0 OR cur.genero IS NULL THEN  -- no_informo_sexo
            -- mensaje para personas naturales
--          IF cur.tip_persona = '1' THEN
--             n_control := 163;
--             IF arr_activ (n_control) = 'S' THEN
--                SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--             END IF;
--          END IF;

            -- mensaje para personas juridicas o mancomunas
--          IF cur.tip_persona = '2' OR cur.tip_persona = '3' THEN
--             n_control := 164;
--             IF arr_activ (n_control) = 'S' THEN
--                SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--             END IF;
--          END IF;
--       ELSE  -- Hace la validacion por tipo de persona. Se esta considerando que este control es para datos <> a los solicitados
--          n_control := 144;
--          IF arr_activ (n_control) = 'S' THEN
--             IF (cur.genero NOT IN ('F', 'M','0')) THEN
--                 SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--             END IF;
--          END IF;

       -- Valida por tipo de persona para controlar el dato no reportado
       IF cur.tip_persona = '1' OR cur.tip_persona = '3' THEN  -- incluye Mancomunos Res 426
          -- Mensaje para Personas Naturales - DATOS VALIDOS   ('M','F')
          IF (cur.genero IN ('F','M')) THEN
             n_hay_error := n_hay_error;
          ELSE
             n_control := 144;
             IF length(nvl(cur.genero,'')) = 0 OR cur.genero IS NULL THEN
                n_control := 163;
             END IF;

             IF arr_activ (n_control) = 'S' THEN
                IF not(n_control = 144 AND cur.cod_sbs > 0 AND cur.tip_persona = '3') THEN
                   -- No actualiza control para mancomunos con cod_sbs   20070517  -- Temporal
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;

             IF cur.cod_sbs = 0 AND cur.genero = '0' THEN  -- Valida si el cliente es nuevo y reportado con cero
                n_control := 224;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          END IF;
       ELSE
          -- Mensaje para Personas Jurídicas (Se excluye Personas Mancomunas Res. 426)
          -- JCFS 18/05/2010: Se incluye el Tipo de Persona 4 (junto con el Tipo de Persona 2)
          IF cur.tip_persona IN ('2', '4') THEN
             IF length(nvl(cur.genero,'')) = 0 OR cur.genero IS NULL THEN  -- No informo sexo
                n_control := 164;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             ELSE
                IF (cur.genero NOT IN ('0')) THEN
                    n_control := 223;
                    IF arr_activ (n_control) = 'S' THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                    END IF;
                END IF;
             END IF;
          END IF;
       END IF;
-- Fin de Validación de Género (Sexo)

/**** Valida el Estado Civil ****/
   -- Valores validos:
       -- '1','2','3','4'  : Persona Natural   -- modificados con Fe de Erratas
       -- 'S','C','D','V'  : Persona Natural
       -- '0'   : Persona Juridica/ Mancomunos

--       IF length(nvl(cur.estado_civil,'')) = 0 OR cur.estado_civil IS NULL THEN  -- no informo estado civil
--          -- mensaje para personas naturales
--          IF cur.tip_persona = '1' THEN
--             n_control := 165;
--             IF arr_activ (n_control) = 'S' THEN
--                SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--             END IF;
--          END IF;

--          -- mensaje para personas juridicas o mancomunas
--          IF cur.tip_persona = '2' OR cur.tip_persona = '3' THEN
--             n_control := 166;
--             IF arr_activ (n_control) = 'S' THEN
--                SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--             END IF;
--          END IF;
--       ELSE     -- Se esta considerando que este control es para datos <> a los solicitados
--          n_control := 143;
--          IF arr_activ (n_control) = 'S' THEN
--             IF (cur.estado_civil NOT IN ('S','C','D','V')) THEN
--                 SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--             END IF;
--          END IF;
--       END IF;

       -- Valida por tipo de persona para controlar el dato no reportado
       IF cur.tip_persona = '1' OR cur.tip_persona = '3' THEN  -- Se realiza la misma validacion para Mancomunos, RES 426
          -- Mensaje para Personas Naturales o Mancomunas
          IF (cur.estado_civil IN ('S','C','D','V')) THEN
             n_hay_error := n_hay_error;
          ELSE
             n_control := 143;
             IF length(nvl(cur.estado_civil,'')) = 0 OR cur.estado_civil IS NULL THEN  -- No informo Estado Civil
                n_control := 165;
             END IF;

             IF arr_activ (n_control) = 'S' THEN
                IF not(n_control = 143 AND cur.cod_sbs > 0  AND cur.tip_persona = '3') THEN
                   -- No actualiza control para mancomunos con cod_sbs   20070517  -- Temporal
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;

             IF cur.cod_sbs = 0 AND cur.estado_civil = '0' THEN
                --valida si el cliente es nuevo y reportado estado civil en cero
                n_control := 225;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          END IF;
       ELSE
          -- Mensaje para Personas Juridicas
          -- JCFS 18/05/2010: Se incluye el Tipo de Persona 4 (junto con el Tipo de Persona 2)
          IF cur.tip_persona IN ('2', '4') THEN
             IF length(nvl(cur.estado_civil,'')) = 0 OR cur.estado_civil IS NULL THEN  -- No informo estado civil
                n_control := 166;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             ELSE
                IF (cur.estado_civil NOT IN ('0')) THEN
                    n_control := 222;
                    IF arr_activ (n_control) = 'S' THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                    END IF;
                END IF;
             END IF;
          END IF;
       END IF;
-- Fin de Validación de Estado Civil

/**** Validación de Indicador de Riesgo Cambiario Crediticio ****/
       n_rc := 0;
       n_rc := sf_valida_control_228 ( cur.ind_riesgo_camb_cred, n_reporte);
       IF n_rc <> 1 THEN
          n_control := 228;
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       ELSE
          n_rc := 0;
          n_rc := sf_valida_control_229 ( cur.ind_riesgo_camb_cred, n_reporte);
          IF n_rc <> 1 THEN
             n_control := 229;
             IF arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/**** Inicio valida Indicador de Atraso ****/
       n_rc := 0;
       n_rc := sf_valida_control_231 ( cur.ind_atraso, n_reporte);
       IF n_rc <> 1 THEN
          n_control := 231;
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       ELSE
          n_rc := 0;
          n_rc := sf_valida_control_232 ( cur.ind_atraso, n_reporte);
          IF n_rc <> 1 THEN
             n_control := 232;
             IF arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/**** Validación de la Clasificación Interna de la Entidad ****/
       n_rc := 0;
       n_rc := sf_valida_control_233 ( cur.clasif_interna_ent, n_reporte);
       IF n_rc <> 1 THEN
          n_control := 233;  -- JCFS 26/05/2010: Se corrige el código del Control... decía 231 en lugar de 233
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       ELSE
          n_rc := 0;
          n_rc := sf_valida_control_234 ( cur.clasif_interna_ent, n_reporte);
          IF n_rc <> 1 THEN
             n_control := 234;  -- JCFS 26/05/2010: Se corrige el código del Control... decía 232 en lugar de 234
             IF arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/**** JCFS 26/05/2010: Validación de la Clasificación del Deudor sin Alineamiento ****/
       n_rc := 0;
       n_rc := sf_valida_control_237 (cur.cla_deu_sin_ali, n_reporte);
       IF n_rc <> 1 THEN
          n_control := 237;
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       ELSE
          n_rc := 0;
          n_rc := sf_valida_control_238 (cur.cla_deu_sin_ali, n_reporte);
          IF n_rc <> 1 THEN
             n_control := 238;
             IF arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/**** JCFS 26/05/2010: Validación de la Fecha de Nacimiento ****/
       -- Fecha de nacimiento no informada para Tipo de Persona 1
       n_control := 161;
       IF cur.tip_persona = '1' AND (cur.fec_nac IS NULL OR cur.fec_nac <= '00000000') AND  -- cur.fec_nac <= '00000000' incluye cur.fec_nac = '0' y cur.fec_nac = '00000000'
          arr_activ (n_control) = 'S' THEN
          n_hay_error := 1;
          arr_error (n_control) := arr_error (n_control) + 1;
          SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
       END IF;

       -- Fecha de nacimiento no es válida o no corresponde al Tipo de Persona 1
       n_control := 162;
       -- JCFS 12/08/2010: Se modifica el control para que solo valide si la fecha es válida si el Tipo de Persona es 1
       IF cur.fec_nac IS NOT NULL AND cur.fec_nac > '00000000' AND arr_activ (n_control) = 'S' THEN
          IF cur.tip_persona = '1' THEN
             ld_fec_nac := SF_VALIDA_FECHA(cur.fec_nac);
             IF ld_fec_nac IS NULL THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
/*        -- JCFS 13/08/2010: A solicitud de JOrtiz se modifica la validación para que no reporte error si una Persona Jurídica reporta Fecha
          ELSE
             -- JCFS 12/08/2010: Si se reporta fecha de nacimiento para Tipo de Persona diferente de 1 también se activa el control
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
*/
          END IF;
       END IF;

/**** JCFS 26/05/2010: Validación del Tipo de Documento de Identidad Complementario ****/
       n_rc := 0;
       n_rc := sf_valida_control_239 (cur.tip_persona, cur.cod_pais, cur.tip_magnitud, cur.num_doc_trib, cur.tip_doc_iden, cur.tip_doc_iden_com, n_reporte);
       IF n_rc <> 1 THEN
          n_control := 239;
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       ELSE
          IF nvl(cur.tip_doc_iden_com, ' ') <> ' ' AND nvl(RTrim(cur.tip_doc_iden_com), ' ') <> ' ' THEN -- AND nvl(cur.tip_doc_iden_com, ' ') <> '00'
             -- Tipo de Documento de Identidad Complementario no es válido (no es 05, 06, 11, 12, 13 ni 19)
             n_rc := 0;
             n_rc := sf_valida_control_240 (cur.tip_doc_iden_com, n_reporte);
             IF n_rc <> 1 THEN
                n_control := 240;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             ELSE
                -- Tipo de Documento de Identidad Complementario no corresponde al Tipo de Persona, Nacionalidad y Tipo de Documento de Identidad
                n_rc := 0;
                n_rc := sf_valida_control_241 (cur.tip_persona, cur.cod_pais, cur.tip_magnitud, cur.num_doc_trib, cur.tip_doc_iden, cur.tip_doc_iden_com, n_reporte);
                IF n_rc <> 1 THEN
                   n_control := 241;
                   IF arr_activ (n_control) = 'S' THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                END IF;
             END IF;
          END IF;
       END IF;

/**** JCFS 26/05/2010: Validación del Documento de Identidad Complementario ****/
       n_rc := 0;
       n_rc := sf_valida_control_242 (cur.tip_doc_iden_com, cur.num_doc_iden_com, n_reporte);
       IF n_rc <> 1 THEN
          n_control := 242;
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       ELSE
          n_rc := 0;
          n_rc := sf_valida_control_243 (cur.tip_doc_iden_com, cur.num_doc_iden_com, n_reporte);
          IF n_rc <> 1 THEN
             n_control := 243;
             IF arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;

/**** JAGJ 31/07/2013 Validacion Indicador de Sobre Endeudamiento ****/
       n_rc := 0;
       n_rc := sf_valida_control_250 ( cur.ind_sobreendeudamiento, n_reporte);
       IF n_rc <> 1 THEN
          n_control := 250;
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
          END IF;
       ELSE
          n_rc := 0;
          n_rc := sf_valida_control_251 ( cur.ind_sobreendeudamiento, n_reporte);
          IF n_rc <> 1 THEN
             n_control := 251;
             IF arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
       END IF;


/*****************************************/
/**** Registros de Saldos del Cliente ****/
/*****************************************/

       FOR cur_sld in cur_c (cur.num_sec_reg) LOOP
          n_sec_saldos := cur_sld.num_sec_reg;  -- Número de Secuencia

/**** Código de la Oficina ****/
          -- JCFS 12/09/2011: Se reescribe toda la validación de oficinas, para que utilice una tabla indexada en lugar de arreglos
          IF colInxOficinas.EXISTS(cur_sld.cod_oficina) THEN
             ls_ind_reporta_rcd := colInxOficinas(cur_sld.cod_oficina).ind_reporta_f16;
             ls_ubigeo_oficina  := colInxOficinas(cur_sld.cod_oficina).cod_dpto ||
                                   colInxOficinas(cur_sld.cod_oficina).cod_prov ||
                                   colInxOficinas(cur_sld.cod_oficina).cod_dist;
             ls_tip_est_oficina := colInxOficinas(cur_sld.cod_oficina).tip_est_oficina;

             n_control := 32;   -- Oficina no identificada para reportar RCD
             IF ls_ind_reporta_rcd <> 'S' and arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;

             n_control := 170;  -- Ubigeo de la oficina no corresponde al registrado en la SBS
             IF ls_ubigeo_oficina <> cur_sld.cod_ubigeo_ofic and arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;

             -- JCFS 12/09/2011: Nuevo control 249, que verifica para una entidad en operación, que la oficina reportada no esté cerrada
             n_control := 249;  -- Oficina cerrada en el Maestro de Oficinas
             IF ls_estado_entidad = 'OP' and ls_tip_est_oficina = 'CE' and arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          ELSE
             n_control := 81;   -- Oficina no existe en la Tabla de Oficinas
             IF arr_activ (81) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

/**** Código de la Cuenta ****/
          IF cur_sld.cod_cuenta IS NULL OR (cur_sld.cod_cuenta IN (' ', '0')) THEN
             n_control := 171;
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
          ELSE
             n_cod_cuenta := Test_Number(cur_sld.cod_cuenta);
             IF n_cod_cuenta IS NULL THEN
                n_control := 172;
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             ELSE
                n_control := 173;
                IF arr_activ (n_control) = 'S' THEN
                   n_cod_cuenta := Substr(cur_sld.cod_cuenta,1,2)||'0'||Substr(cur_sld.cod_cuenta,4,11);
--                 22 DIC 2003 (JLT) A solicitud de Informática (Jenny Ortiz) se inhibe el acceso a las cuentas contables fijas.
--                 Busca en relación de Cuentas Contables que aún no se han creado en el Plan de Cuentas
--                    n_existe_ctaaux := 0; n_bus_ctaaux    := 0;
--                    FOR n_bus_ctaaux in 1..20 LOOP
--                        IF arr_ctaaux (n_bus_ctaaux) = n_cod_cuenta THEN
--                           n_existe_ctaaux := 1;
--                           GOTO fin_ctaaux;
--                        END IF;
--                    END LOOP;
                   BEGIN
                      SELECT ind_reporte_rcd INTO n_ind_cta_rcd
                        FROM REG_PLAN_CUENTA
                       WHERE tip_plan = 'MF' AND num_version = '1' AND cod_cta = n_cod_cuenta;

                      IF SQL%ROWCOUNT = 0 THEN
                         n_hay_error := 1;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                      ELSE
                         n_control := 174;
                         IF arr_activ (n_control) = 'S' THEN
                            IF n_ind_cta_rcd <> 'S' THEN
                               n_hay_error := 1;
                               arr_error (n_control) := arr_error (n_control) + 1;
                               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                            END IF;
                         END IF;
                      END IF;
                   EXCEPTION
                      WHEN OTHERS THEN
                         n_control := 173;
                         IF arr_activ (n_control) = 'S' THEN
                            n_hay_error := 1;
                            arr_error (n_control) := arr_error (n_control) + 1;
                            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                         END IF;
                      END;
                END IF;
             END IF;
          END IF;

          -- Código de cuenta de una moneda no considerada para el RCD
          n_control := 175;
          IF arr_activ (n_control) = 'S' THEN
             IF cur_sld.cod_cuenta IS NULL OR (cur_sld.cod_cuenta NOT IN (' ', '0')) THEN
                IF Substr(cur_sld.cod_cuenta,3,1) NOT IN ('1', '2', '3') THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          END IF;

/**** Tipo de Crédito ****/
         -- Verifica si el Código del Tipo de Crédito no ha sido reportado
          n_control := 179;
          IF ( arr_activ (n_control) = 'S' ) AND
             ( cur_sld.cod_tipo_cre IS NULL OR (cur_sld.cod_tipo_cre IN (' ', '0')) ) THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
          ELSE
            -- Tipo de crédito no es válido
            -- JCFS 18/05/2010: Se incluyen los nuevos valores según la Resolución 11356
             n_control := 180;
             IF arr_activ (n_control) = 'S' THEN
                IF cur_sld.cod_tipo_cre NOT IN ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '99') THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;

             -- JCFS 08/09/2010: Nueva validación (Res. 11356)
             -- Tipo de Crédito no puede tener valores del 01 al 05 para Tipo de Persona Natural
              n_control := 248;
              IF arr_activ (n_control) = 'S' THEN
                 n_rc := 0;
                 n_rc := sf_valida_control_248 ( cur.tip_persona, cur_sld.cod_tipo_cre, n_reporte );
                 IF n_rc <> 1 THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                 END IF;
              END IF;
          END IF;

/**** Condición Especial de Cuenta ****/
--        Condición Especial de Cuenta no informada
          n_control := 206;
          IF arr_activ (n_control) = 'S' THEN
             IF cur_sld.cond_esp_cta IS NULL OR (cur_sld.cond_esp_cta IN ('  ', '00')) THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

--        Condición Especial de Cuenta no es válido (no es '02', '04', '05', '07', '08', '06')
          n_control := 207;
          IF arr_activ (n_control) = 'S' THEN
--             IF cur_sld.cond_esp_cta NOT IN ('01', '02', '03', '04', '05', '06','11','12','13') THEN
             -- JCFS 18/05/2010: Se modifican los valores correctos por los indicados en la Res. 11356
             -- JCFS 15/06/2011: Se agregan los nuevos valores para la Condición Especial de Cuenta
             IF cur_sld.cond_esp_cta NOT IN ('02', '04', '05', '06', '07', '08', '21', '22', '23', '24', '25', '26') THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

/**** Condición de Disponibilidad ****/
--        Condición de Disponibilidad no informado
          n_control := 208;
          IF arr_activ (n_control) = 'S' THEN
             IF cur_sld.cond_disponibilidad IS NULL OR (cur_sld.cond_disponibilidad IN ('  ', '00')) THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

--        Condición de Disponibilidad no es válido (no es '01', '02')
          n_control := 209;
          IF arr_activ (n_control) = 'S' THEN
             -- JCFS 15/06/2011: Se agregan los nuevos valores para la Condicion de Disponibilidad
             -- JCFS 04/07/2011: Se elimina el valor '01', según lo indicado en la Resolución SBS N°6007-2011 del 03.05.11
             IF cur_sld.cond_disponibilidad NOT IN ('02', '11', '12', '13', '19', '21', '22', '23', '29', '99') THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

/**** Tipo de Crédito y Cuenta ****/
--        Tipo de crédito no corresponde a la cuenta
          n_control := 181;
          IF arr_activ (n_control) = 'S' THEN
             IF Substr(cur_sld.cod_cuenta,1,2) = '14' THEN
                n_rc := 0;
                -- JCFS 16/06/2010:  Llamada a nueva función para verificar que el Tipo de Crédito corresponda con el Campo Cuenta
                n_rc := sf_valida_control_181 (cur_sld.cod_cuenta, cur_sld.cod_tipo_cre, n_reporte);
                IF n_rc <> 1 THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          END IF;

-- JCFS 26/05/2010: Nueva validación (Res. 11356)
--        Tipo de Crédito con valor 99 en Cuenta de Deuda o Castigos
          n_control := 244;
          IF arr_activ (n_control) = 'S' THEN
             n_rc := 0;
             n_rc := sf_valida_control_244 (i_anopro, i_mespro, cur_sld.cod_tipo_cre, cur_sld.cod_cuenta, n_reporte);
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

/**** Saldo de la cuenta ****/
          n_val_saldo := Test_Number(cur_sld.val_saldo);
          IF n_val_saldo IS NULL THEN
             n_val_saldo := 0;
          END IF;
          n_val_saldo_cli := n_val_saldo_cli + n_val_saldo;

--        Cuenta informada con saldo cero (no debe reportarse)
          n_control := 185;
          IF arr_activ (n_control) = 'S' THEN
             IF n_val_saldo = 0 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

--        Control 187 inhibido y desactivado en tabla CRA_CONTROLES_VALIDACION a partir del 30 de Mayo del 2003 debido a que
--        se incluye en control 186 (Saldo de la cuenta no es numérico o tiene signo y/o punto decimal).
/*
          n_control := 187;
          IF arr_activ (n_control) = 'S' THEN
             IF n_val_saldo < 0 THEN
                SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
*/

/**** Condición en Días ****/
          n_can_dias := Test_Number(cur_sld.can_dias);  -- Cantidad de dias
          -- FVSH 2004-08-16: Se activara un nuevo control para controlar numeros negativos reportados en la condicion en dias.
--        IF n_can_dias IS NULL THEN  -- Condición en dias no es numérico
--           n_control := 182;
--           SP_VAL_GRABA_VALID_ERRORES_RCD (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );

          IF n_can_dias IS NULL OR n_can_dias < 0 THEN
             IF n_can_dias IS NULL THEN
--           Condición en dias no es numérico
                n_control := 182;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             ELSE
--              Condicion en dias es negativo
                n_control := 227;
                IF arr_activ (n_control) = 'S' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             END IF;
          ELSE
--              JCFS 12/08/2010: Se reemplaza toda la lógica existente de la validación de la condición en días
--                               por una validación simple sobre la tabla cra_rel_condicion_cuenta
--                               ( mediante una búsqueda en la Tabla Indexada cargada al inicio del Proceso )
/*
             n_control := 183;
             IF arr_activ (n_control) = 'S' THEN
                IF Substr(cur_sld.cod_cuenta,1,2) = '14' AND
                   Substr(cur_sld.cod_cuenta,4,1) IN ('1', '3', '4', '5') THEN
--                  Créditos Vigentes, Reestructurados, Refinanciados, Vencidos:
                    IF Substr(cur_sld.cod_cuenta,5,2) IN ('01', '02', '03', '04') THEN
                       IF Substr(cur_sld.cod_cuenta,7,2) = '04' THEN
--                        Sobregiros en cuenta corriente:
                          IF Substr(cur_sld.cod_cuenta,5,2) IN ('01', '02', '03') THEN
--                           Comercial, MES, Consumo
                             n_lim_max_dias := 30;
                          ELSE
--                           Hipotecario
                             n_lim_max_dias := 0;
                          END IF;
                       ELSE
                          IF Substr(cur_sld.cod_cuenta,7,2) IN ('11', '12') THEN
--                           Operaciones de arrendamiento financiero:
                             IF Substr(cur_sld.cod_cuenta,5,2) IN ('01', '02', '03') THEN
--                              Comercial, MES, Consumo
                                n_lim_max_dias := 90;
                             ELSE
--                              Hipotecario
                                n_lim_max_dias := 0;
                             END IF;
                          ELSE
--                           Créditos por liquidar:
                             IF Substr(cur_sld.cod_cuenta,7,2) = '21' THEN
                                IF Substr(cur_sld.cod_cuenta,5,2) = '01' THEN
--                                 Comercial
                                   n_lim_max_dias := 15;
                                ELSE
--                                 MES
                                   IF Substr(cur_sld.cod_cuenta,5,2) = '02' THEN
                                      n_lim_max_dias := 30;
                                   ELSE
--                                    Consumo, Hipotecario
                                      n_lim_max_dias := 0;
                                   END IF;
                                END IF;
                             ELSE
--                              Otros créditos:
                                IF Substr(cur_sld.cod_cuenta,5,2) = '01' THEN
--                                 Comercial
                                   n_lim_max_dias := 15;
                                ELSE
--                                 MES
                                   IF Substr(cur_sld.cod_cuenta,5,2) = '02' THEN
                                      n_lim_max_dias := 30;
                                   ELSE
--                                    Consumo, Hipotecario
                                      n_lim_max_dias := 90;
                                   END IF;
                                END IF;
                             END IF;
                          END IF;
                       END IF;
                    END IF;
                    IF Substr(cur_sld.cod_cuenta,4,1) IN ('1', '3', '4') THEN
--                     Créditos Vigentes, Reestructurados, Refinanciados:
                       n_lim_min_dias := 0;
                    ELSE
--                     Créditos Hipotecarios:
                       IF Substr(cur_sld.cod_cuenta,5,2) = '01' THEN
                          n_lim_min_dias := 16;
                       ELSE
                          n_lim_min_dias := 31;
                       END IF;
                       n_lim_max_dias := n_lim_max_dias + 90;
                    END IF;
                    IF n_can_dias < n_lim_min_dias OR n_can_dias > n_lim_max_dias THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                    END IF;
                ELSE
                   ------------   ----------------------
                   -- (FVSH) Se considera a partir del 16.JUN.2005, de acuerdo a requerimiento.
                   -- CUentas adicionales : 7101, 7102, 7103 y 7104
                   ------------   ----------------------
                   --IF  Substr(cur_sld.cod_cuenta,1,2) = '71' AND Substr(cur_sld.cod_cuenta,4,1) = '6' THEN
                   IF  Substr(cur_sld.cod_cuenta,1,2) = '71' AND Substr(cur_sld.cod_cuenta,4,1) in ('1','2','3','4','6') THEN
--                     Instrumentos financieros derivados:
--                     Se permite el máximo posible (9999 días), por no haberse establecido el
--                     límite para los instrumentos financieros derivados.
                       n_lim_min_dias := 0;
                       n_lim_max_dias := 9999;
                   ELSE
--                     Cuentas Incobrables Castigadas
--                     (JLT) Se considera a partir del 04.FEB.2003, de acuerdo a requerimiento
                       IF  Substr(cur_sld.cod_cuenta,1,2) = '81' AND Substr(cur_sld.cod_cuenta,4,1) = '3' THEN
                           n_lim_min_dias := 0;
                           n_lim_max_dias := 9999;
                       ELSE
--                         Créditos en Cobranza Judicial
--                         (JLT) Se considera a partir del 13.JUN.2003, de acuerdo a requerimiento
                           IF  Substr(cur_sld.cod_cuenta,1,2) = '14' AND Substr(cur_sld.cod_cuenta,4,1) = '6' THEN
                               n_lim_min_dias := 0;
                               n_lim_max_dias := 9999;
                           ELSE
                           ---------------
--                             Rendimientos de Créditos y Rentas en Suspenso
--                             (FVSH) Se considera a partir del 15.MAR.2005, de acuerdo a requerimiento.
                               IF  Substr(cur_sld.cod_cuenta,1,2) = '81' AND Substr(cur_sld.cod_cuenta,4,1) = '4' THEN
                                   n_lim_min_dias := 0;
                                   n_lim_max_dias := 9999;
                               ELSE
--                                 Rendimientos Devengados de Créditos Vigentes
--                                 (FVSH) Se considera a partir del 15.MAR.2005, de acuerdo a requerimiento.
                                   IF  Substr(cur_sld.cod_cuenta,1,2) = '14'
                                   AND Substr(cur_sld.cod_cuenta,4,1) = '8' THEN
                                       n_lim_min_dias := 0;
                                       n_lim_max_dias := 9999;
                                   ELSE
--                                     Garantias Recibidas por Operaciones de Crédito
--                                     (FVSH) Se considera a partir del 15.MAR.2005, de acuerdo a requerimiento.
                                       IF  Substr(cur_sld.cod_cuenta,1,2) = '84'
                                       AND Substr(cur_sld.cod_cuenta,4,1) = '4' THEN
                                           n_lim_min_dias := 0;
                                           n_lim_max_dias := 9999;
                                       ELSE
                                        ------------  ----------------
                                        -- Contratos de Arrendamiento financiero reseultos
                                        --   (FVSH) Se considera a partir del 16.JUN.2005, de acuerdo a requerimiento.
                                        --   Cuenta:   15070406
                                          IF  Substr(cur_sld.cod_cuenta,1,2) = '15'
                                          AND Substr(cur_sld.cod_cuenta,4,5) = '70406' THEN
                                              n_lim_min_dias := 0;
                                              n_lim_max_dias := 9999;
                                          ELSE
                                             -- Contratos de Arrendamiento financiero reseultos
                                             --   (FVSH) Se considera a partir del 16.JUN.2005, de acuerdo a requerimiento.
                                             --   Cuenta:   16070405
                                             IF Substr(cur_sld.cod_cuenta,1,2) = '16' AND
                                                Substr(cur_sld.cod_cuenta,4,5) = '70405' THEN
                                                n_lim_min_dias := 0;
                                                n_lim_max_dias := 9999;
                                             ELSE
                                                 -- Condición en dias no aplica a la cuenta
                                                 n_control := 184;
                                                 IF arr_activ (n_control) = 'S' THEN
                                                    IF n_can_dias > 0 THEN
                                                       n_hay_error := 1;
                                                       arr_error (n_control) := arr_error (n_control) + 1;
                                                       SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                                                    END IF;
                                                 END IF;
                                             END IF;
                                          END IF;
                                       END IF;
                                   END IF;
                               END IF;
                           END IF;
                       END IF;
                   END IF;
                END IF;
             END IF;
*/

             n_cod_cuenta := Substr(cur_sld.cod_cuenta,1,2)||'0'||Substr(cur_sld.cod_cuenta,4,11);

--           Condición en dias fuera de los límites reglamentados
             n_control := 183;
             IF arr_activ (n_control) = 'S' THEN
                IF colInxCondicionDias.EXISTS(n_cod_cuenta) THEN
                   n_lim_min_dias := colInxCondicionDias(n_cod_cuenta).minimo;
                   n_lim_max_dias := colInxCondicionDias(n_cod_cuenta).maximo;
                   IF n_can_dias < n_lim_min_dias OR n_can_dias > n_lim_max_dias THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                END IF;
             END IF;

--           Condición en días no aplica a la cuenta
             n_control := 184;
             IF arr_activ (n_control) = 'S' THEN
                IF n_can_dias > 0 THEN
                   IF NOT colInxCondicionDias.EXISTS(n_cod_cuenta) THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                END IF;
             END IF;
          END IF;

/**** Factor de Conversión Crediticio ****/
          n_control := 245;
          IF arr_activ (n_control) = 'S' THEN
             n_rc := 0;
             n_rc := sf_valida_control_245 (cur_sld.fac_conv_cred, n_reporte);
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          ELSE
             n_control := 246;
             IF arr_activ (n_control) = 'S' THEN
                n_rc := 0;
                n_rc := sf_valida_control_246 (cur_sld.fac_conv_cred, n_reporte);
                IF n_rc <> 1 THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             ELSE
                n_control := 247;
                IF arr_activ (n_control) = 'S' THEN
                   n_rc := 0;
                   n_rc := sf_valida_control_247 (cur_sld.cod_tipo_cre, cur_sld.fac_conv_cred, n_reporte);
                   IF n_rc <> 1 THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                   END IF;
                END IF;
             END IF;
          END IF;

      END LOOP;
      -- Fin movimientos de Saldos de Clientes

      -- FVSH  2004-07-19: Validacion de la calificacion con la cuenta asociada
      -- por ejemplo, se trata de validar que la clasificacion '8' no este asociada a una cuenta de Total de deuda.
      -- (ver descripcion en el cursor)

      IF cur.tip_clasif_clie NOT IN ('0', '1', '2', '3', '4') THEN
         n_control := 226;
         IF arr_activ (n_control) = 'S' THEN
            FOR cur_clas in cur_clasif (cur.num_sec_reg) LOOP
               -- FVSH 2004-07-19: Encontro una cuenta en los conceptos ==> compara con la de clasificacion reportada para dicho deudor
               n_hay_error := 1;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
               -- Sale del cursor despues de efectuar una comparacion. Recordar que la clasificacion es dato identificacion
               EXIT;
            END LOOP;
         END IF;
      END IF;
   END LOOP;      ---  FIN CUR_B (Registros de Identificación)
END LOOP;

ln_paso := ln_iter + 1;
INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
VALUES (i_anopro, i_mespro, 'RCD', '52', ln_paso, SYSDATE, 'FIN DE LA VALIDACIÓN DE REGISTROS', i_codemp);
COMMIT;

---------------   FIN  DE  LAS  ITERACIONES  -----------     FVSH 20061121

-- Totales
   IF arr_activ (191) = 'S' THEN
      OPEN cur_d;
      n_cont_total := 0;
      FOR cur_total in cur_e LOOP
         IF arr_activ (173) = 'S' THEN
            n_cod_cuenta := Substr(cur_total.cod_cuenta,1,2)||'0'||Substr(cur_total.cod_cuenta,4,11);
--          22 DIC 2003 (JLT) A solicitud de Informática (Jenny Ortiz) se inhibe el acceso a las cuentas contables fijas.
--           Busca en relación de Cuentas Contables que aún no se han creado en el Plan de Cuentas
--             n_existe_ctaaux := 0;
--             n_bus_ctaaux    := 0;
--             FOR n_bus_ctaaux in 1..20 LOOP
--                 IF arr_ctaaux (n_bus_ctaaux) = n_cod_cuenta THEN
--                    n_existe_ctaaux := 1;
--                    GOTO fin_ctaaux;
--                 END IF;
--             END LOOP;
--             <<fin_ctaaux>>
--             IF n_existe_ctaaux = 0 THEN
            BEGIN
               SELECT ind_reporte_rcd INTO n_ind_cta_rcd
                 FROM REG_PLAN_CUENTA
                WHERE tip_plan = 'MF' AND num_version = '1' AND cod_cta = n_cod_cuenta;

               IF SQL%ROWCOUNT = 0 THEN
                  n_control := 173;
                  n_hay_error := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_total.num_sec_reg, cur_total.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
               ELSE
                  n_control := 174;
                  IF arr_activ (n_control) = 'S' THEN
                     IF n_ind_cta_rcd <> 'S' THEN
                        n_hay_error := 1;
                        arr_error (n_control) := arr_error (n_control) + 1;
                        SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_total.num_sec_reg, cur_total.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                     END IF;
                  END IF;
               END IF;
            EXCEPTION
               WHEN OTHERS THEN
                  n_control := 173;
                  IF arr_activ (n_control) = 'S' THEN
                     n_hay_error := 1;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_total.num_sec_reg, cur_total.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                  END IF;
                END;
--             END IF;
          END IF;

-- Control 191: Saldo no consolidado por cuenta, tip.crédito y cond.días (Reg.duplicado)
          n_cont_total := n_cont_total + 1;
          n_candia := to_number(cur_total.can_dias);
          IF n_cont_total > 1 THEN
             IF cur_total.cod_cuenta = n_cod_cuenta_ant AND cur_total.cod_tipo_cre  = n_cod_tipo_cre_ant AND n_candia = n_candia_ant THEN
                n_control := 191;
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  cur_total.num_sec_reg, cur_total.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;

-- Control 188: Saldo por cuenta, tipo de cred. y cond.dias no fue informado en el detalle
          n_cod_cuenta_ant   := cur_total.cod_cuenta;
          n_cod_tipo_cre_ant := cur_total.cod_tipo_cre;
          n_candia_ant       := n_candia;
          n_control := 188;
          IF arr_activ (n_control) = 'S' THEN
             FETCH cur_d
             INTO n_cod_cuenta, n_cod_tipo_cre, n_can_dias, n_val_saldo_t;

             IF (n_cod_cuenta_ant <> n_cod_cuenta) OR (n_cod_tipo_cre_ant <> n_cod_tipo_cre) OR (n_candia_ant <> n_can_dias) THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_total.num_sec_reg, cur_total.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
          END IF;
      END LOOP;
      CLOSE cur_d;
   END IF;

ln_paso := 1;
INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DE LAS VALIDACIONES DE TOTALES', i_codemp);
COMMIT;

-- Control 189: Saldo en el registro de totales no cuadra con la suma de su detalle
   n_control := 189;
   IF arr_activ (n_control) = 'S' THEN
      IF arr_error (191) = 0 THEN
         -- JCFS 2012-02: Se reemplaza la lógica de dos cursores (cur_d y cur_e) por un solo cursor (cur_f)
         FOR cur_tot in cur_f LOOP
            n_hay_error := 1;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, cur_tot.num_sec_reg, cur_tot.num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
         END LOOP;
/*
         OPEN cur_e;
         FOR cur_tot in cur_d LOOP
             FETCH cur_e
             INTO n_num_sec_reg, n_num_sec_cta, n_cod_cuenta, n_cod_tipo_cre, n_can_dias, n_val_saldo_t;

             IF cur_tot.cod_cuenta  = n_cod_cuenta AND cur_tot.cod_tipo_cre = n_cod_tipo_cre AND cur_tot.can_dias = n_can_dias THEN
                IF cur_tot.val_saldo <> n_val_saldo_t THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, n_num_sec_reg, n_num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
                END IF;
             ELSE
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control, n_num_sec_reg, n_num_sec_cta, 'VA', arr_tipcon(n_control), n_reporte );
             END IF;
         END LOOP;
         CLOSE cur_e;
*/
      END IF;
   END IF;

ln_paso := ln_paso + 1;
INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DE LA VALIDACIÓN DEL CONTROL 189', i_codemp);
COMMIT;


-- Control 197: Cliente informado en distintas secuencias con identificación en común en la SBS
-- FVSH 2005-05-16: Modificacion realizada, en esta validacion ya no se considera la clasificacion.
   n_control := 197;
   IF arr_activ (n_control) = 'S' THEN
      FOR cur_cod_dup in cur_codsbs_duplicados LOOP
         lv_cod_sbs := cur_cod_dup.cod_sbs;

         FOR cur_sec_dup IN CUR_SEC_DUPLICADAS LOOP
            n_num_sec_reg := cur_sec_dup.num_sec_reg;
            n_hay_error := 1;
            arr_error (n_control) := arr_error (n_control) + 1;
            SP_VAL_GRABA_VALID_ERRORES (i_anopro, i_mespro, i_codemp, n_control,  n_num_sec_reg, 0, 'VA', arr_tipcon(n_control), n_reporte );
         END LOOP;
      END LOOP;
   END IF;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DE LA VALIDACIÓN DEL CONTROL 197', i_codemp);
   COMMIT;

--  Actualiza CRA_NRO_VALIDACION
    UPDATE CRA_NRO_VALIDACION
       SET fec_fin_val = sysdate, cod_est_val = 'T'
     WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD' AND
           cod_empresa = i_codemp AND num_seq_val = n_num_seq_val;

    COMMIT;

-- Actualiza CRA_VAL_CONTROLES_X_EMPRESA
   SP_GRABA_CONTROL_RCD_X_EMPRESA ('RCD', i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_GRABA_CONTROL_RCD_X_EMPRESA');
   n_cod_ide_pro := 400;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DEL REGISTRO DE CONTROLES X EMPRESA', i_codemp);
   COMMIT;

-- Obtiene total registros de identificacion
   SELECT count(1) INTO n_tot_reg_identif
     FROM CRA_VALID_IDENTIF_RCD
    WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp AND tip_informacion = '1';

-- Obtiene total registros de saldos
   SELECT count(1) INTO n_tot_reg_saldos
     FROM CRA_VALID_SALDOS_RCD
    WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp AND tip_informacion = '1';

-- Obtiene total registros de saldos de totales
   SELECT count(1) INTO n_tot_reg_tot
     FROM CRA_VALID_SALDOS_RCD
    WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp AND tip_formulario  = '2'
      AND tip_informacion = '2';

-- Calcula total registros
   n_tot_reg := n_tot_reg_identif + n_tot_reg_saldos;

-- Obtiene el total deuda de la empresa
   n_tot_deu       := SF_OBT_TOTAL_DEUDA_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el número total de registros observados en la Empresa en Validación.
   n_tot_err       := SF_OBT_TOTAL_ERRORES_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el número total de clientes en la empresa
   n_tot_cli       := SF_OBT_TOTAL_CLIENTES_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el número total de clientes observados en la empresa
   n_tot_cli_err   := SF_OBT_TOTAL_CLI_ERR_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el total deuda de la empresa con errores
   n_tot_deu_err   := SF_OBT_TOTAL_DEUDA_OBSERVADA (i_anopro, i_mespro, i_codemp);

-- Obtiene el número total de clientes con errores por tipo de control validez
   n_tot_cli_err_v := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el total deuda con errores por tipo de control validez
   n_tot_deu_err_v := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el número total de clientes con errores por tipo de control consistencia
   n_tot_cli_err_c := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el total deuda con errores por tipo de control consistencia
   n_tot_deu_err_c := SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el número total de clientes con errores por tipo de control alerta
   n_tot_cli_err_a := SF_OBT_TOTAL_CLI_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'A');

-- Obtiene el total deuda con errores por tipo de control alerta
   n_tot_deu_err_a := NULL;   -- SF_OBT_TOTAL_DEUDA_TIPO (i_anopro, i_mespro, i_codemp, 'A');

-- Actualiza CRA_TOTALES_VALIDACION
   BEGIN
     SELECT num_tot_reg INTO n_tot_reg_aux
       FROM CRA_TOTALES_VALIDACION
      WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD' AND cod_empresa = i_codemp;

     UPDATE CRA_TOTALES_VALIDACION
        SET num_tot_reg       = n_tot_reg,       val_tot_deu       = n_tot_deu,
            num_tot_err       = n_tot_err,       num_tot_cli       = n_tot_cli,
            num_tot_cli_err   = n_tot_cli_err,   val_tot_deu_err   = n_tot_deu_err,
            num_tot_reg_tot   = n_tot_reg_tot,   num_tot_cli_err_v = n_tot_cli_err_v,
            val_tot_deu_err_v = n_tot_deu_err_v, num_tot_cli_err_c = n_tot_cli_err_c,
            val_tot_deu_err_c = n_tot_deu_err_c, num_tot_cli_err_a = n_tot_cli_err_a,
            val_tot_deu_err_a = n_tot_deu_err_a
      WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte = 'RCD' AND cod_empresa = i_codemp;
   EXCEPTION
      WHEN OTHERS THEN
         INSERT INTO CRA_TOTALES_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_tot_reg, val_tot_deu, num_tot_err, num_tot_cli, num_tot_cli_err, val_tot_deu_err,
                      num_tot_reg_tot, num_tot_cli_err_v, val_tot_deu_err_v, num_tot_cli_err_c, val_tot_deu_err_c, num_tot_cli_err_a, val_tot_deu_err_a )
              VALUES (i_anopro, i_mespro, 'RCD', i_codemp, n_tot_reg, n_tot_deu, n_tot_err, n_tot_cli, n_tot_cli_err, n_tot_deu_err, n_tot_reg_tot,
                      n_tot_cli_err_v, n_tot_deu_err_v, n_tot_cli_err_c, n_tot_deu_err_c, n_tot_cli_err_a, n_tot_deu_err_a);
   END;

   COMMIT;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DE LA ACTUALIZACIÓN DE LA TABLA CRA_TOTALES_VALIDACION', i_codemp);
   COMMIT;

-- Actualiza códigos SBS reemplazados
   FOR cur_reemp in cur_g LOOP
       UPDATE CRA_VALID_IDENTIF_RCD
          SET cod_sbs = cur_reemp.cod_sbs_ult_rplzte
        WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp
          AND cod_sbs = cur_reemp.cod_sbs_rplzdo;
       COMMIT;
   END LOOP;

ln_paso := ln_paso + 1;
INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DE LA ACTUALIZACIÓN DE LOS CÓDIGOS SBS REEMPLAZADOS', i_codemp);
COMMIT;


-- Extracción de registros sin código SBS en el movimiento RCD
   SP_VAL_EXTRAE_RCD_SIN_CODSBS ('RCD', i_anopro, i_mespro, i_codemp);

   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_VAL_EXTRAE_RCD_SIN_CODSBS');
   n_cod_ide_pro := 400;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

ln_paso := ln_paso + 1;
INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DE LA EXTRACCIÓN DE REGISTROS SIN CÓDIGO SBS', i_codemp);
COMMIT;

   BEGIN
     n_reg_altas := 0;
     SELECT COUNT(1) INTO n_reg_altas
       FROM CRA_VALID_ASIG_CODSBS
      WHERE ano_refer    = i_anopro
        AND mes_refer    = i_mespro
        AND cod_reporte  = 'RCD'
        AND cod_empresa  = i_codemp;

   EXCEPTION
      WHEN OTHERS THEN
         n_error := SQLERRM;
   END;

   n_reg_no_alertas := 0;
   IF n_reg_altas = 0 THEN
      BEGIN
        SELECT SUM(num_veces) INTO n_reg_no_alertas
          FROM CRA_VAL_CONTROLES_X_EMPRESA "A",
               CRA_CONTROL_HIS_VALIDACION  "B"
         WHERE A.ano_refer      = i_anopro
           AND A.mes_refer      = i_mespro
           AND A.cod_empresa    = i_codemp
           AND A.ano_refer      = B.ano_refer
           AND A.mes_refer      = B.mes_refer
           AND B.cod_reporte    = 'RCD'
           AND A.cod_control    = B.cod_control
           AND B.tip_control_val NOT IN ('A');

        IF n_reg_no_alertas IS NULL THEN
           n_reg_no_alertas := 0;
        END IF;

      EXCEPTION
        WHEN OTHERS THEN
           n_error := SQLERRM;
      END;
   END IF;

   -- JCFS 14/01/2010: Se genera la estadística PRE-RCC
   SP_GENERA_ESTADISTICA_PRE_RCC(i_anopro, i_mespro, i_codemp);

   n_cod_est_pro := 'T';
   IF n_hay_error = 1 THEN
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, 'OBS: Validación con Observaciones');     -- CRA_PAR_PROCESOS
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, '05', 'F');    -- CRA_PERIODO_INF_EMP_ETAPA
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'OBS: Validación con Observaciones', 'VA', NULL, NULL, NULL);   -- Actualiza CRA_PAR_CONTROL_PROCESOS
   ELSE
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, 'MSJ: Validación OK');   -- CRA_PAR_PROCESOS
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, '05', 'W');    -- Actualiza CRA_PERIODO_INF_EMP_ETAPA
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'MSJ: Validacion OK', 'VA', NULL, NULL, NULL);   -- Actualiza CRA_PAR_CONTROL_PROCESOS
   END IF;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '53', ln_paso, SYSDATE, 'FIN DEL PROCESO DE VALIDACIÓN', i_codemp);
   COMMIT;

   -- JCFS 2018-02: Fin de "exoneración" del registro de auditoría
   PKG_APPLICATION_INFO.Fin;

-- Si no registra altas y/o recuperación de clientes y los controles de validación
-- son sólo alertas, se continúa con la siguiente etapa.
   IF n_reg_altas = 0 AND n_reg_no_alertas = 0 THEN
      SP_VAL_EXCLUSION_RCD ('RCD', i_anopro, i_mespro, i_codemp);
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));     -- CRA_PAR_PROCESOS
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, '05', 'E');                          -- Actualiza CRA_PERIODO_INF_EMP_ETAPA
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);  -- Actualiza CRA_PAR_CONTROL_PROCESOS
END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_EXCLUSION_RCD
         (i_reporte  IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2)
-- ---------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Realiza la exclusion de datos del movimiento RCD.
-- ---------------------------------------------------------
-- 05/2010     Juan Carlos Fernández S.    Se adecúa todo el SP a la Resolución 11356
-- -------------------------------------------------------------------------------------
IS
  CURSOR cur_a IS
  SELECT num_sec_reg,
         tip_informacion,
         num_sec,
         cod_sbs,
         cod_unico_clie,
         cod_ciiu3,
         cod_sunarp,
         tip_doc_trib,
         replace(num_doc_trib,'.','') as  num_doc_trib,
         tip_doc_iden,
         num_doc_iden,
         tip_persona,
         tip_residencia,
         tip_clasif_clie,
         tip_magnitud,
         ind_accionista,
         tip_rellab,
         cod_pais,
         nom_sigla,
         nom_cliente,
         ape_materno,
         ape_casada,
         primer_nombre,
         segundo_nombre,
         genero,
         estado_civil, ind_riesgo_camb_cred, ind_atraso, clasif_interna_ent,
         /* JCFS 19/05/2010: Se agregan los nuevos campos incluidos en la Res. 11356 */
         cla_deu_sin_ali, cod_gru_eco, fec_nac, tip_doc_iden_com, num_doc_iden_com,
         /* JAGJ 31/07/2013: Se agregan los nuevos campos incluidos en la Res. 8548 */
         ind_sobreendeudamiento
    FROM CRA_VALID_IDENTIF_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND tip_formulario = '1'
     AND (cod_sbs       = 0
          OR num_sec_reg  IN (SELECT DISTINCT A.num_sec_reg
                                FROM CRA_VAL_CONTROLES_RCD_X_SEC "A",
                                     CRA_CONTROL_HIS_VALIDACION  "B"
                               WHERE A.ano_refer    = i_anopro
                                 AND A.mes_refer    = i_mespro
                                 AND A.cod_empresa  = i_codemp
                                 AND B.ano_refer    = A.ano_refer
                                 AND B.mes_refer    = A.mes_refer
                                 AND B.cod_reporte  = 'RCD'
                                 AND B.cod_control  = A.cod_control
                                 AND B.tip_control_val NOT IN ('A', 'D')))
ORDER BY num_sec_reg;

  CURSOR cur_b (p_num_sec_reg NUMBER) IS
  SELECT num_sec_reg,
         num_sec_cta,
         tip_informacion,
         num_sec,
         cod_oficina,
         cod_ubigeo_ofic,
         cod_cuenta,
         cod_tipo_cre,
         val_saldo,
         can_dias,
         cond_esp_cta,
         cond_disponibilidad,
         fac_conv_cred        /* JCFS 19/05/2010: Nuevo campo incluído en la Res. 11356 */
    FROM CRA_VALID_SALDOS_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND num_sec_reg    = p_num_sec_reg
     AND tip_formulario = '1';

  CURSOR cur_c IS
  SELECT num_sec_reg,
         tip_informacion,
         num_sec,
         cod_sbs,
         cod_unico_clie,
         cod_ciiu3,
         cod_sunarp,
         tip_doc_trib,
         replace(num_doc_trib,'.','') as  num_doc_trib,
         tip_doc_iden,
         num_doc_iden,
         tip_persona,
         tip_residencia,
         tip_clasif_clie,
         tip_magnitud,
         ind_accionista,
         tip_rellab,
         cod_pais,
         nom_sigla,
         nom_cliente,
         ape_materno,
         ape_casada,
         primer_nombre,
         segundo_nombre,
         genero,
         estado_civil, ind_riesgo_camb_cred, ind_atraso, clasif_interna_ent,
         /* JCFS 19/05/2010: Se agregan los nuevos campos incluidos en la Res. 11356 */
         cla_deu_sin_ali, cod_gru_eco, fec_nac, tip_doc_iden_com, num_doc_iden_com,
         /* JAGJ 31/07/2013: Se agregan los nuevos campos incluidos en la Res. 8548 */
         ind_sobreendeudamiento
    FROM CRA_VALID_IDENTIF_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND tip_formulario = '1'
     AND cod_sbs        > 0
     AND num_sec_reg  NOT IN (SELECT DISTINCT C.num_sec_reg
                                FROM CRA_VAL_CONTROLES_RCD_X_SEC "C",
                                     CRA_CONTROL_HIS_VALIDACION  "D"
                               WHERE C.ano_refer    = i_anopro
                                 AND C.mes_refer    = i_mespro
                                 AND C.cod_empresa  = i_codemp
                                 AND D.ano_refer    = C.ano_refer
                                 AND D.mes_refer    = C.mes_refer
                                 AND D.cod_reporte  = 'RCD'
                                 AND D.cod_control  = C.cod_control
                                 AND D.tip_control_val NOT IN ('A', 'D'))

ORDER BY num_sec_reg;

  CURSOR cur_d (p_num_sec_reg NUMBER) IS
  SELECT num_sec_reg,
         num_sec_cta,
         tip_informacion,
         num_sec,
         cod_oficina,
         cod_ubigeo_ofic,
         cod_cuenta,
         cod_tipo_cre,
         val_saldo,
         can_dias,
         cond_esp_cta,
         cond_disponibilidad,
         fac_conv_cred        /* JCFS 19/05/2010: Nuevo campo incluído en la Res. 11356 */
    FROM CRA_VALID_SALDOS_RCD
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND num_sec_reg    = p_num_sec_reg
     AND tip_formulario = '1';

  CURSOR cur_e IS
  SELECT B.cod_control,
         B.num_sec_reg,
         B.num_sec_cta,
         NVL(B.val_tot_deu,0) AS val_tot_deu,
         B.ind_pro_val
    FROM CRA_VALID_DEV_IDENTIF_RCD   "A",
         CRA_VAL_CONTROLES_RCD_X_SEC "B"
   WHERE A.ano_refer      = i_anopro
     AND A.mes_refer      = i_mespro
     AND A.cod_empresa    = i_codemp
     AND B.ano_refer      = A.ano_refer
     AND B.mes_refer      = A.mes_refer
     AND B.cod_empresa    = A.cod_empresa
     AND B.num_sec_reg    = A.num_sec_reg
ORDER BY B.cod_control, B.num_sec_reg;

  CURSOR cur_f IS
  SELECT DISTINCT(num_sec_reg) AS num_sec_reg
    FROM CRA_DEV_CONTROLES_RCD_X_SEC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
ORDER BY num_sec_reg;

  CURSOR cur_g IS
  SELECT DISTINCT(num_sec_reg) AS num_sec_reg
    FROM CRA_DEV_CONTROLES_RTC_X_SEC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
ORDER BY num_sec_reg;

-- Definicion de variables
   n_cont_ace           NUMBER(06);
   n_cont_dev           NUMBER(06);
   n_cont_ctr           NUMBER(05);
   n_cont_err           NUMBER(05);
   n_ruta               VARCHAR2(40);
   n_diapro             VARCHAR2(02);
   n_tip_doc_trib       VARCHAR2(01);
   n_num_doc_trib       NUMBER(11);

    -- variables para la validacion de la Ruta donde se almacenran los archivos
    lv_ruta       VARCHAR2(60);
    lv_ruta_new   VARCHAR2(60);
    lv_name_file  VARCHAR2(120);
    lv_mensaje    VARCHAR2(600);
    ln_ret        Number(5);
    ln_paso       NUMBER;

BEGIN
   -- JCFS 2018-02: Inicio de "exoneración" del registro de auditoría
   PKG_APPLICATION_INFO.Inicio;

   n_cont_ace    := 0;
   n_cont_dev    := 0;
   n_cont_err    := 0;
   n_cod_ide_pro := 408;
   n_cod_etapa   := '06';
-- Obtiene dia del Periodo de Proceso
   n_diapro := SF_ULT_DIA_MES(i_anopro, i_mespro);

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '61', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - INICIO', i_codemp);
   COMMIT;

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

-- Borra registros de la tabla CRA_VALID_DEV_SALDOS_RCD
   SP_BORRA_VALID_DEV_SALDOS_RCD (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VALID_DEV_SALDOS_RCD');
   n_cod_ide_pro := 408;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros de la tabla CRA_VALID_DEV_IDENTIF_RCD
   SP_BORRA_VALID_DEV_IDENTIF_RCD (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VALID_DEV_IDENTIF_RCD');
   n_cod_ide_pro := 408;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros de la tabla CRA_VAL_SALDOS_RCD
   SP_BORRA_VAL_SALDOS_RCD (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VAL_SALDOS_RCD');
   n_cod_ide_pro := 408;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros RCD de la tabla CRA_VAL_ID_PERSONA
   SP_BORRA_VAL_ID_PERSONA_RCD ('0106', '01', i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VAL_ID_PERSONA_RCD');
   n_cod_ide_pro := 408;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '61', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DE CARGAS PRELIMINARES', i_codemp);
   COMMIT;


-- Devolucion . Identificacion de Clientes
   FOR cur_ai in cur_a LOOP
       n_cont_dev := n_cont_dev + 1;

       INSERT INTO CRA_VALID_DEV_IDENTIF_RCD s ( ano_refer, mes_refer, cod_empresa, num_sec_reg, tip_formulario, tip_informacion,
                    num_sec, cod_sbs, cod_unico_clie, cod_ciiu3, cod_sunarp, tip_doc_trib,
                    num_doc_trib, tip_doc_iden, num_doc_iden, tip_persona, tip_residencia, tip_clasif_clie,
                    tip_magnitud, ind_accionista, tip_rellab, cod_pais, nom_sigla, nom_cliente,
                    sexo, est_civil, ape_materno, ape_casada, primer_nombre, segundo_nombre,
                    ind_riesgo_camb_cred, ind_atraso, clasif_interna_ent,
                    /* JCFS 19/05/2010: Se insertan los nuevos campos incluidos en la Res. 11356 */
                    cla_deu_sin_ali, cod_gru_eco, fec_nac, tip_doc_iden_com, num_doc_iden_com,
                    /* JAGJ 31/07/2013: Se agregan los nuevos campos incluidos en la Res. 8548 */
                    ind_sobreendeudamiento )
           VALUES ( i_anopro, i_mespro, i_codemp, cur_ai.num_sec_reg, '1', cur_ai.tip_informacion,
                    cur_ai.num_sec, cur_ai.cod_sbs, cur_ai.cod_unico_clie, cur_ai.cod_ciiu3, cur_ai.cod_sunarp, cur_ai.tip_doc_trib,
                    cur_ai.num_doc_trib, cur_ai.tip_doc_iden, cur_ai.num_doc_iden,cur_ai.tip_persona, cur_ai.tip_residencia, cur_ai.tip_clasif_clie,
                    cur_ai.tip_magnitud, cur_ai.ind_accionista, cur_ai.tip_rellab, cur_ai.cod_pais, cur_ai.nom_sigla, cur_ai.nom_cliente,
                    cur_ai.genero, cur_ai.estado_civil, cur_ai.ape_materno, cur_ai.ape_casada, cur_ai.primer_nombre, cur_ai.segundo_nombre,
                    cur_ai.ind_riesgo_camb_cred, cur_ai.ind_atraso, cur_ai.clasif_interna_ent,
                    /* JCFS 19/05/2010: Se insertan los nuevos campos incluidos en la Res. 11356 */
                    cur_ai.cla_deu_sin_ali, cur_ai.cod_gru_eco, cur_ai.fec_nac, cur_ai.tip_doc_iden_com, cur_ai.num_doc_iden_com,
                    /* JAGJ 31/07/2013: Se agregan los nuevos campos incluidos en la Res. 8548 */
                    cur_ai.ind_sobreendeudamiento );

--     Devolucion . Saldos de Clientes
       FOR cur_bs in cur_b (cur_ai.num_sec_reg) LOOP
           n_cont_dev := n_cont_dev + 1;
           /* JCFS 19/05/2010: Se inserta el nuevo campo "Factor de Conversión Crediticio" incluido en la Res. 11356 */
           INSERT INTO CRA_VALID_DEV_SALDOS_RCD ( ano_refer, mes_refer, cod_empresa, num_sec_reg, num_sec_cta, tip_formulario, tip_informacion,
                       num_sec, cod_oficina, cod_ubigeo_ofic, cod_cuenta, cod_tipo_cre, val_saldo, can_dias,
                       cond_esp_cta, cond_disponibilidad, fac_conv_cred )
                VALUES(i_anopro, i_mespro, i_codemp, cur_bs.num_sec_reg, cur_bs.num_sec_cta, '1', cur_bs.tip_informacion, cur_bs.num_sec,
                       cur_bs.cod_oficina, cur_bs.cod_ubigeo_ofic, cur_bs.cod_cuenta, cur_bs.cod_tipo_cre, cur_bs.val_saldo, cur_bs.can_dias,
                       cur_bs.cond_esp_cta , cur_bs.cond_disponibilidad, cur_bs.fac_conv_cred );
       END LOOP;

       IF n_cont_dev > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont_dev := 0;
       END IF;
   END LOOP;
   COMMIT;

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '62', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DE REGISTRO DE DEVOLUCIONES', i_codemp);
   COMMIT;


-- Aceptacion . Identificacion de Clientes
   FOR cur_ci in cur_c LOOP
       n_cont_ace := n_cont_ace + 1;
       IF cur_ci.tip_doc_trib = '1' THEN
          n_num_doc_trib := Test_Number(cur_ci.num_doc_trib);
          IF n_num_doc_trib IS NULL THEN
             n_tip_doc_trib := NULL;
          ELSE
             n_tip_doc_trib := cur_ci.tip_doc_trib;
          END IF;
       ELSE
          n_tip_doc_trib := cur_ci.tip_doc_trib;
          n_num_doc_trib := cur_ci.num_doc_trib;
       END IF;

       INSERT INTO CRA_VAL_ID_PERSONA ( cod_form, tip_reg, ano_refer, mes_refer, dia_refer,
                     cod_ent_vig, tip_doc, num_sec, cod_sbs, cod_unico,
                     cod_ciiu3, cod_sunarp, tip_doc_trib, cod_doc_trib, tip_doc_id,
                     cod_doc_id, tip_persona, tip_residencia, tip_clasif_deu, tip_magnitud,
                     ind_accionista, tip_rellab, cod_pais, sexo,
                     est_civil, sigla, nom_cliente, direccion, cod_dir_ubigeo,
                     errores, ind_castigado, ind_pagado, ind_vendido, ind_adjudicado,
                     tip_soc_1, tip_soc_2, ape_materno, ape_casada, primer_nombre,
                     segundo_nombre, ind_riesgo_camb_cred, ind_atraso, clasif_interna_ent,
                     /* JCFS 19/05/2010: Se insertan los nuevos campos incluidos en la Res. 11356 */
                     cla_deu_sin_ali, cod_gru_eco, tip_doc_iden_com, num_doc_iden_com, fec_nac,
                    /* JAGJ 31/07/2013: Se agregan los nuevos campos incluidos en la Res. 8548 */
                    ind_sobreendeudamiento )
            VALUES ( '0106', '01', i_anopro, i_mespro, n_diapro,
                     i_codemp, '1', cur_ci.num_sec, cur_ci.cod_sbs, cur_ci.cod_unico_clie,
                     cur_ci.cod_ciiu3, cur_ci.cod_sunarp, n_tip_doc_trib, n_num_doc_trib, cur_ci.tip_doc_iden,
                     cur_ci.num_doc_iden, cur_ci.tip_persona, cur_ci.tip_residencia, cur_ci.tip_clasif_clie, cur_ci.tip_magnitud,
                     cur_ci.ind_accionista, cur_ci.tip_rellab, cur_ci.cod_pais, cur_ci.genero,
                     cur_ci.estado_civil, cur_ci.nom_sigla, cur_ci.nom_cliente, NULL, NULL,
                     NULL, NULL, NULL, NULL, NULL,
                     NULL, NULL, cur_ci.ape_materno, cur_ci.ape_casada, cur_ci.primer_nombre,
                     cur_ci.segundo_nombre, cur_ci.ind_riesgo_camb_cred, cur_ci.ind_atraso, cur_ci.clasif_interna_ent,
                     /* JCFS 19/05/2010: Se insertan los nuevos campos incluidos en la Res. 11356 */
                     cur_ci.cla_deu_sin_ali, cur_ci.cod_gru_eco, cur_ci.tip_doc_iden_com, cur_ci.num_doc_iden_com,
                     case when nvl(cur_ci.fec_nac, '00000000') IN ('0', '00000000') then NULL else to_date(cur_ci.fec_nac, 'yyyymmdd') end,
                     /* JAGJ 31/07/2013: Se agregan los nuevos campos incluidos en la Res. 8548 */
                     cur_ci.ind_sobreendeudamiento );

--     Aceptacion . Saldos de Clientes
       FOR cur_ds in cur_d (cur_ci.num_sec_reg) LOOP
           n_cont_ace := n_cont_ace + 1;
           /* JCFS 19/05/2010: Se inserta el nuevo campo "Factor de Conversión Crediticio" incluido en la Res. 11356 */
           INSERT INTO CRA_VAL_SALDOS_RCD  ( ano_refer, mes_refer, dia_refer, cod_ent_vig, tip_doc, num_sec, cod_sbs, cod_oficina, cod_ofi_ubigeo,
                       cod_cuenta, tip_credito, cond_dias, saldo, tip_clasif_deu, ind_deuda_cero, cod_form, tip_reg,
                       cond_esp_cta, cond_disponibilidad, fac_conv_cred )
                VALUES(i_anopro, i_mespro, n_diapro, i_codemp, '1', cur_ds.num_sec, cur_ci.cod_sbs, cur_ds.cod_oficina, cur_ds.cod_ubigeo_ofic,
                       cur_ds.cod_cuenta, cur_ds.cod_tipo_cre, cur_ds.can_dias, cur_ds.val_saldo, cur_ci.tip_clasif_clie, NULL, '0106', '01',
                       cur_ds.cond_esp_cta , cur_ds.cond_disponibilidad, cur_ds.fac_conv_cred );
       END LOOP;

       IF n_cont_ace > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont_ace := 0;
       END IF;
   END LOOP;
   COMMIT;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '62', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DE REGISTRO DE ACEPTADOS', i_codemp);
   COMMIT;


-- Actualiza Ultimo Periodo de Validacion de Clientes
   SP_ACT_ULT_PERIODO_VALIDACION (i_anopro, i_mespro, i_reporte, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_ACT_ULT_PERIODO_VALIDACION');
   n_cod_ide_pro := 408;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

   ln_paso := 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '63', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DE ACTUALIZACION DE ULTIMO PERIODO', i_codemp);
   COMMIT;

-- Borra registros de la tabla CRA_DEV_CONTROLES_RCD_X_SEC
   SP_BORRA_DEV_CTRLES_RCD_X_SEC (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_DEV_CTRLES_RCD_X_SEC');
   n_cod_ide_pro := 408;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Actualiza Controles de Validacion RCD Observados por Secuencia
   FOR cur_ctr in cur_e LOOP
       n_cont_ctr := n_cont_ctr + 1;
       INSERT INTO CRA_DEV_CONTROLES_RCD_X_SEC ( ano_refer, mes_refer, cod_empresa, cod_control, num_sec_reg, num_sec_cta, val_tot_deu, ind_pro_val, cod_reporte )
            VALUES ( i_anopro, i_mespro, i_codemp, cur_ctr.cod_control, cur_ctr.num_sec_reg, cur_ctr.num_sec_cta, cur_ctr.val_tot_deu, cur_ctr.ind_pro_val, 'RCD' );

       IF n_cont_ctr > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont_ctr := 0;
       END IF;
   END LOOP;
   COMMIT;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '63', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DE ACTUALIZACION DE CONTROLES OBSERVADOS POR SECUENCIA', i_codemp);
   COMMIT;

-- Borra registros de la tabla CRA_DEV_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROLES_DEV_EMP ('RCD', i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_VAL_BORRA_CONTROLES_DEV_EMP');
   n_cod_ide_pro := 408;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Actualiza CRA_DEV_CONTROLES_X_EMPRESA
   SP_GRABA_DEV_CONTROL_RCD_X_EMP ('RCD', i_anopro, i_mespro, i_codemp);

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '63', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DE ACTUALIZACION DE CONTROLES OBSERVADOS POR EMPRESA', i_codemp);
   COMMIT;

--  Obtiene total registros de identificacion
    SELECT count(1) INTO n_tot_reg_identif
      FROM CRA_VALID_DEV_IDENTIF_RCD
     WHERE ano_refer       = i_anopro
       AND mes_refer       = i_mespro
       AND cod_empresa     = i_codemp
       AND tip_informacion = '1';

--  Obtiene total registros de saldos
    SELECT count(1) INTO n_tot_reg_saldos
      FROM CRA_VALID_DEV_SALDOS_RCD
     WHERE ano_refer       = i_anopro
       AND mes_refer       = i_mespro
       AND cod_empresa     = i_codemp
       AND tip_informacion = '1';

--  Calcula total registros
    n_tot_reg := n_tot_reg_identif + n_tot_reg_saldos;

--  Obtiene total registros de saldos de totales
    n_tot_reg_tot := 0;

--  Obtiene el total deuda de la empresa
--    n_tot_deu       := SF_OBT_TOTAL_DEUDA_EMPR_DEV (i_anopro, i_mespro, i_codemp);
    n_tot_deu       := SF_OBT_TOTAL_DEUDA_EMPRESA (i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de errores en la empresa
    n_tot_err       := SF_OBT_TOTAL_ERRORES_EMPR_DEV ('RCD', i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes en la empresa
    n_tot_cli       := SF_OBT_TOTAL_CLIENTES_EMPR_DEV ('RCD', i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes con errores en la empresa
    n_tot_cli_err   := SF_OBT_TOTAL_CLI_ERR_EMPR_DEV ('RCD', i_anopro, i_mespro, i_codemp);

--  Obtiene el total deuda de la empresa con errores
    n_tot_deu_err   := SF_OBT_TOTAL_DEUDA_OBSERV_DEV (i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes con errores por tipo de control validez
    n_tot_cli_err_v := SF_OBT_TOTAL_CLI_ERR_TIPO_DEV ('RCD', i_anopro, i_mespro, i_codemp, 'V');

--  Obtiene el total deuda con errores por tipo de control validez
    n_tot_deu_err_v := SF_OBT_TOTAL_DEUDA_TIPO_DEV (i_anopro, i_mespro, i_codemp, 'V');

--  Obtiene el numero total de clientes con errores por tipo de control consistencia
    n_tot_cli_err_c := SF_OBT_TOTAL_CLI_ERR_TIPO_DEV ('RCD', i_anopro, i_mespro, i_codemp, 'C');

--  Obtiene el total deuda con errores por tipo de control consistencia
    n_tot_deu_err_c := SF_OBT_TOTAL_DEUDA_TIPO_DEV (i_anopro, i_mespro, i_codemp, 'C');

--  Obtiene el numero total de clientes con errores por tipo de control alerta
    n_tot_cli_err_a := SF_OBT_TOTAL_CLI_ERR_TIPO_DEV ('RCD', i_anopro, i_mespro, i_codemp, 'A');

--  Obtiene el total deuda con errores por tipo de control alerta
    n_tot_deu_err_a := NULL;

--  Actualiza CRA_DEV_TOTALES_VALIDACION
  BEGIN
    SELECT num_tot_reg
      INTO n_tot_reg_aux
      FROM CRA_DEV_TOTALES_VALIDACION
     WHERE ano_refer    = i_anopro
       AND mes_refer    = i_mespro
       AND cod_reporte  = 'RCD'
       AND cod_empresa  = i_codemp;

    UPDATE CRA_DEV_TOTALES_VALIDACION
           SET num_tot_reg       = n_tot_reg,
               val_tot_deu       = n_tot_deu,
               num_tot_err       = n_tot_err,
               num_tot_cli       = n_tot_cli,
               num_tot_cli_err   = n_tot_cli_err,
               val_tot_deu_err   = n_tot_deu_err,
               num_tot_reg_tot   = n_tot_reg_tot,
               num_tot_cli_err_v = n_tot_cli_err_v,
               val_tot_deu_err_v = n_tot_deu_err_v,
               num_tot_cli_err_c = n_tot_cli_err_c,
               val_tot_deu_err_c = n_tot_deu_err_c,
               num_tot_cli_err_a = n_tot_cli_err_a,
               val_tot_deu_err_a = n_tot_deu_err_a
         WHERE ano_refer         = i_anopro
           AND mes_refer         = i_mespro
           AND cod_reporte       = 'RCD'
           AND cod_empresa       = i_codemp;
  EXCEPTION
    WHEN OTHERS THEN
         -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
         INSERT INTO CRA_DEV_TOTALES_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_tot_reg, val_tot_deu, num_tot_err,
                                                  num_tot_cli, num_tot_cli_err, val_tot_deu_err, num_tot_reg_tot, num_tot_cli_err_v,
                                                  val_tot_deu_err_v, num_tot_cli_err_c, val_tot_deu_err_c, num_tot_cli_err_a, val_tot_deu_err_a,
                                                  dia_refer, cod_sec_envio )
              VALUES (i_anopro, i_mespro, 'RCD', i_codemp, n_tot_reg, n_tot_deu, n_tot_err, n_tot_cli, n_tot_cli_err, n_tot_deu_err, n_tot_reg_tot,
                      n_tot_cli_err_v, n_tot_deu_err_v, n_tot_cli_err_c, n_tot_deu_err_c, n_tot_cli_err_a, n_tot_deu_err_a, '01', '01');
  END;

--  Obtiene el numero total de clientes con errores en la empresa
    n_tot_cli_err := SF_OBT_TOTAL_CLI_ERR_EMPR_DEV ('RCD', i_anopro, i_mespro, i_codemp);
--  Obtiene el total deuda de la empresa con errores
    n_tot_deu_err := SF_OBT_TOTAL_DEUDA_EMPR_DEV (i_anopro, i_mespro, i_codemp);

    UPDATE CRA_TOTALES_VALIDACION
           SET val_tot_deu_err   = n_tot_deu_err,
               num_tot_cli_err   = n_tot_cli_err
         WHERE ano_refer         = i_anopro
           AND mes_refer         = i_mespro
           AND cod_reporte       = 'RCD'
           AND cod_empresa       = i_codemp;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '63', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DE ACTUALIZACION DE LA TABLA DE CRA_TOTALES_VALIDACION', i_codemp);

   COMMIT;
   SP_BORRA_LISTA_CONTROLES_X_SEC (i_anopro, i_mespro, i_reporte, i_codemp);

   IF i_reporte = 'RCD' THEN
--    Genera Lista de Controles de Validacion RCD Observados por Secuencia
      FOR cur_err in cur_f LOOP
          n_cont_err := n_cont_err + 1;
          -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
          INSERT INTO CRA_DEV_LISTA_CONTROL_X_SEC (  ano_refer , mes_refer, cod_reporte, cod_empresa, num_sec_reg, des_controles, dia_refer, cod_sec_envio )
           VALUES (  i_anopro, i_mespro, i_reporte, i_codemp, cur_err.num_sec_reg,
                     SF_OBT_CONTROLES_RCD_X_SEC_OBS (i_anopro, i_mespro, i_codemp, cur_err.num_sec_reg), '01', '01' );

          IF n_cont_err > 5000 THEN -- SRR 10/09/2010   verificando performance
             COMMIT;
             n_cont_err := 0;
          END IF;
      END LOOP;
   END IF;
   COMMIT;

   IF i_reporte = 'RTC' THEN
--    Genera Lista de Controles de Validacion RTC Observados por Secuencia
      FOR cur_err in cur_g LOOP
          n_cont_err := n_cont_err + 1;
          -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
          INSERT INTO CRA_DEV_LISTA_CONTROL_X_SEC ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_sec_reg, des_controles, dia_refer, cod_sec_envio )
               VALUES ( i_anopro, i_mespro, i_reporte, i_codemp, cur_err.num_sec_reg,
                        SF_OBT_CONTROLES_RTC_X_SEC (i_anopro, i_mespro, i_codemp, cur_err.num_sec_reg), '01', '01');
          IF n_cont_err > 5000 THEN -- SRR 10/09/2010   verificando performance
             COMMIT;
             n_cont_err := 0;
          END IF;
      END LOOP;
   END IF;
   COMMIT;

   n_cod_est_pro := 'T';
   n_cod_ide_pro := 408;
--
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, 'MSJ: Exclusion de Datos OK');
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'MSJ: Exclusion de Datos OK', 'VA', NULL, NULL, NULL);

   IF i_reporte = 'RCD' THEN
    -- JCFS 14/01/2010: Se genera la estadística PRE-RCC
      SP_GENERA_ESTADISTICA_PRE_RCC(i_anopro, i_mespro, i_codemp);
   END IF;

   ln_paso := ln_paso + 1;
   INSERT INTO CRA_TIEMPOS_PROCESO (ANO_REFER, MES_REFER, COD_PROCESO, ETAPA, NUM_PASO, FEC_INICIO, DESCRIPCION, COD_ENTIDAD)
   VALUES (i_anopro, i_mespro, 'RCD', '63', ln_paso, SYSDATE, 'PROCESO DE EXCLUSIÓN (Etapa 06) - FIN DEL PROCESO', i_codemp);
   COMMIT;

   -- JCFS 2018-02: Fin de "exoneración" del registro de auditoría
   PKG_APPLICATION_INFO.Fin;

   -- Obtiene ruta
   n_ruta := SF_OBT_RUTA_DE_VALIDACION ('RCD');
   -- valida que exista la Ruta donde se almacenaran los resultados
   lv_ruta  := n_ruta || '/' || i_anopro || '_' || i_mespro;
   --lv_name_file := 'out_'|| i_codemp || '_' || i_anopro || '_' || i_mespro ||'.txt';
   lv_name_file := 'out_'|| nvl(sisrev.sf_obt_cod_empresa_vc (i_codemp), i_codemp) || '_' || i_anopro || '_' || i_mespro ||'.txt';

   pk_entregables_rcd.SP_VALIDA_DIRECTORIO ( i_codemp, lv_ruta, lv_name_file, lv_ruta_new, lv_mensaje, ln_ret );
   IF ln_ret = 1 THEN -- Ruta existe
      n_ruta  := lv_ruta_new;
   ELSE
      -- JCFS 06/09/2011: Si no existe la ruta, se intenta crearla
      dbms_scheduler.run_job('NEW_ENTIDAD_RCD', FALSE);
      -- Se espera 10 segundos para que termine de ejecutarse la Shell
      dbms_lock.sleep(10);
      -- Se vuelve a validar si ya existe la ruta
      pk_entregables_rcd.SP_VALIDA_DIRECTORIO  ( i_codemp, lv_ruta, lv_name_file, lv_ruta_new, lv_mensaje, ln_ret );
      IF ln_ret = 1 THEN -- Ruta existe
         n_ruta := lv_ruta_new;
      END IF;
   END IF;

-- Generacion de RCD OK y RCD OBS
   PK_ENTREGABLES_RCD.SP_VAL_GENERA_RCD_OK (i_anopro, i_mespro, i_codemp, n_ruta);

EXCEPTION
   WHEN OTHERS THEN
         n_error := SQLERRM;
         n_cod_ide_pro := 408;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
--       Actualiza CRA_PERIODO_INF_EMP_ETAPA
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_etapa, n_cod_est_pro);
--       Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);

END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_VALIDACION_RCA
         (i_cod_reporte   IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )

-- --------------------------------------------------------------------------------------------------------------------
-- Autor : Jaime López-Torres M. - Diciembre 2001
-- Motivo: Realiza la validación de los datos del movimiento RCD.
-- --------------------------------------------------------------------------------------------------------------------
-- Revisiones:
--     Fecha        Autor                                           Descripción
-- -------------  --------------------------  -------------------------------------------------------------------------
-- 04/02/2003     Jaime López-Torres M.       Se incorpora la cuenta 8103 y divisionarias (Cuentas Incobrables Castigadas)
--                                            en la validación del control 183.
-- 21/02/2003     Jaime López-Torres M.       Se incorpora función SF_SEC_VALID_IDENTIF_RCD.
-- 12/06/2003     Jaime López-Torres M.       Condición en días se amplía de 3 a 4 caracteres.
-- 13/06/2003     Jaime López-Torres M.       Se incorpora la cuenta 1406 y divisionarias(Créditos en Cobranza Judicial)
--                                            en la validación del control 183.
-- 22/09/2003     Jaime López-Torres M.       Se incluye tipo de documento '9' (Extranjero no residente).
-- 22/12/2003     Jaime López-Torres M.       A solicitud de Informática (Jenny Ortiz) se inhibe el acceso a las
--                                            cuentas contables fijas.
---------------------------------------------------------------------------------
-- 04/04/2004    Francisco Vite Shelton       Adecuacion a la resolucion 808
-- --------------------------------------------------------------------------------------------------------------------
IS
BEGIN
    PK_VALIDADOR_RCA.SP_VAL_VALIDACION_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_cod_reporte, i_codemp, '05', 'E', i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_EXCLUSION_RCA
         (i_reporte  IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ---------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Realiza la exclusion de datos del movimiento RCD.
-- ---------------------------------------------------------
IS
BEGIN
   PK_VALIDADOR_RCA.SP_VAL_EXCLUSION_RCA ( i_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
   WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         --n_cod_ide_pro := 408;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, i_reporte, i_codemp, n_cod_etapa, n_cod_est_pro, i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DEV_SALDOS_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_codemp IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ---------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_DEV_SALDOS.
-- -----------------------------------------------------------
IS
BEGIN
   PK_VALIDADOR_RCA.SP_BORRA_VALID_DEV_SALDOS_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DEV_IDENTIF_RCA
         (i_cod_reporte IN VARCHAR2,
          i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_codemp IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ---------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_DEV_IDENTIF_RCD.
-- -----------------------------------------------------------
IS
BEGIN
PK_VALIDADOR_RCA.SP_BORRA_VALID_DEV_IDENTIF_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DEV_SALDOS_RCD
         (i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_codemp IN VARCHAR2)
-- -----------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_DEV_SALDOS_RCD.
-- -----------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 405;
   n_cod_est_pro := 'P';

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   BEGIN
   DELETE CRA_VALID_DEV_SALDOS_RCD
   WHERE ano_refer   = i_anopro
     AND mes_refer   = i_mespro
     AND cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
       n_cont := 0;
   END;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DEV_IDENTIF_RCD
         (i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_codemp IN VARCHAR2)
-- -----------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_DEV_IDENTIF_RCD.
-- -----------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 404;
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   BEGIN
      DELETE CRA_VALID_DEV_IDENTIF_RCD
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp;
   EXCEPTION
      WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VAL_SALDOS_RCD
         (i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_codemp IN VARCHAR2)
-- -----------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VAL_SALDOS_RCD.
-- -----------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 407;
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   BEGIN
     DELETE CRA_VAL_SALDOS_RCD
     WHERE ano_refer    = i_anopro
     AND mes_refer    = i_mespro
     AND cod_ent_vig  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
     n_cont := 0;
   END;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VAL_ID_PERSONA_RCD
         (i_codfor IN VARCHAR2,
          i_tipreg IN VARCHAR2,
          i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_codemp IN VARCHAR2)
-- -------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros RCD de tabla CRA_VAL_ID_PERSONA.
-- -------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 406;
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   BEGIN
     DELETE CRA_VAL_ID_PERSONA
     WHERE cod_form     = i_codfor
     AND tip_reg      = i_tipreg
     AND ano_refer    = i_anopro
     AND mes_refer    = i_mespro
     AND cod_ent_vig  = i_codemp;
   EXCEPTION
    WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DEV_SALDOS_RDD
         (i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_cod_reporte IN VARCHAR2,
          i_codemp IN VARCHAR2)
-- -----------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_DEV_SALDOS_RCD.
-- -----------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 705;
   n_cod_est_pro := 'P';

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   BEGIN
   DELETE CRA_VALID_DEV_SALDOS_REP_ADIC A
   WHERE ano_refer   = i_anopro
     AND mes_refer   = i_mespro
     AND cod_reporte = i_cod_reporte
     AND cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
       n_cont := 0;
   END;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------
PROCEDURE SP_BORRA_VALID_DEV_IDENTIF_RDD
         (i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_cod_reporte IN VARCHAR2,
          i_codemp IN VARCHAR2)
-- -----------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_DEV_IDENTIF_RCD.
-- -----------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 704;
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   BEGIN
      DELETE FROM CRA_VALID_DEV_IDENTIF_REP_ADIC
       WHERE ano_refer = i_anopro
         AND mes_refer = i_mespro
         AND cod_empresa = i_codemp
         AND cod_reporte = i_cod_reporte ;
   EXCEPTION
      WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VAL_SALDOS_RCA
         (i_cod_reporte   IN VARCHAR2,
          i_anopro        IN VARCHAR2,
          i_mespro        IN VARCHAR2,
          i_codemp        IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -----------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VAL_SALDOS.
-- -----------------------------------------------------------
IS
BEGIN
   PK_VALIDADOR_RCA.SP_BORRA_VAL_SALDOS_RCA ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VAL_ID_PERSONA_RCA
         (i_cod_reporte  IN VARCHAR2,
          i_codfor       IN VARCHAR2,
          i_tipreg       IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros RCD de tabla CRA_VAL_ID_PERSONA.
-- -------------------------------------------------------
IS
BEGIN
   PK_VALIDADOR_RCA.SP_BORRA_VAL_ID_PERSONA_RCA ( i_cod_reporte, i_codfor, i_tipreg, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_DEV_CTRLES_RCD_X_SEC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_DEV_CONTROLES_RCD_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 421;
   n_cod_est_pro := 'P';

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   BEGIN
      DELETE CRA_DEV_CONTROLES_RCD_X_SEC
      WHERE ano_refer    = i_anopro
      AND mes_refer    = i_mespro
      AND cod_empresa  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;

   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_DEV_CTRLES_RCA_X_SEC
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros de tabla CRA_DEV_CONTROLES_RCD_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   PK_VALIDADOR_RCA.SP_BORRA_DEV_CTRLES_RCA_X_SEC ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_BORRA_CONTROLES_DEV_EMP
         (i_reporte       IN VARCHAR2,
          i_anopro        IN VARCHAR2,
          i_mespro        IN VARCHAR2,
          i_codemp        IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- --------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Borra registros en tabla CRA_DEV_CONTROLES_X_EMPRESA
-- --------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 422;
   n_cod_est_pro := 'P';

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

   BEGIN
    DELETE CRA_DEV_CONTROLES_X_EMPRESA
    WHERE ano_refer    = i_anopro
      AND mes_refer    = i_mespro
      AND cod_reporte  = i_reporte
      AND cod_empresa  = i_codemp
      AND dia_refer     = i_dia_refer
      AND cod_sec_envio = i_cod_sec_envio;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;

   COMMIT;

   n_cod_est_pro := 'T';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
--       Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_LISTA_CONTROLES_X_SEC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_reporte IN VARCHAR2,
          i_codemp  IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - SET 2002
-- Motivo: Borra registros por empresa de tabla CRA_DEV_LISTA_CONTROL_X_SEC.
-- -------------------------------------------------------------------------
IS
BEGIN
   n_cod_ide_pro := 428;
   n_cont        := 0;

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'AC', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

   BEGIN
      DELETE CRA_DEV_LISTA_CONTROL_X_SEC
      WHERE ano_refer   = i_anopro
      AND mes_refer   = i_mespro
      AND cod_reporte = i_reporte
      AND cod_empresa = i_codemp
      AND dia_refer     = i_dia_refer
      AND cod_sec_envio = i_cod_sec_envio;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'AC', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
--      Actualiza CRA_PAR_PROCESOS
        n_cod_est_pro := 'E';
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255), i_dia_refer, i_cod_sec_envio);
--      Actualiza CRA_PERIODO_INF_EMP_PROCESO
        SP_ACT_EST_PERIODO_EMP_PROCESO (i_anopro, i_mespro, 'RCD', i_codemp, n_cod_ref_pro, n_cod_est_pro);
--      Actualiza CRA_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'AC', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_ACT_ULT_PERIODO_VALIDACION
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_reporte IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - OCT 2002
-- Motivo: Actualiza Ultimo Periodo de Validacion de Clientes.
-- JCFS 21/08/2015: Se reemplazan los Cursores por "Updates" con Subquerys, debido a problemas de Deadlock
-- -------------------------------------------------------------------------
IS
BEGIN
   n_cod_ide_pro := 433;
   n_cod_est_pro := 'P';
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   IF i_reporte = 'RCD' THEN
      UPDATE CRI_PERSONA p
         SET p.ano_urep_icc = i_anopro, p.mes_urep_icc = i_mespro
       WHERE (nvl(p.ano_urep_icc, ' ') = ' ' OR p.ano_urep_icc||p.mes_urep_icc <> i_anopro||i_mespro)
         AND exists ( select 1
                        from CRA_VAL_ID_PERSONA v
                       where p.cod_sbs = v.cod_sbs
                         AND v.COD_FORM = '0106' AND v.TIP_REG = '01'
                         AND v.ANO_REFER = i_anopro AND v.MES_REFER = i_mespro AND v.COD_ENT_VIG = i_codemp
                    );
      COMMIT;

      -- JCFS 2016-08: Se reemplaza el UPDATE por un MERGE, porque hay registros que no se actualizan, ya que no han sido aún insertados en la tabla CRI_DEUDOR_XENT
      MERGE INTO CRI_DEUDOR_XENT a
      USING ( SELECT cod_sbs, cod_ent_vig, MIN(cod_unico) AS cod_unico, MIN(cod_gru_eco) AS cod_gru_eco
                FROM CRA_VAL_ID_PERSONA
               WHERE cod_form = '0106' AND tip_reg = '01' AND
                     ano_refer = i_anopro AND mes_refer = i_mespro AND cod_ent_vig = i_codemp
               GROUP BY cod_sbs, cod_ent_vig
            ) v
      ON ( a.cod_sbs = v.cod_sbs AND a.cod_ent_vig = v.cod_ent_vig )
      WHEN MATCHED THEN
          UPDATE SET a.ano_urep_icc = i_anopro, a.mes_urep_icc = i_mespro, a.fec_modificacion = SYSDATE, a.cod_usu_mod = USER
      WHEN NOT MATCHED THEN
          INSERT ( cod_sbs, cod_ent_vig, cod_unico_entidad, ano_prep_icc, mes_prep_icc,
                   ano_urep_icc, mes_urep_icc, fec_registro, cod_usu_reg, cod_gru_eco )
          VALUES ( v.cod_sbs, v.cod_ent_vig, v.cod_unico, i_anopro, i_mespro,
                   i_anopro, i_mespro, SYSDATE, USER, v.cod_gru_eco );

      COMMIT;
   END IF;

   IF i_reporte = 'RTC' THEN
      UPDATE CRI_PERSONA p
         SET p.ano_urep_icc = i_anopro, p.mes_urep_icc = i_mespro
       WHERE (nvl(p.ano_urep_icc, ' ') = ' ' OR p.ano_urep_icc||p.mes_urep_icc <> i_anopro||i_mespro)
         AND exists ( select 1
                        from CRA_VAL_ID_PERSONA v
                       where p.cod_sbs = v.cod_sbs
                         AND v.COD_FORM = '0208' AND v.TIP_REG = '01'
                         AND v.ANO_REFER = i_anopro AND v.MES_REFER = i_mespro AND v.COD_ENT_VIG = i_codemp
                    );

      COMMIT;

      -- JCFS 2016-08: Se reemplaza el UPDATE por un MERGE, porque hay registros que no se actualizan ya que no han sido aún insertados en la tabla CRI_DEUDOR_XENT
      MERGE INTO CRI_DEUDOR_XENT a
      USING ( SELECT cod_sbs, cod_ent_vig, MIN(cod_unico) AS cod_unico, MIN(cod_gru_eco) AS cod_gru_eco
                FROM CRA_VAL_ID_PERSONA
               WHERE cod_form = '0208' AND tip_reg = '01' AND
                     ano_refer = i_anopro AND mes_refer = i_mespro AND cod_ent_vig = i_codemp
               GROUP BY cod_sbs, cod_ent_vig
            ) v
      ON ( a.cod_sbs = v.cod_sbs AND a.cod_ent_vig = v.cod_ent_vig )
      WHEN MATCHED THEN
          UPDATE SET a.ano_urep_icc = i_anopro, a.mes_urep_icc = i_mespro, a.fec_modificacion = SYSDATE, a.cod_usu_mod = USER
      WHEN NOT MATCHED THEN
          INSERT ( cod_sbs, cod_ent_vig, cod_unico_entidad, ano_prep_icc, mes_prep_icc,
                   ano_urep_icc, mes_urep_icc, fec_registro, cod_usu_reg, cod_gru_eco )
          VALUES ( v.cod_sbs, v.cod_ent_vig, v.cod_unico, i_anopro, i_mespro,
                   i_anopro, i_mespro, SYSDATE, USER, v.cod_gru_eco );

      COMMIT;
   END IF;

   n_cod_ide_pro := 433;
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
   WHEN OTHERS THEN
        n_code  := SQLCODE;
        n_error := SQLERRM;
        n_cod_ide_pro := 433;
        n_cod_est_pro := 'E';
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
        SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_IDENTIF_AUX
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2,
          i_reporte IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2002
-- Motivo: Borra registros de tabla CRA_VALID_IDENTIF_AUX.
-- -------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 418;
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);

   BEGIN
     DELETE CRA_VALID_IDENTIF_AUX
      WHERE ano_refer = i_anopro AND mes_refer = i_mespro
        AND cod_reporte = i_reporte AND cod_empresa = i_codemp
        AND dia_refer = i_dia_refer AND cod_sec_envio = i_cod_sec_envio;

   EXCEPTION
     WHEN OTHERS THEN
         n_cont := 0;
   END;

   COMMIT;
   n_cod_est_pro := 'T';
   n_cod_ide_pro := 418;
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL, i_dia_refer, i_cod_sec_envio);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_ide_pro := 418;
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,80), i_dia_refer, i_cod_sec_envio);
END;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_X_EMP_PV
         (i_cod_reporte    IN VARCHAR2,
          i_anopro         IN VARCHAR2,
          i_mespro         IN VARCHAR2,
          i_codemp         IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Actualiza registros de RCD en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-----------------------------------------------------------------------------
IS
BEGIN
   IF i_cod_reporte = 'RCD' THEN
      SP_GRABA_CONTROL_RCD_X_EMP_PV (i_cod_reporte, i_anopro, i_mespro, i_codemp);
      RETURN;
   END IF;

   IF i_cod_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
      SP_GRABA_CONTROL_RCA_X_EMP_PV (i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
      RETURN;
   END IF;

   IF i_cod_reporte = 'RTC' THEN
      SP_GRABA_CONTROL_RTC_X_EMP_PV (i_cod_reporte, i_anopro, i_mespro, i_codemp);
      RETURN;
   END IF;
--
EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       RETURN;
END SP_GRABA_CONTROL_X_EMP_PV;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RCA_X_EMP_PV
         (i_cod_reporte    IN VARCHAR2,
          i_anopro         IN VARCHAR2,
          i_mespro         IN VARCHAR2,
          i_codemp         IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Actualiza registros de RCD en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-----------------------------------------------------------------------------
IS
BEGIN
  PK_VALIDADOR_RCA.SP_GRABA_CONTROL_RCA_X_EMP_PV ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );

EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       --n_cod_ide_pro := 436;
       n_observaciones := Substr('Error: ' || n_error,1,248);
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones, i_dia_refer, i_cod_sec_envio);
END SP_GRABA_CONTROL_RCA_X_EMP_PV;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RCD_X_EMP_PV
         (i_cod_reporte    IN VARCHAR2,
          i_anopro         IN VARCHAR2,
          i_mespro         IN VARCHAR2,
          i_codemp         IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Actualiza registros de RCD en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-----------------------------------------------------------------------------
IS
  CURSOR CUR_A IS
  SELECT A.cod_control,
         count(*) AS veces,
         count(distinct A.num_sec_reg) AS clientes,
         B.tip_control_val,
         A.ind_pro_val
    FROM CRA_VAL_CONTROLES_RCD_X_SEC  "A",
         CRA_CONTROL_HIS_VALIDACION   "B"
   WHERE A.ano_refer      = i_anopro
     AND A.mes_refer      = i_mespro
     AND A.cod_empresa    = i_codemp
     AND B.ano_refer      = A.ano_refer
     AND B.mes_refer      = A.mes_refer
     AND B.cod_reporte    = i_cod_reporte
     AND B.cod_control    = A.cod_control
GROUP BY A.cod_control,
         B.tip_control_val,
         A.ind_pro_val
ORDER BY A.cod_control;

n_nro_clientes NUMBER(8);
n_tot_deuda    NUMBER(15,2);

BEGIN
   n_cont := 0;
   n_cod_est_pro := 'P';
   n_cod_ide_pro := 436;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RCD (i_anopro, i_mespro, i_codemp, cur.cod_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
       INSERT INTO CRA_VAL_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control,
                    num_veces, num_clientes, val_tot_deu, ind_pro_val, dia_refer, cod_sec_envio )
            VALUES (i_anopro, i_mespro, i_cod_reporte, i_codemp, cur.cod_control,
                    cur.veces, n_nro_clientes, n_tot_deuda, cur.ind_pro_val, '01', '01');

-- Control de transacciones
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;
--
   n_cod_est_pro := 'T';
   n_cod_ide_pro := 436;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_cod_ide_pro := 436;
       n_observaciones := Substr('Error: ' || n_error,1,248);
--     Actualiza CRA_CONTROL_PROCESOS
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--     Actualiza CRA_PAR_PROCESOS
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
END SP_GRABA_CONTROL_RCD_X_EMP_PV;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_CONTROL_RTC_X_EMP_PV
         (i_cod_reporte  IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Actualiza registros de RTC en tabla CRA_VAL_CONTROLES_X_EMPRESA.
-----------------------------------------------------------------------------
IS
  CURSOR CUR_A IS
  SELECT A.cod_control,
         count(*) AS veces,
         count(distinct A.num_sec_reg) AS clientes,
         B.tip_control_val,
         A.ind_pro_val
    FROM CRA_VAL_CONTROLES_RTC_X_SEC  "A",
         CRA_CONTROL_HIS_VALIDACION   "B"
   WHERE A.ano_refer      = i_anopro
     AND A.mes_refer      = i_mespro
     AND A.cod_empresa    = i_codemp
     AND B.ano_refer      = A.ano_refer
     AND B.mes_refer      = A.mes_refer
     AND B.cod_reporte    = i_cod_reporte
     AND B.cod_control    = A.cod_control
GROUP BY A.cod_control,
         B.tip_control_val,
         A.ind_pro_val
ORDER BY A.cod_control;

n_nro_clientes NUMBER(8);
n_tot_deuda    NUMBER(15,2);

BEGIN
   n_cont := 0;
   n_cod_est_pro := 'P';
   n_cod_ide_pro := 437;
--
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
--
   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RTC (i_anopro, i_mespro, i_codemp, cur.cod_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
       INSERT INTO CRA_VAL_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control,
                    num_veces, num_clientes, val_tot_deu, ind_pro_val, dia_refer, cod_sec_envio )
            VALUES (i_anopro, i_mespro, i_cod_reporte, i_codemp, cur.cod_control,
                    cur.veces, n_nro_clientes, n_tot_deuda, cur.ind_pro_val, '01', '01');
-- Control de transacciones
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;
--
   n_cod_est_pro := 'T';
   n_cod_ide_pro := 437;
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
--
EXCEPTION
  WHEN OTHERS THEN
       n_code  := SQLCODE;
       n_error := SQLERRM;
       n_cod_est_pro := 'E';
       n_cod_ide_pro := 437;
       n_observaciones := Substr('Error: ' || n_error,1,248);
--     Actualiza CRA_CONTROL_PROCESOS
       SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
--     Actualiza CRA_PAR_PROCESOS
       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
END SP_GRABA_CONTROL_RTC_X_EMP_PV;

----------------------------------------------------------------------

PROCEDURE SP_VAL_EXCLUSION_RTC
         (i_reporte  IN VARCHAR2,
          i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2)
-- ---------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2003
-- Motivo: Realiza la exclusion de datos del movimiento RTC.
-- ---------------------------------------------------------
IS
  CURSOR cur_a IS
  SELECT num_sec_reg,
         tip_informacion,
         num_sec,
         cod_sbs,
         cod_unico_clie,
         cod_ciiu3,
         cod_sunarp,
         tip_doc_trib,
         num_doc_trib,
         tip_doc_iden,
         num_doc_iden,
         tip_persona,
         tip_residencia,
         tip_clasif_clie,
         tip_magnitud,
         ind_accionista,
         tip_rellab,
         cod_pais,
         nom_sigla,
--        nom_cliente,
         REPLACE(
         trim(
            trim(nvl(nom_cliente,  '')) || ' ' ||
            trim(nvl(ape_materno,  '')) || ' ' ||
            trim(nvl(ape_casada,   '')) || ' ' ||
            trim(nvl(primer_nombre,'')) || ' ' ||
            trim(nvl(segundo_nombre,''))
           )
           ,'  ',' ') as nom_cliente, -- Paterno
         sexo,
         est_civil,
         fec_nac,
         direccion,
         cod_dir_ubigeo
    FROM CRA_VALID_IDENTIF_RTC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND tip_formulario = '1'
     AND (cod_sbs       = 0
          OR num_sec_reg  IN (SELECT DISTINCT A.num_sec_reg
                                FROM CRA_VAL_CONTROLES_RTC_X_SEC "A",
                                     CRA_CONTROL_HIS_VALIDACION  "B"
                               WHERE A.ano_refer    = i_anopro
                                 AND A.mes_refer    = i_mespro
                                 AND A.cod_empresa  = i_codemp
                                 AND B.ano_refer    = A.ano_refer
                                 AND B.mes_refer    = A.mes_refer
                                 AND B.cod_reporte  = 'RTC'
                                 AND B.cod_control  = A.cod_control
                                 AND B.tip_control_val NOT IN ('A', 'D')))
ORDER BY num_sec_reg;

  CURSOR cur_b (p_num_sec_reg NUMBER) IS
  SELECT num_sec_reg,
         num_sec_cta,
         tip_informacion,
         num_sec,
         cod_oficina,
         cod_ubigeo_ofic,
         tip_reporte,
         tip_ctacte,
         num_ctacte,
         tip_tarj_cre,
         num_tarj_cre,
         tip_mda,
         fec_apertura,
         tip_motivo_anul,
         fec_anul_cierre,
         fec_public_peru,
         num_rel_public,
         fec_rec_rectif,
         fec_fin_rectif
    FROM CRA_VALID_DETALLE_RTC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND num_sec_reg    = p_num_sec_reg
     AND tip_formulario = '1';

  CURSOR cur_c IS
  SELECT num_sec_reg,
         tip_informacion,
         num_sec,
         cod_sbs,
         cod_unico_clie,
         cod_ciiu3,
         cod_sunarp,
         tip_doc_trib,
         num_doc_trib,
         tip_doc_iden,
         num_doc_iden,
         tip_persona,
         tip_residencia,
         tip_clasif_clie,
         tip_magnitud,
         ind_accionista,
         tip_rellab,
         cod_pais,
         nom_sigla,
         REPLACE(
         trim(
            trim(nvl(nom_cliente,  '')) || ' ' ||
            trim(nvl(ape_materno,  '')) || ' ' ||
            trim(nvl(ape_casada,   '')) || ' ' ||
            trim(nvl(primer_nombre,'')) || ' ' ||
            trim(nvl(segundo_nombre,''))
           )
           ,'  ',' ') as nom_cliente, -- Paterno
         sexo,
         est_civil,
         fec_nac,
         direccion,
         cod_dir_ubigeo
    FROM CRA_VALID_IDENTIF_RTC i
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND tip_formulario = '1'
     AND cod_sbs        > 0
     AND num_sec_reg  NOT IN (SELECT DISTINCT C.num_sec_reg
                                FROM CRA_VAL_CONTROLES_RTC_X_SEC "C",
                                     CRA_CONTROL_HIS_VALIDACION  "D"
                               WHERE C.ano_refer    = i_anopro
                                 AND C.mes_refer    = i_mespro
                                 AND C.cod_empresa  = i_codemp
                                 AND D.ano_refer    = C.ano_refer
                                 AND D.mes_refer    = C.mes_refer
                                 AND D.cod_reporte  = 'RTC'
                                 AND D.cod_control  = C.cod_control
                                 AND D.tip_control_val NOT IN ('A', 'D'))

ORDER BY num_sec_reg;

  CURSOR cur_d (p_num_sec_reg NUMBER) IS
  SELECT num_sec_reg,
         num_sec_cta,
         tip_informacion,
         num_sec,
         cod_oficina,
         cod_ubigeo_ofic,
         tip_reporte,
         tip_ctacte,
         num_ctacte,
         tip_tarj_cre,
         num_tarj_cre,
         tip_mda,
         fec_apertura,
         tip_motivo_anul,
         fec_anul_cierre,
         fec_public_peru,
         num_rel_public,
         fec_rec_rectif,
         fec_fin_rectif
    FROM CRA_VALID_DETALLE_RTC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND num_sec_reg    = p_num_sec_reg
     AND tip_formulario = '1';

  CURSOR cur_e IS
  SELECT B.cod_control,
         B.num_sec_reg,
         B.num_sec_cta,
         B.val_tot_deu,
         B.ind_pro_val
    FROM CRA_VALID_DEV_IDENTIF_RTC   "A",
         CRA_VAL_CONTROLES_RTC_X_SEC "B"
   WHERE A.ano_refer      = i_anopro
     AND A.mes_refer      = i_mespro
     AND A.cod_empresa    = i_codemp
     AND B.ano_refer      = A.ano_refer
     AND B.mes_refer      = A.mes_refer
     AND B.cod_empresa    = A.cod_empresa
     AND B.num_sec_reg    = A.num_sec_reg
ORDER BY B.cod_control,
         B.num_sec_reg;

  CURSOR cur_f IS
  SELECT DISTINCT(num_sec_reg) AS num_sec_reg
    FROM CRA_DEV_CONTROLES_RCD_X_SEC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
ORDER BY num_sec_reg;

  CURSOR cur_g IS
  SELECT DISTINCT(num_sec_reg) AS num_sec_reg
    FROM CRA_DEV_CONTROLES_RTC_X_SEC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
ORDER BY num_sec_reg;

   n_cont_ace           NUMBER(06);
   n_cont_dev           NUMBER(06);
   n_cont_ctr           NUMBER(05);
   n_cont_err           NUMBER(05);
   n_ruta               VARCHAR2(40);
   n_diapro             VARCHAR2(02);
   n_tip_doc_trib       VARCHAR2(01);
   n_num_doc_trib       NUMBER(11);
   n_tip_producto       VARCHAR2(01);

BEGIN
   n_cont_ace    := 0;
   n_cont_dev    := 0;
   n_cont_err    := 0;
   n_cod_ide_pro := 438;
   n_cod_etapa   := '07';
-- Obtiene dia del Periodo de Proceso
   n_diapro := SF_ULT_DIA_MES(i_anopro, i_mespro);

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

-- Borra registros de la tabla CRA_VALID_DEV_DETALLE_RTC
   SP_BORRA_VALID_DEV_DETALLE_RTC (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VALID_DEV_DETALLE_RTC');
   n_cod_ide_pro := 438;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros de la tabla CRA_VALID_DEV_IDENTIF_RTC
   SP_BORRA_VALID_DEV_IDENTIF_RTC (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VALID_DEV_IDENTIF_RTC');
   n_cod_ide_pro := 438;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros de la tabla CRA_VAL_DETALLE_RTC
   SP_BORRA_VAL_DETALLE_RTC (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VAL_DETALLE_RTC');
   n_cod_ide_pro := 438;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros RTC de la tabla CRA_VAL_ID_PERSONA
   SP_BORRA_VAL_ID_PERSONA_RTC ('0208', '01', i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VAL_ID_PERSONA_RTC');
   n_cod_ide_pro := 438;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Devolucion . Identificacion de Clientes
   FOR cur_ai in cur_a LOOP
       n_cont_dev := n_cont_dev + 1;
       -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT
       INSERT INTO CRA_VALID_DEV_IDENTIF_RTC ( ano_refer, mes_refer, cod_empresa, num_sec_reg, tip_formulario, tip_informacion, num_sec,
                                               cod_sbs, cod_unico_clie, cod_ciiu3, cod_sunarp, tip_doc_trib, num_doc_trib, tip_doc_iden,
                                               num_doc_iden, tip_persona, tip_residencia, tip_clasif_clie, tip_magnitud, ind_accionista,
                                               tip_rellab, cod_pais, nom_sigla, nom_cliente, sexo, est_civil, fec_nac, direccion, cod_dir_ubigeo )
            VALUES(i_anopro, i_mespro, i_codemp, cur_ai.num_sec_reg, '1', cur_ai.tip_informacion, cur_ai.num_sec, cur_ai.cod_sbs, cur_ai.cod_unico_clie, cur_ai.cod_ciiu3,
                   cur_ai.cod_sunarp, cur_ai.tip_doc_trib, cur_ai.num_doc_trib, cur_ai.tip_doc_iden, cur_ai.num_doc_iden, cur_ai.tip_persona, cur_ai.tip_residencia,
                   cur_ai.tip_clasif_clie, cur_ai.tip_magnitud, cur_ai.ind_accionista, cur_ai.tip_rellab, cur_ai.cod_pais, cur_ai.nom_sigla, cur_ai.nom_cliente,
                   cur_ai.sexo, cur_ai.est_civil, cur_ai.fec_nac, cur_ai.direccion, cur_ai.cod_dir_ubigeo);
--     Devolucion . Detalle de Clientes
       FOR cur_bs in cur_b (cur_ai.num_sec_reg) LOOP
           n_cont_dev := n_cont_dev + 1;
           -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT
           INSERT INTO CRA_VALID_DEV_DETALLE_RTC ( ano_refer, mes_refer, cod_empresa, num_sec_reg, num_sec_cta, tip_formulario,
                                                   tip_informacion, num_sec, cod_oficina, cod_ubigeo_ofic, tip_reporte, tip_ctacte,
                                                   num_ctacte, tip_tarj_cre, num_tarj_cre, tip_mda, fec_apertura, tip_motivo_anul,
                                                   fec_anul_cierre, fec_public_peru, num_rel_public, fec_rec_rectif, fec_fin_rectif )
                VALUES(i_anopro, i_mespro, i_codemp, cur_bs.num_sec_reg, cur_bs.num_sec_cta, '1', cur_bs.tip_informacion, cur_bs.num_sec,
                       cur_bs.cod_oficina, cur_bs.cod_ubigeo_ofic, cur_bs.tip_reporte, cur_bs.tip_ctacte, cur_bs.num_ctacte, cur_bs.tip_tarj_cre,
                       cur_bs.num_tarj_cre, cur_bs.tip_mda, cur_bs.fec_apertura, cur_bs.tip_motivo_anul, cur_bs.fec_anul_cierre,
                       cur_bs.fec_public_peru, cur_bs.num_rel_public, cur_bs.fec_rec_rectif, cur_bs.fec_fin_rectif);
       END LOOP;
       IF n_cont_dev > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont_dev := 0;
       END IF;
   END LOOP;
   COMMIT;

-- Aceptacion . Identificacion de Clientes
   FOR cur_ci in cur_c LOOP
       n_cont_ace := n_cont_ace + 1;
       IF cur_ci.tip_doc_trib = '1' THEN
          n_num_doc_trib := Test_Number(cur_ci.num_doc_trib);
          IF n_num_doc_trib IS NULL THEN
             n_tip_doc_trib := NULL;
          ELSE
             n_tip_doc_trib := cur_ci.tip_doc_trib;
          END IF;
       ELSE
          n_tip_doc_trib := cur_ci.tip_doc_trib;
          n_num_doc_trib := cur_ci.num_doc_trib;
       END IF;

       INSERT INTO CRA_VAL_ID_PERSONA ( cod_form, tip_reg, ano_refer, mes_refer, dia_refer, cod_ent_vig, tip_doc, num_sec, cod_sbs, cod_unico, cod_ciiu3,
                    cod_sunarp, tip_doc_trib, cod_doc_trib, tip_doc_id, cod_doc_id, tip_persona, tip_residencia,
                    tip_clasif_deu, tip_magnitud, ind_accionista, tip_rellab, cod_pais, fec_nac, sexo, est_civil, sigla,
                    nom_cliente, direccion, cod_dir_ubigeo, errores, ind_castigado, ind_pagado, ind_vendido, ind_adjudicado, tip_soc_1, tip_soc_2, ape_materno, ape_casada, primer_nombre, segundo_nombre )
                VALUES('0208', '01', i_anopro, i_mespro, n_diapro, i_codemp, '1', cur_ci.num_sec, cur_ci.cod_sbs, cur_ci.cod_unico_clie, cur_ci.cod_ciiu3,
                       cur_ci.cod_sunarp, n_tip_doc_trib, n_num_doc_trib, cur_ci.tip_doc_iden, cur_ci.num_doc_iden, cur_ci.tip_persona, cur_ci.tip_residencia,
                       cur_ci.tip_clasif_clie, cur_ci.tip_magnitud, cur_ci.ind_accionista, cur_ci.tip_rellab, cur_ci.cod_pais, cur_ci.fec_nac, cur_ci.sexo, cur_ci.est_civil, cur_ci.nom_sigla, cur_ci.nom_cliente,
                       cur_ci.direccion, cur_ci.cod_dir_ubigeo, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                       NULL, NULL, NULL, NULL);

--     Aceptacion . Detalle de Clientes
       FOR cur_ds in cur_d (cur_ci.num_sec_reg) LOOP
           n_cont_ace := n_cont_ace + 1;
           IF cur_ds.tip_reporte IN ('CC', 'RC') THEN
              n_tip_producto := 'C';
           ELSE
              n_tip_producto := 'T';
           END IF;
           -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT
           INSERT INTO CRA_VAL_DETALLE_RTC ( ano_refer, mes_refer, cod_ent_vig, num_sec, num_sec_det, cod_sbs, cod_oficina,
                                             cod_ubigeo_ofic, tip_reporte, tip_ctacte, num_ctacte, tip_tarj_cre, num_tarj_cre,
                                             tip_mda, fec_apertura, tip_motivo_anul, fec_anul_cierre, fec_public_peru, num_rel_public,
                                             fec_rec_rectif, fec_fin_rectif, cod_form, tip_reg, tip_doc, dia_refer, tip_producto,
                                             ind_reg_obs, des_observaciones )
                VALUES(i_anopro, i_mespro, i_codemp, cur_ds.num_sec, cur_ds.num_sec_cta, cur_ci.cod_sbs, cur_ds.cod_oficina, cur_ds.cod_ubigeo_ofic,
                       cur_ds.tip_reporte, cur_ds.tip_ctacte, cur_ds.num_ctacte, cur_ds.tip_tarj_cre, cur_ds.num_tarj_cre, cur_ds.tip_mda, cur_ds.fec_apertura,
                       cur_ds.tip_motivo_anul, cur_ds.fec_anul_cierre, cur_ds.fec_public_peru, cur_ds.num_rel_public, cur_ds.fec_rec_rectif, cur_ds.fec_fin_rectif,
                       '0208', '01', '1', n_diapro, n_tip_producto, NULL, NULL);
       END LOOP;
       IF n_cont_ace > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont_ace := 0;
       END IF;
   END LOOP;
   COMMIT;

-- Actualiza Ultimo Periodo de Validacion de Clientes
   SP_ACT_ULT_PERIODO_VALIDACION (i_anopro, i_mespro, i_reporte, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_ACT_ULT_PERIODO_VALIDACION');
   n_cod_ide_pro := 438;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Borra registros de la tabla CRA_DEV_CONTROLES_RTC_X_SEC
   SP_BORRA_DEV_CTRLES_RTC_X_SEC (i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_DEV_CTRLES_RTC_X_SEC');
   n_cod_ide_pro := 438;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Actualiza Controles de Validacion RTC Observados por Secuencia
   FOR cur_ctr in cur_e LOOP
       n_cont_ctr := n_cont_ctr + 1;
       INSERT INTO CRA_DEV_CONTROLES_RTC_X_SEC ( ano_refer, mes_refer, cod_empresa, cod_control, num_sec_reg, num_sec_cta, val_tot_deu, ind_pro_val, cod_reporte )
            VALUES(i_anopro, i_mespro, i_codemp, cur_ctr.cod_control, cur_ctr.num_sec_reg, cur_ctr.num_sec_cta, cur_ctr.val_tot_deu, cur_ctr.ind_pro_val, 'RTC');
       IF n_cont_ctr > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont_ctr := 0;
       END IF;
   END LOOP;
   COMMIT;

-- Borra registros de la tabla CRA_DEV_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROLES_DEV_EMP ('RTC', i_anopro, i_mespro, i_codemp);
   o_idepro := NULL;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_VAL_BORRA_CONTROLES_DEV_EMP');
   n_cod_ide_pro := 438;
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) <> 'T' THEN
         n_observaciones := 'ERROR: Procesamiento de Procedure previo es obligatorio';
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         RETURN;
      END IF;
   ELSE
      n_observaciones := 'ERROR: Procedure no se encuentra catalogada en tabla CRA_PROCEDIMIENTOS';
      n_cod_est_pro := 'E';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Actualiza CRA_DEV_CONTROLES_X_EMPRESA
   SP_GRABA_DEV_CONTROL_RTC_X_EMP ('RTC', i_anopro, i_mespro, i_codemp);

--  Obtiene total registros de identificacion
    SELECT count(*) INTO n_tot_reg_identif
      FROM CRA_VALID_DEV_IDENTIF_RTC
     WHERE ano_refer       = i_anopro
       AND mes_refer       = i_mespro
       AND cod_empresa     = i_codemp
       AND tip_informacion = '1';

--  Obtiene total registros de detalle
    SELECT count(*) INTO n_tot_reg_saldos
      FROM CRA_VALID_DEV_DETALLE_RTC
     WHERE ano_refer       = i_anopro
       AND mes_refer       = i_mespro
       AND cod_empresa     = i_codemp
       AND tip_informacion = '1';

--  Calcula total registros
    n_tot_reg := n_tot_reg_identif + n_tot_reg_saldos;

--  Obtiene total registros de saldos de totales
    n_tot_reg_tot := 0;

--  Obtiene el total deuda de la empresa
    n_tot_deu       := 0;

--  Obtiene el numero total de errores en la empresa
    n_tot_err       := SF_OBT_TOTAL_ERRORES_EMPR_DEV ('RTC', i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes en la empresa
    n_tot_cli       := SF_OBT_TOTAL_CLIENTES_EMPR_DEV ('RTC', i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes con errores en la empresa
    n_tot_cli_err   := SF_OBT_TOTAL_CLI_ERR_EMPR_DEV ('RTC', i_anopro, i_mespro, i_codemp);

--  Obtiene el total deuda de la empresa con errores
    n_tot_deu_err   := 0;

--  Obtiene el numero total de clientes con errores por tipo de control validez
    n_tot_cli_err_v := SF_OBT_TOTAL_CLI_ERR_TIPO_DEV ('RTC', i_anopro, i_mespro, i_codemp, 'V');

--  Obtiene el total deuda con errores por tipo de control validez
    n_tot_deu_err_v := 0;

--  Obtiene el numero total de clientes con errores por tipo de control consistencia
    n_tot_cli_err_c := SF_OBT_TOTAL_CLI_ERR_TIPO_DEV ('RTC', i_anopro, i_mespro, i_codemp, 'C');

--  Obtiene el total deuda con errores por tipo de control consistencia
    n_tot_deu_err_c := 0;

--  Obtiene el numero total de clientes con errores por tipo de control alerta
    n_tot_cli_err_a := SF_OBT_TOTAL_CLI_ERR_TIPO_DEV ('RTC', i_anopro, i_mespro, i_codemp, 'A');

--  Obtiene el total deuda con errores por tipo de control alerta
    n_tot_deu_err_a := NULL;

--  Actualiza CRA_DEV_TOTALES_VALIDACION
  BEGIN
    SELECT num_tot_reg
      INTO n_tot_reg_aux
      FROM CRA_DEV_TOTALES_VALIDACION
     WHERE ano_refer    = i_anopro
       AND mes_refer    = i_mespro
       AND cod_reporte  = 'RTC'
       AND cod_empresa  = i_codemp;

    UPDATE CRA_DEV_TOTALES_VALIDACION
           SET num_tot_reg       = n_tot_reg,
               val_tot_deu       = n_tot_deu,
               num_tot_err       = n_tot_err,
               num_tot_cli       = n_tot_cli,
               num_tot_cli_err   = n_tot_cli_err,
               val_tot_deu_err   = n_tot_deu_err,
               num_tot_reg_tot   = n_tot_reg_tot,
               num_tot_cli_err_v = n_tot_cli_err_v,
               val_tot_deu_err_v = n_tot_deu_err_v,
               num_tot_cli_err_c = n_tot_cli_err_c,
               val_tot_deu_err_c = n_tot_deu_err_c,
               num_tot_cli_err_a = n_tot_cli_err_a,
               val_tot_deu_err_a = n_tot_deu_err_a
         WHERE ano_refer         = i_anopro
           AND mes_refer         = i_mespro
           AND cod_reporte       = 'RTC'
           AND cod_empresa       = i_codemp;
  EXCEPTION
    WHEN OTHERS THEN
         -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
         INSERT INTO CRA_DEV_TOTALES_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_tot_reg, val_tot_deu, num_tot_err,
                                                  num_tot_cli, num_tot_cli_err, val_tot_deu_err, num_tot_reg_tot, num_tot_cli_err_v,
                                                  val_tot_deu_err_v, num_tot_cli_err_c, val_tot_deu_err_c, num_tot_cli_err_a, val_tot_deu_err_a,
                                                  dia_refer, cod_sec_envio )
              VALUES ( i_anopro, i_mespro, 'RTC', i_codemp, n_tot_reg, n_tot_deu, n_tot_err, n_tot_cli, n_tot_cli_err, n_tot_deu_err, n_tot_reg_tot,
                       n_tot_cli_err_v, n_tot_deu_err_v, n_tot_cli_err_c, n_tot_deu_err_c, n_tot_cli_err_a, n_tot_deu_err_a, '01', '01');
  END;

    n_tot_deu_err := 0;

    UPDATE CRA_TOTALES_VALIDACION
           SET val_tot_deu_err   = n_tot_deu_err
         WHERE ano_refer         = i_anopro
           AND mes_refer         = i_mespro
           AND cod_reporte       = 'RTC'
           AND cod_empresa       = i_codemp;

   COMMIT;
   SP_BORRA_LISTA_CONTROLES_X_SEC (i_anopro, i_mespro, i_reporte, i_codemp);

   IF i_reporte = 'RCD' THEN
--    Genera Lista de Controles de Validacion RCD Observados por Secuencia
      FOR cur_err in cur_f LOOP
          n_cont_err := n_cont_err + 1;
          -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
          INSERT INTO CRA_DEV_LISTA_CONTROL_X_SEC (  ano_refer , mes_refer, cod_reporte, cod_empresa, num_sec_reg, des_controles, dia_refer, cod_sec_envio )
               VALUES ( i_anopro, i_mespro, i_reporte, i_codemp, cur_err.num_sec_reg,
                        SF_OBT_CONTROLES_RCD_X_SEC (i_anopro, i_mespro, i_codemp, cur_err.num_sec_reg), '01', '01' );
          IF n_cont_err > 5000 THEN -- SRR 10/09/2010   verificando performance
             COMMIT;
             n_cont_err := 0;
          END IF;
      END LOOP;
   END IF;
   COMMIT;

   IF i_reporte = 'RTC' THEN
--    Genera Lista de Controles de Validacion RTC Observados por Secuencia
      FOR cur_err in cur_g LOOP
          n_cont_err := n_cont_err + 1;
          -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
          INSERT INTO CRA_DEV_LISTA_CONTROL_X_SEC (  ano_refer , mes_refer, cod_reporte, cod_empresa, num_sec_reg, des_controles, dia_refer, cod_sec_envio )
               VALUES ( i_anopro, i_mespro, i_reporte, i_codemp, cur_err.num_sec_reg,
                        SF_OBT_CONTROLES_RTC_X_SEC (i_anopro, i_mespro, i_codemp, cur_err.num_sec_reg), '01', '01');
          IF n_cont_err > 5000 THEN -- SRR 10/09/2010   verificando performance
             COMMIT;
             n_cont_err := 0;
          END IF;
      END LOOP;
   END IF;
   COMMIT;

   n_cod_est_pro := 'T';
   n_cod_ide_pro := 438;

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, 'MSJ: Exclusion de Datos RTC OK');
-- Actualiza CRA_PERIODO_INF_EMP_ETAPA
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'MSJ: Exclusion de Datos RTC OK', 'VA', NULL, NULL, NULL);

-- Obtiene ruta
   n_ruta := SF_OBT_RUTA_DE_VALIDACION ('RTC');
-- Generacion de RTC OK y RTC OBS
   PK_ENTREGABLES_RTC.SP_VAL_GENERA_RTC_OK (i_anopro, i_mespro, i_codemp, n_ruta);

EXCEPTION
   WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_ide_pro := 438;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
--       Actualiza CRA_PERIODO_INF_EMP_ETAPA
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
--       Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DEV_DETALLE_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Borra registros de tabla CRA_VALID_DEV_DETALLE_RTC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 440;
   n_cod_est_pro := 'P';

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

   BEGIN
    DELETE CRA_VALID_DEV_DETALLE_RTC
    WHERE ano_refer    = i_anopro
      AND mes_refer    = i_mespro
      AND cod_empresa  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_DEV_DETALLE_RTC;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VALID_DEV_IDENTIF_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Borra registros de tabla CRA_VALID_DEV_IDENTIF_RTC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 439;
   n_cod_est_pro := 'P';

-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

   BEGIN
    DELETE CRA_VALID_DEV_IDENTIF_RTC
    WHERE ano_refer    = i_anopro
      AND mes_refer    = i_mespro
      AND cod_empresa  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;

-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VALID_DEV_IDENTIF_RTC;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VAL_DETALLE_RTC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Borra registros de tabla CRA_VAL_DETALLE_RTC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 441;
   n_cod_est_pro := 'P';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   BEGIN
    DELETE CRA_VAL_DETALLE_RTC
    WHERE ano_refer    = i_anopro
      AND mes_refer    = i_mespro
      AND cod_ent_vig  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'T';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
END SP_BORRA_VAL_DETALLE_RTC;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_VAL_ID_PERSONA_RTC
         (i_codfor IN VARCHAR2,
          i_tipreg IN VARCHAR2,
          i_anopro IN VARCHAR2,
          i_mespro IN VARCHAR2,
          i_codemp IN VARCHAR2)
-- -------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Enero 2003
-- Motivo: Borra registros RTC de tabla CRA_VAL_ID_PERSONA.
-- -------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 442;
-- Actualiza CRA_PAR_PROCESOS
   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
   BEGIN
     DELETE CRA_VAL_ID_PERSONA
     WHERE cod_form     = i_codfor
     AND tip_reg      = i_tipreg
     AND ano_refer    = i_anopro
     AND mes_refer    = i_mespro
     AND cod_ent_vig  = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;
   n_cod_est_pro := 'T';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
--       Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------

PROCEDURE SP_BORRA_DEV_CTRLES_RTC_X_SEC
         (i_anopro  IN VARCHAR2,
          i_mespro  IN VARCHAR2,
          i_codemp  IN VARCHAR2)
-- -----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Borra registros de tabla CRA_DEV_CONTROLES_RTC_X_SEC.
-- -----------------------------------------------------------------------------
IS
BEGIN
   n_cont := 0;
   n_cod_ide_pro := 443;
   n_cod_est_pro := 'P';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
   BEGIN
      DELETE CRA_DEV_CONTROLES_RTC_X_SEC
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp;
   EXCEPTION
   WHEN OTHERS THEN
         n_cont := 0;
   END;
   COMMIT;
   n_cod_est_pro := 'T';
-- Actualiza CRA_PAR_PROCESOS
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
-- Actualiza CRA_CONTROL_PROCESOS
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);

EXCEPTION
    WHEN OTHERS THEN
         n_code  := SQLCODE;
         n_error := SQLERRM;
         n_cod_est_pro := 'E';
--       Actualiza CRA_PAR_PROCESOS
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
--       Actualiza CRA_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END SP_BORRA_DEV_CTRLES_RTC_X_SEC;

----------------------------------------------------------------------

PROCEDURE SP_GRABA_DEV_CONTROL_RTC_X_EMP
         (i_cod_reporte    IN VARCHAR2,
          i_ano_pro        IN VARCHAR2,
          i_mes_pro        IN VARCHAR2,
          i_cod_empresa    IN VARCHAR2)
-- -------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2003
-- Objetivo: Actualiza registros de RTC observados en tabla CRA_DEV_CONTROLES_X_EMPRESA.
-- -------------------------------------------------------------------
IS
  CURSOR CUR_A IS
  SELECT A.cod_control,
         count(*) AS veces,
         count(distinct A.num_sec_reg) AS clientes,
         B.tip_control_val,
         A.ind_pro_val
    FROM CRA_DEV_CONTROLES_RTC_X_SEC  "A",
         CRA_CONTROL_HIS_VALIDACION   "B"
   WHERE A.ano_refer    = i_ano_pro
     AND A.mes_refer    = i_mes_pro
     AND A.cod_empresa  = i_cod_empresa
     AND A.ano_refer    = B.ano_refer
     AND A.mes_refer    = B.mes_refer
     AND B.cod_reporte  = i_cod_reporte
     AND A.cod_control  = B.cod_control
GROUP BY A.cod_control,
         B.tip_control_val,
         A.ind_pro_val
ORDER BY A.cod_control;

n_nro_clientes NUMBER(8);
n_tot_deuda    NUMBER(15,2);

BEGIN
   n_cont := 0;

   FOR cur in cur_a LOOP
       n_cont := n_cont + 1;
       n_tot_deuda := SF_OBT_DEUD_ACUM_X_CONTROL_RTC (i_ano_pro, i_mes_pro, i_cod_empresa, cur.cod_control);
       IF cur.tip_control_val IN ('D') THEN
          n_nro_clientes := NULL;
       ELSE
          n_nro_clientes := cur.clientes;
       END IF;
       -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
       INSERT INTO CRA_DEV_CONTROLES_X_EMPRESA ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_control, num_veces,
                                                 num_clientes, val_tot_deu, ind_pro_val, dia_refer, cod_sec_envio )
            VALUES ( i_ano_pro, i_mes_pro, i_cod_reporte, i_cod_empresa, cur.cod_control, cur.veces,
                     n_nro_clientes, n_tot_deuda, cur.ind_pro_val, '01', '01' );
-- Control de transacciones
       IF n_cont > 5000 THEN -- SRR 10/09/2010   verificando performance
          COMMIT;
          n_cont := 0;
       END IF;
   END LOOP;
   COMMIT;
END SP_GRABA_DEV_CONTROL_RTC_X_EMP;

---------------------------------------------------------------------------------

PROCEDURE SP_VAL_CARGA_A_SISTEMA
         (i_cod_form     IN VARCHAR2,
          i_cod_anexo    IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_ruta         IN VARCHAR2,
          i_cod_reporte  IN  VARCHAR2 DEFAULT '',
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ------------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Diciembre 2001
-- Motivo: Carga RCD a Sistema.
-- ------------------------------------------------------------------------------
-- Modificado por        : Jaime Lopez-Torres M.
-- Fecha Actualizacion   : 09 Noviembre 2002
-- Descripcion Actualiza.: Cambio en extraccion de caracteres especiales.
-- ------------------------------------------------------------------------------
-- Modificado por        : Jaime Lopez-Torres M.
-- Fecha Actualizacion   : 12 Junio 2003
-- Descripcion Actualiza.: Condicion en dias se amplia de 3 a 4 caracteres
-- ------------------------------------------------------------------------------
-- 01/07/2003     Jaime Lopez-Torres M.       Se incluyen los sgtes. procedures:
--                    SP_BORRA_VALID_DEV_SALDOS_RCD, SP_BORRA_VALID_DEV_IDENTIF_RCD, SP_BORRA_VALID_DEV_DETALLE_RTC, SP_BORRA_VALID_DEV_IDENTIF_RTC
-- ------------------------------------------------------------------------------
-- 30/09/2015     Juan Carlos Fernández S.    Se actualiza el SP con los nuevos parametros i_dia_refer y i_cod_sec_envio
-- --------------------------------------------------------------------------------------------------------------
IS
   ls_filename         VARCHAR2 (32);
   ls_registro         VARCHAR2 (512);
   ls_registro_116     VARCHAR2 (116);
   ls_registro_280     VARCHAR2 (280);
   ls_registro_100     VARCHAR2 (100);
   file_id             UTL_FILE.FILE_TYPE;
   lb_is_open          BOOLEAN;
   n_fecini_pro        DATE   ;
   n_long_saldo        NUMBER   (05);
   n_observaciones     VARCHAR2 (255);
   ls_error            VARCHAR2 (2000);
   n_cod_ide_pro       NUMBER   (03);
   n_cod_etapa_val     VARCHAR2 (02);
   es_errado           NUMBER   (01);
   ln_can_reg_cab      NUMBER   := 0;
   ln_can_reg_id       NUMBER   := 0;
   ln_can_reg_sal      NUMBER   := 0;
   ln_can_sec_cta      NUMBER   := 0;
   ln_can_bad_cab      NUMBER   := 0;
   ln_can_bad_id       NUMBER   := 0;
   ln_can_bad_sal      NUMBER   := 0;
   ln_can_ins_id       NUMBER   := 0;
   ln_can_ins_sal      NUMBER   := 0;
   ln_can_inserted     NUMBER   := 0;
-- Registro de Cabecera
   ls_cod_form         VARCHAR2 (04);
   ls_cod_anexo         VARCHAR2 (02);
   ls_ano_refer         VARCHAR2 (04);
   ls_mes_refer         VARCHAR2 (02);
   ls_dia_refer         VARCHAR2 (02);
   ls_cod_ent_vig      VARCHAR2 (05);
   ls_cod_expresion    NUMBER   (3);
   ls_dato_control     VARCHAR2 (15);
   ls_monto_minimo     NUMBER   (15,2);
-- Datos comunes
   ls_tip_doc          VARCHAR2 (01);
   ls_tip_inf          VARCHAR2 (01);
   ln_num_sec          NUMBER   (08);
   n_hay_error         NUMBER   (01);
   n_reporte           VARCHAR2 (03);
   n_fecha_invalida    NUMBER   (1);
-- Registro de identificacion
   ln_cod_sbs          NUMBER   (10);
   n_tip_condicion     VARCHAR2 (05);
   n_cod_sbs_rplzte    NUMBER   (10);
   ls_cod_unico        VARCHAR2 (20);
   ls_cod_ciiu3        VARCHAR2 (04);
   ls_cod_sunarp       VARCHAR2 (15);
   ls_tip_doc_trib     VARCHAR2 (01);
   ln_cod_doc_trib     NUMBER   (11);
   ls_cod_doc_trib     VARCHAR2 (11);
   ls_tip_doc_id       VARCHAR2 (01);
   ls_cod_doc_id       VARCHAR2 (12);
   ls_tip_persona      VARCHAR2 (01);
   ls_tip_residencia   VARCHAR2 (01);
   ls_tip_clasif_deu   VARCHAR2 (01);
   ls_tip_magnitud     VARCHAR2 (01);
   ls_ind_accionista   VARCHAR2 (01);
   ls_tip_rellab       VARCHAR2 (01);
   ls_cod_pais         VARCHAR2 (04);
   ls_fec_nac          VARCHAR2 (08);
   ld_fec_nac          DATE;
   ls_sexo             VARCHAR2 (01);
   ls_est_civil        VARCHAR2 (01);
   ls_sigla            VARCHAR2 (20);
   ls_ape_pat          VARCHAR2 (120);
   ls_ape_mat          VARCHAR2 (40);
   ls_ape_cas          VARCHAR2 (40);
   ls_pri_nom          VARCHAR2 (40);
   ls_seg_nom          VARCHAR2 (40);
   ls_dsdeu            VARCHAR2 (243);
-- Otros datos de identificacion
   ls_direccion        VARCHAR2 (80);
   ls_dir_ubigeo       VARCHAR2 (06);
-- Registro de saldos
   ls_cod_ofi          VARCHAR2 (04);
   ls_ofi_ubigeo       VARCHAR2 (06);
   ls_cod_cuenta       VARCHAR2 (14);
   ls_tip_credito      VARCHAR2 (02);  -- JCFS 05/05/2010: Se aumenta el tamaño de 1 a 2
   ln_cond_dias        NUMBER   (04);
   ls_cond_esp         VARCHAR2 (02);
   ls_cond_disp        VARCHAR2 (02);
   ln_saldo            NUMBER   (18,2); -- JCFS 05/05/2010: Se aumenta el tamaño de (15,2) a (18,2)
-- Registro de ATC, CCC O Rectificaciones
   ls_tip_reporte      VARCHAR2 (02);
   ls_tip_ctacte       VARCHAR2 (01);
   ls_num_ctacte       VARCHAR2 (30);
   ls_tip_tarj_cre     VARCHAR2 (01);
   ls_num_tarj_cre     VARCHAR2 (30);
   ls_tip_mda          VARCHAR2 (01);
   ls_fec_apertura     VARCHAR2 (08);
   ld_fec_apertura     DATE;
   ls_tip_motivo_anul  VARCHAR2 (01);
   ls_fec_anul_cierre  VARCHAR2 (08);
   ld_fec_anul_cierre  DATE;
   ls_fec_public_peru  VARCHAR2 (08);
   ld_fec_public_peru  DATE;
   ln_num_rel_public   NUMBER   (04);
   ls_fec_rec_rectif   VARCHAR2 (08);
   ld_fec_rec_rectif   DATE;
   ls_fec_fin_rectif   VARCHAR2 (08);
   ld_fec_fin_rectif   DATE;
   lv_ind_riesgo_camb_cred  cra_valid_identif_rcd.ind_riesgo_camb_cred%type;
   lv_ind_atraso            cra_valid_identif_rcd.ind_atraso%type;
   lv_clasif_interna_ent    cra_valid_identif_rcd.clasif_interna_ent%type;
   -- JCFS 05/05/2010: Variables para almacenar las columnas incorporadas con la Res. 11356
   ls_cla_deu_sin_ali  VARCHAR2(01);
   ls_cod_gru_eco      VARCHAR2(20);
   ls_tip_doc_iden_com VARCHAR2(02);
   ls_num_doc_iden_com VARCHAR2(40);  -- JCFS 04/07/2011: Se aumenta el tamaño a 40 caracteres
   ls_fac_conv_cred    VARCHAR2(02);
   -- JCFS 04/07/2011: Variables para almacenar los datos de cabecera del RCT
   ls_fec_periodo_char  VARCHAR2(08);
   ld_fec_periodo_date  DATE;
   ls_fec_vta_cart_char VARCHAR2(08);
   ld_fec_vta_cart_date DATE;
   ls_num_doc_trib_adq  VARCHAR2(11);
   ls_razon_social_adq  VARCHAR2(120);
   ls_tipentidad        VARCHAR2 (02);
   ls_est_proc          VARCHAR2 (02);
   ln_num_proc          NUMBER;
   ls_ingreso_ext       VARCHAR2 (02);
   ln_resultado         NUMBER;
   ls_secuencia         VARCHAR2(8);
   ls_nom_empresa       VARCHAR2(120);
   ls_cod_moneda        VARCHAR2(1);
   ln_interes          NUMBER   (18,2);
   ln_otros_saldos     NUMBER   (18,2);
   ln_garantia         NUMBER   (18,2);
   ln_can_inserted_sal NUMBER   := 0;
   -- JAGJ 31/07/2013: Variables para almacenar las columnas incorporadas con la Res. 8548
   ls_ind_endeudamiento VARCHAR2(1);
   ls_sec_envio         VARCHAR2(2);
   ls_tip_codeudor      VARCHAR2(2);
   ln_porc_codeudor     NUMBER  (5,2);

   ls_tip_doc_iden_adq    VARCHAR2 (1);  -- JAGJ 16/01/2014: Nueva Variable para almacenar el Tipo de documento del Adquiriente (RCT)
   ls_cod_doc_id_adq      VARCHAR2 (12); -- JAGJ 16/01/2014: Nueva Variable para almacenar el Código de documento del Adquiriente (RCT)
   ln_num_secuencia       NUMBER;        -- JAGJ 16/01/2014: Nueva Variable para almacenar el número de Secuencia (RCT)

BEGIN
   -- JCFS 2018-02: Inicio de "exoneración" del registro de auditoría
   PKG_APPLICATION_INFO.Inicio;

   es_errado     := 0;
   n_fecini_pro  := SYSDATE;
   n_cod_etapa_val := '03';

   IF i_cod_form = '0106' THEN
      n_reporte     := 'RCD';
      n_cod_ide_pro := 5;
   END IF;

   IF i_cod_form = '0208' THEN
      n_reporte     := 'RTC';
      n_cod_ide_pro := 14;
   END IF;

   IF i_cod_reporte IN ('RCA', 'RCM', 'RCT', 'RCO')  THEN
      ls_cod_form      := i_cod_form;
      ls_cod_anexo     := i_cod_anexo;
      ls_cod_ent_vig   := i_codemp;
      ls_ano_refer     := i_anopro;
      ls_mes_refer     := i_mespro;
      n_reporte     := i_cod_reporte;
      n_cod_ide_pro := 601;

      IF i_cod_reporte  = 'RCM'  THEN
         n_cod_ide_pro := 801;
      END IF;

      IF i_cod_reporte  = 'RCO'  THEN
         n_cod_ide_pro := 851;
      END IF;

      IF i_cod_reporte  = 'RCT'  THEN
         n_cod_ide_pro := 901;
      END IF;
   END IF;

   IF i_cod_reporte = 'RDD' THEN
      ls_cod_ent_vig   := i_codemp;
      ls_ano_refer     := i_anopro;
      ls_mes_refer     := i_mespro;
      n_reporte     := i_cod_reporte;
      n_cod_ide_pro := 701;
   END IF;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL, i_dia_refer, i_cod_sec_envio);
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'P', i_dia_refer, i_cod_sec_envio);

-- Nombre del archivo de entrada
   IF n_reporte = 'RCT' THEN
      ls_filename := PK_VALIDADOR_RCA.SF_NOMBRE_FILE_MATRICULA_RCA ( n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
   ELSIF n_reporte = 'RCO' THEN
      ls_filename := 'rccod'||i_anopro||i_mespro||'.'||substr(i_codemp,3,3);
   ELSE
      ls_filename := lower(n_reporte)||i_anopro||i_mespro||'.'||substr(i_codemp,3,3);
   END IF;
-- Abre el archivo
   file_id        := UTL_FILE.FOPEN  (i_ruta, ls_filename, 'r');

   IF n_reporte = 'RCD' or n_reporte = 'RTC' OR n_reporte = 'RCT' THEN
      -- Lee registro de Cabecera
      UTL_FILE.GET_LINE(file_id, ls_registro);
      ls_cod_form      := Lpad(Ltrim(Rtrim(Substr(ls_registro, 1,4))) ,4,'0') ;
      ls_cod_anexo     := Lpad(Ltrim(Rtrim(Substr(ls_registro, 5,2))) ,2,'0') ;
      ls_cod_ent_vig   := Lpad(Ltrim(Rtrim(Substr(ls_registro, 7,5))) ,5,'0') ;
      ls_ano_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,12,4))) ,4,'0') ;
      ls_mes_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,16,2))) ,2,'0') ;
      ls_dia_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,18,2))) ,2,'0') ;

      IF n_reporte = 'RCT' THEN
         IF ls_ano_refer > '2013' THEN
            ls_sec_envio     := Lpad(Ltrim(Rtrim(Substr(ls_registro,20,2))), 2, '0') ;
            -- JCFS 2015-09: ls_sec_envio debería ser igual a i_cod_sec_envio
            ls_cod_expresion := Test_Number(Substr(ls_registro,22,3));
            ls_dato_control  := Lpad(Ltrim(Rtrim(Substr(ls_registro,25,15))) ,15,'0') ;
            ls_monto_minimo  := Test_Number(Substr(ls_registro,40,15));
         ELSE
            ls_sec_envio     := '01' ;
            ls_cod_expresion := Test_Number(Substr(ls_registro,20,3));
            ls_dato_control  := Lpad(Ltrim(Rtrim(Substr(ls_registro,23,15))) ,15,'0') ;
            ls_monto_minimo  := Test_Number(Substr(ls_registro,38,15));
         END IF;
      ELSE
         ls_sec_envio     := '01';
         ls_cod_expresion := Test_Number(Substr(ls_registro,20,3));
         ls_dato_control  := Lpad(Ltrim(Rtrim(Substr(ls_registro,23,15))) ,15,'0') ;
         ls_monto_minimo  := Test_Number(Substr(ls_registro,38,15));
      END IF;

      -- Valida datos de Cabecera
      IF N_REPORTE <> 'RCT' THEN
         IF ls_cod_form != i_cod_form OR ls_cod_anexo != i_cod_anexo OR ls_cod_ent_vig != i_codemp OR
            ls_ano_refer != i_anopro OR ls_mes_refer != i_mespro THEN
            n_observaciones := 'OBS: Datos de cabecera no corresponden a los parametros';
            SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
            SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
            SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
            UTL_FILE.FCLOSE(file_id);
            RETURN;
         END IF;
      END IF;
   END IF;

   IF n_reporte = 'RDD' THEN
      -- Lee registro de Cabecera
      UTL_FILE.GET_LINE(file_id, ls_registro);
      ls_secuencia := Lpad(Ltrim(Rtrim(Substr(ls_registro, 1,8))) ,8,'0') ;
      ls_ano_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,9,4))) ,4,'0') ;
      ls_mes_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,13,2))) ,2,'0') ;
      ls_dia_refer     := Lpad(Ltrim(Rtrim(Substr(ls_registro,15,2))) ,2,'0') ;
      ls_monto_minimo  := Test_Number(Substr(ls_registro,17,15));
      ls_cod_ent_vig   := Lpad(Ltrim(Rtrim(Substr(ls_registro,32,5))) ,5,'0') ;
      ls_nom_empresa   := Ltrim(Rtrim(Substr(ls_registro,37,120))) ;

      IF ls_cod_ent_vig != i_codemp OR ls_ano_refer != i_anopro OR ls_mes_refer != i_mespro THEN
          n_observaciones := 'OBS: Datos de cabecera no corresponden a los parametros';
          SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
          SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
          SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
          UTL_FILE.FCLOSE(file_id);
          RETURN;
       END IF;
   END IF;

   IF n_reporte = 'RCD' THEN
      SP_BORRA_VALID_ASIG_CODSBS (n_reporte, i_anopro, i_mespro, i_codemp, '01', '01');
   -- Borra registros de la tabla CRA_VALID_DEV_SALDOS_RCD
      SP_BORRA_VALID_DEV_SALDOS_RCD (i_anopro, i_mespro, i_codemp);
   -- Borra registros de la tabla CRA_VALID_DEV_SALDOS_RCD
      SP_BORRA_VALID_DEV_IDENTIF_RCD (i_anopro, i_mespro, i_codemp);
      SP_BORRA_VALID_SALDOS_RCD (i_anopro, i_mespro, i_codemp);
      SP_BORRA_VALID_IDENTIF_RCD (i_anopro, i_mespro, i_codemp);
   END IF;

   IF n_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
      SP_BORRA_VALID_ASIG_CODSBS (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
   -- Borra registros de la tabla CRA_VALID_DEV_SALDOS
      SP_BORRA_VALID_DEV_SALDOS_RCA (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
   -- Borra registros de la tabla CRA_VALID_DEV_IDENTIF
      SP_BORRA_VALID_DEV_IDENTIF_RCA (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
      SP_BORRA_VALID_SALDOS_RCA (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
      SP_BORRA_VALID_IDENTIF_RCA (n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio);
   END IF;

   IF n_reporte = 'RTC' THEN
      SP_BORRA_VALID_ASIG_CODSBS (n_reporte, i_anopro, i_mespro, i_codemp, '01', '01');
   -- Borra registros de la tabla CRA_VALID_DEV_SALDOS_RTC
      SP_BORRA_VALID_DEV_DETALLE_RTC (i_anopro, i_mespro, i_codemp);
   -- Borra registros de la tabla CRA_VALID_DEV_SALDOS_RTC
      SP_BORRA_VALID_DEV_IDENTIF_RTC (i_anopro, i_mespro, i_codemp);
      SP_BORRA_VALID_DETALLE_RTC (i_anopro, i_mespro, i_codemp);
      SP_BORRA_VALID_IDENTIF_RTC (i_anopro, i_mespro, i_codemp);
   END IF;

   IF n_reporte = 'RDD' THEN
      SP_BORRA_VALID_ASIG_CODSBS (n_reporte, i_anopro, i_mespro, i_codemp, '01', '01');
   -- Borra registros de la tabla CRA_VALID_DEV_SALDOS_RCD
      SP_BORRA_VALID_DEV_SALDOS_RDD (i_anopro, i_mespro, n_reporte, i_codemp);
   -- Borra registros de la tabla CRA_VALID_DEV_SALDOS_RCD
      SP_BORRA_VALID_DEV_IDENTIF_RDD (i_anopro, i_mespro, n_reporte, i_codemp);
      SP_BORRA_VALID_SALDOS_RDD (i_anopro, i_mespro, n_reporte, i_codemp);
      SP_BORRA_VALID_IDENTIF_RDD (i_anopro, i_mespro, n_reporte, i_codemp);
   END IF;

   -- JCFS 04/07/2011: Se Graba Cabecera del RCT
   IF n_reporte = 'RCT' THEN
      BEGIN
         DELETE CRA_VALID_CABECERA_RCT
          WHERE cod_empresa_inf = i_codemp AND ano_refer = ls_ano_refer
            AND mes_refer = ls_mes_refer AND dia_refer = ls_dia_refer AND cod_sec_envio = i_cod_sec_envio;
      EXCEPTION
         WHEN OTHERS THEN
            n_cont := 0;
      END;

      ls_fec_periodo_char  := ls_ano_refer || ls_mes_refer || ls_dia_refer;
      IF nvl(ls_fec_periodo_char, '00000000') IN ('0', '00000000') OR SF_VALIDA_FECHA(ls_fec_periodo_char) IS NULL THEN
         ld_fec_periodo_date := NULL;
      ELSE
         ld_fec_periodo_date := to_date(ls_fec_periodo_char, 'yyyymmdd');
      END IF;

      IF ls_ano_refer > '2013' THEN
         ls_fec_vta_cart_char := Ltrim(Rtrim(Substr(ls_registro,55,8)));
         IF nvl(ls_fec_vta_cart_char, '00000000') IN ('0', '00000000') OR SF_VALIDA_FECHA(ls_fec_vta_cart_char) IS NULL THEN
            ld_fec_vta_cart_date := NULL;
         ELSE
            ld_fec_vta_cart_date := to_date(ls_fec_vta_cart_char, 'yyyymmdd');
         END IF;

         ls_tip_doc_iden_adq := Ltrim(Rtrim(Substr(ls_registro,63,1)));
         ls_cod_doc_id_adq := Ltrim(Rtrim(Substr(ls_registro,64,12)));

         ls_num_doc_trib_adq  := Ltrim(Rtrim(Substr(ls_registro,76,11)));
         ls_razon_social_adq  := Ltrim(Rtrim(Substr(ls_registro,87,120)));
      ELSE
          ls_fec_vta_cart_char := Ltrim(Rtrim(Substr(ls_registro,53,8)));
          IF nvl(ls_fec_vta_cart_char, '00000000') IN ('0', '00000000') OR SF_VALIDA_FECHA(ls_fec_vta_cart_char) IS NULL THEN
             ld_fec_vta_cart_date := NULL;
          ELSE
             ld_fec_vta_cart_date := to_date(ls_fec_vta_cart_char, 'yyyymmdd');
          END IF;

          ls_tip_doc_iden_adq := null;
          ls_cod_doc_id_adq := null;
          ls_num_doc_trib_adq  := Ltrim(Rtrim(Substr(ls_registro,61,11)));
          ls_razon_social_adq  := Ltrim(Rtrim(Substr(ls_registro,72,120)));
      END IF;

      BEGIN
         INSERT INTO CRA_VALID_CABECERA_RCT ( cod_empresa_inf, ano_refer, mes_refer, dia_refer, cod_sec_envio, fec_periodo_char, fec_periodo_date,
                  fec_vta_cart_char, fec_vta_cart_date, num_doc_trib_adq, razon_social_adq, tip_doc_iden_adq, num_doc_iden_adq )
         VALUES ( ls_cod_ent_vig, ls_ano_refer, ls_mes_refer, ls_dia_refer, ls_sec_envio, ls_fec_periodo_char, ld_fec_periodo_date,
                  ls_fec_vta_cart_char, ld_fec_vta_cart_date, ls_num_doc_trib_adq, ls_razon_social_adq, ls_tip_doc_iden_adq, ls_cod_doc_id_adq );
      EXCEPTION
         WHEN OTHERS THEN
            ls_error := SQLERRM;
            n_observaciones := substr(ls_error,1,255);
            UTL_FILE.FCLOSE(file_id);
            SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                          ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                          ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
            -- Actualiza CRA_PAR_PROCESOS
            SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
            -- Actualiza CRA_PAR_CONTROL_PROCESOS
            SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
            -- Actualiza CRA_PERIODO_INF_EMP_ETAPA
            SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
            RETURN;
      END;
   END IF;

   ln_can_reg_cab   := ln_can_reg_cab + 1;

-- Lee los registros hasta EOF (No_Data_Found)
   LOOP
     BEGIN
       <<Lectura>>
       UTL_FILE.GET_LINE(file_id, ls_registro);
       ls_registro     := translate(ls_registro, chr(10)||chr(13), RPAD(' ',2) );
       ls_registro_116 := Substr(ls_registro, 1, 116);
       ls_registro_280 := Substr(ls_registro, 117, 280);
       ls_registro_100 := Substr(ls_registro, 397, 100);
       ls_registro_280 := translate(UPPER(ls_registro_280) ,'?', RPAD('#',1));
       ls_registro_280 := translate(UPPER(ls_registro_280) ,'Ñ', RPAD('#',1));

       ls_registro := ls_registro_116 || ls_registro_280 || ls_registro_100;
       IF Rtrim(ls_registro) IS NULL THEN  -- No considera registros sin informacion
          GOTO Lectura;
       END IF;

       IF n_reporte = 'RDD' THEN
          ls_tip_doc := '1';
          ls_tip_inf := '1';
          ln_num_sec := Test_Number(Lpad(Ltrim(Rtrim(Substr(ls_registro,1,8))), 8,'0'));
       ELSE
         ls_tip_doc :=  Substr(ls_registro,1,1) ;
         ls_tip_inf :=  Substr(ls_registro,2,1) ;
         IF n_reporte = 'RTC' THEN
            ln_num_sec :=  Test_Number(Lpad(Ltrim(Rtrim(Substr(ls_registro,3,6))), 6,'0'));
         ELSE
            ln_num_sec :=  Test_Number(Lpad(Ltrim(Rtrim(Substr(ls_registro,3,8))), 8,'0'));
         END IF;
       END IF;

       IF ls_tip_doc = chr(26) THEN  -- Controla EOF
          EXIT;
       END IF;

       IF ls_tip_doc = '2' AND ls_tip_inf = '1' THEN
          ls_registro := Substr(ls_registro,1,8);
       END IF;

       IF ls_tip_inf IN ('0','1','3','4') THEN
          IF n_reporte = 'RCO' AND ls_tip_inf = '3' THEN
             ln_can_reg_sal := ln_can_reg_sal + 1;
             ln_can_sec_cta := ln_can_sec_cta + 1;
          ELSE
             ln_can_reg_id := ln_can_reg_id  + 1;
             ln_can_sec_cta     := 0;
          END IF;
--        Datos del registro de Identificacion
          IF ls_tip_doc  = '1' THEN
             IF n_reporte = 'RDD' THEN
                ls_ape_pat              := Ltrim(Rtrim(Substr(ls_registro,9,120) ));
                ls_ape_mat              := Ltrim(Rtrim(Substr(ls_registro,129, 40) ));
                ls_ape_cas              := Ltrim(Rtrim(Substr(ls_registro,169, 40) ));
                ls_pri_nom              := Ltrim(Rtrim(Substr(ls_registro,209, 40) ));
                ls_seg_nom              := Ltrim(Rtrim(Substr(ls_registro,249, 40) ));
                ls_tip_doc_id           := Ltrim(Rtrim(Substr(ls_registro,289,  1) ));
                ls_cod_doc_id           := Ltrim(Rtrim(Substr(ls_registro,290, 12) ));
                ls_tip_clasif_deu       := Ltrim(Rtrim(Substr(ls_registro,302,  1) ));
                ls_sexo                 := Ltrim(Rtrim(Substr(ls_registro,303,  1) ));
                ls_est_civil            := Ltrim(Rtrim(Substr(ls_registro,304,  1) ));
                ls_fec_nac              := Ltrim(Rtrim(Substr(ls_registro,305, 8) ));
                ls_tip_doc_iden_com     := Ltrim(Rtrim(Substr(ls_registro,313, 2) ));
                ls_num_doc_iden_com     := Ltrim(Rtrim(Substr(ls_registro,315, 40) ));
                ls_cla_deu_sin_ali      := Ltrim(Rtrim(Substr(ls_registro,355, 1) ));
             ELSE
                 IF n_reporte = 'RTC' THEN
                    ln_cod_sbs := Test_Number(Substr(ls_registro, 9, 10) ) ;
                 ELSE
                    ln_cod_sbs := Test_Number(Substr(ls_registro, 11, 10) ) ;
                 END IF;

                 IF ln_cod_sbs IS NULL THEN
                    ln_cod_sbs := 0;
                 END IF;

                 IF ln_cod_sbs > 0 THEN
                    n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (ln_cod_sbs);
                    IF n_tip_condicion = 'RPZDO' THEN
                       n_cod_sbs_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (ln_cod_sbs);
                       IF n_cod_sbs_rplzte IS NOT NULL THEN
                          IF n_cod_sbs_rplzte > 0 THEN
                             ln_cod_sbs := n_cod_sbs_rplzte;
                          END IF;
                       END IF;
                    END IF;
                 END IF;

                 IF n_reporte = 'RTC' THEN
                    ls_cod_unico       := Ltrim(Rtrim(Substr(ls_registro, 19, 20) ));
                    ls_cod_ciiu3       := Ltrim(Rtrim(Substr(ls_registro, 39,  4) ));
                    ls_cod_sunarp      := Ltrim(Rtrim(Substr(ls_registro, 43, 15) ));
                    ls_tip_doc_trib    := Ltrim(Rtrim(Substr(ls_registro, 58,  1) ));
                    ls_cod_doc_trib    := Ltrim(Rtrim(Substr(ls_registro, 59, 11) ));
                    IF ls_tip_doc_trib = '2' AND LENGTH(ls_cod_doc_trib) = 11 THEN
                        IF Substr(ls_registro, 59, 3) = '000' THEN
                           ls_cod_doc_trib := Ltrim(Rtrim(Substr(ls_registro, 62, 8) ));
                        END IF;
                    END IF;
                    ls_tip_doc_id      := Ltrim(Rtrim(Substr(ls_registro, 70,  1) ));
                    ls_cod_doc_id      := Ltrim(Rtrim(Substr(ls_registro, 71, 12) ));
                    ls_tip_persona     := Ltrim(Rtrim(Substr(ls_registro, 83,  1) ));
                    ls_tip_residencia  := Ltrim(Rtrim(Substr(ls_registro, 84,  1) ));
                    ls_tip_clasif_deu  := Ltrim(Rtrim(Substr(ls_registro, 85,  1) ));
                    ls_tip_magnitud    := Ltrim(Rtrim(Substr(ls_registro, 86,  1) ));
                    ls_ind_accionista  := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                    ls_tip_rellab      := Ltrim(Rtrim(Substr(ls_registro, 88,  1) ));
                    ls_cod_pais        := Ltrim(Rtrim(Substr(ls_registro, 89,  4) ));
                    ls_sigla           := Ltrim(Rtrim(Substr(ls_registro,115, 20) ));
                    ls_dsdeu           := Upper(Ltrim(Rtrim(Substr(ls_registro,135,120) )));
                 ELSIF n_reporte = 'RCO' AND ls_tip_inf = '0' THEN
                    ls_tip_doc_trib    := Ltrim(Rtrim(Substr(ls_registro, 21,  1) ));
                    ls_cod_doc_trib    := Ltrim(Rtrim(Substr(ls_registro, 22, 11) ));
                    IF ls_tip_doc_trib = '2' AND LENGTH(ls_cod_doc_trib) = 11 THEN
                        IF Substr(ls_registro, 22, 3) = '000' THEN
                           ls_cod_doc_trib := Ltrim(Rtrim(Substr(ls_registro, 25, 8) ));
                        END IF;
                    END IF;
                    ls_tip_doc_id      := Ltrim(Rtrim(Substr(ls_registro, 33,  1) ));
                    ls_cod_doc_id      := Ltrim(Rtrim(Substr(ls_registro, 34, 12) ));
                    ls_tip_codeudor    := Ltrim(Rtrim(Substr(ls_registro, 46, 2) ));
                    ln_saldo           := Test_Number(Substr(ls_registro, 48, 18) ) / 100;
                 ELSE
                    ls_cod_unico       := Ltrim(Rtrim(Substr(ls_registro, 21, 20) ));
                    ls_cod_ciiu3       := Ltrim(Rtrim(Substr(ls_registro, 41,  4) ));
                    ls_cod_sunarp      := Ltrim(Rtrim(Substr(ls_registro, 45, 15) ));
                    ls_tip_doc_trib    := Ltrim(Rtrim(Substr(ls_registro, 60,  1) ));
                    ls_cod_doc_trib    := Ltrim(Rtrim(Substr(ls_registro, 61, 11) ));
                    IF ls_tip_doc_trib = '2' AND LENGTH(ls_cod_doc_trib) = 11 THEN
                        IF Substr(ls_registro, 61, 3) = '000' THEN
                           ls_cod_doc_trib := Ltrim(Rtrim(Substr(ls_registro, 64, 8) ));
                        END IF;
                    END IF;
                    ls_tip_doc_id           := Ltrim(Rtrim(Substr(ls_registro, 72,  1) ));
                    ls_cod_doc_id           := Ltrim(Rtrim(Substr(ls_registro, 73, 12) ));
                    ls_tip_persona          := Ltrim(Rtrim(Substr(ls_registro, 85,  1) ));
                    ls_tip_residencia       := Ltrim(Rtrim(Substr(ls_registro, 86,  1) ));

                    IF n_reporte = 'RCO' THEN -- AND ls_tip_inf = '3'
                       ls_tip_magnitud         := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                       ls_ind_accionista       := Ltrim(Rtrim(Substr(ls_registro, 88,  1) ));
                       ls_tip_rellab           := Ltrim(Rtrim(Substr(ls_registro, 89,  1) ));
                       ls_cod_pais             := Ltrim(Rtrim(Substr(ls_registro, 90,  4) ));
                       ls_sexo                 := Ltrim(Rtrim(Substr(ls_registro, 94,  1) ));
                       ls_est_civil            := Ltrim(Rtrim(Substr(ls_registro, 95,  1) ));
                       ls_ape_pat              := Ltrim(Rtrim(Substr(ls_registro, 96,120) ));
                       ls_ape_mat              := Ltrim(Rtrim(Substr(ls_registro,216, 40) ));
                       ls_ape_cas              := Ltrim(Rtrim(Substr(ls_registro,256, 40) ));
                       ls_pri_nom              := Ltrim(Rtrim(Substr(ls_registro,296, 40) ));
                       ls_seg_nom              := Ltrim(Rtrim(Substr(ls_registro,336, 40) ));
                       ls_fec_nac              := Ltrim(Rtrim(Substr(ls_registro,376,  8) ));
                       ln_porc_codeudor        := Test_Number(Substr(ls_registro,384,  5) ) / 100;
                       ln_saldo                := Test_Number(Substr(ls_registro,389, 18) ) / 100;
                       ls_dsdeu                := ls_ape_pat;
                    ELSE
                       ls_tip_clasif_deu       := Ltrim(Rtrim(Substr(ls_registro, 87,  1) ));
                       ls_tip_magnitud         := Ltrim(Rtrim(Substr(ls_registro, 88,  1) ));
                       ls_ind_accionista       := Ltrim(Rtrim(Substr(ls_registro, 89,  1) ));
                       ls_tip_rellab           := Ltrim(Rtrim(Substr(ls_registro, 90,  1) ));
                       ls_cod_pais             := Ltrim(Rtrim(Substr(ls_registro, 91,  4) ));
                       ls_sexo                 := Ltrim(Rtrim(Substr(ls_registro, 95,  1) ));
                       ls_est_civil            := Ltrim(Rtrim(Substr(ls_registro, 96,  1) ));
                       ls_sigla                := Ltrim(Rtrim(Substr(ls_registro, 97, 20) ));
                       ls_ape_pat              := Ltrim(Rtrim(Substr(ls_registro,117,120) ));
                       ls_ape_mat              := Ltrim(Rtrim(Substr(ls_registro,237, 40) ));
                       ls_ape_cas              := Ltrim(Rtrim(Substr(ls_registro,277, 40) ));
                       ls_pri_nom              := Ltrim(Rtrim(Substr(ls_registro,317, 40) ));
                       ls_seg_nom              := Ltrim(Rtrim(Substr(ls_registro,357, 40) ));
                       lv_ind_riesgo_camb_cred := Ltrim(Rtrim(Substr(ls_registro,397, 1) ));
                       lv_ind_atraso           := Ltrim(Rtrim(Substr(ls_registro,398, 1) ));
                       lv_clasif_interna_ent   := Ltrim(Rtrim(Substr(ls_registro,399, 5) ));
                       ls_dsdeu                := ls_ape_pat;
                       ls_cla_deu_sin_ali      := Ltrim(Rtrim(Substr(ls_registro,404, 1) ));
                       ls_cod_gru_eco          := Ltrim(Rtrim(Substr(ls_registro,405, 20) ));
                       ls_fec_nac              := Ltrim(Rtrim(Substr(ls_registro,425, 8) ));
                       ls_tip_doc_iden_com     := Ltrim(Rtrim(Substr(ls_registro,433, 2) ));
                       ls_num_doc_iden_com     := Ltrim(Rtrim(Substr(ls_registro,435, 40) ));
                       ls_ind_endeudamiento    := Ltrim(Rtrim(Substr(ls_registro,475, 1) ));
                    END IF;
                 END IF;
              END IF;
          ELSE  -- ls_tip_doc <> '1' (es decir, es 2 => saldos)
             ln_cod_sbs         := NULL;
             ls_cod_unico       := NULL;
             ls_cod_ciiu3       := NULL;
             ls_cod_sunarp      := NULL;
             ls_tip_doc_trib    := NULL;
             ls_cod_doc_trib    := NULL;
             ls_tip_doc_id      := NULL;
             ls_cod_doc_id      := NULL;
             ls_tip_persona     := NULL;
             ls_tip_residencia  := NULL;
             ls_tip_clasif_deu  := NULL;
             ls_tip_magnitud    := NULL;
             ls_ind_accionista  := NULL;
             ls_tip_rellab      := NULL;
             ls_cod_pais        := NULL;
             ls_sigla           := NULL;
             ls_dsdeu           := NULL;
          END IF;

          IF n_reporte = 'RTC' THEN
             ls_fec_nac    := Ltrim(Rtrim(Substr(ls_registro, 93,  8) ));
             ls_sexo       := Ltrim(Rtrim(Substr(ls_registro,101,  1) ));
             ls_est_civil  := Ltrim(Rtrim(Substr(ls_registro,102,  1) ));
             ls_direccion  := Ltrim(Rtrim(Substr(ls_registro,255, 80) ));
             ls_dir_ubigeo := Ltrim(Rtrim(Substr(ls_registro,335,  6) ));

             IF ls_fec_nac > '00000000' THEN
                ld_fec_nac := SF_VALIDA_FECHA (ls_fec_nac);
                IF ld_fec_nac IS NULL THEN
                   n_fecha_invalida := 1;
                END IF;
             END IF;
          END IF;

          IF ls_cod_ciiu3 = '0000' OR ls_cod_ciiu3 = '0' THEN
             ls_cod_ciiu3 := NULL;
          END IF;

          IF ls_cod_pais IN ('0', '0000') THEN
             ls_cod_pais := NULL;
          END IF;

          IF Substr(ls_cod_sunarp,1,4) = '0000' THEN
             ls_cod_sunarp := NULL;
          END IF;

          IF  ls_cod_doc_trib IN ('0', '00000000000') AND ls_tip_doc_trib = '0' THEN
              ls_cod_doc_trib := NULL;
              ls_tip_doc_trib := NULL;
          END IF;

          IF  ln_cod_doc_trib = 0 AND ls_tip_doc_trib = '0' THEN
              ls_cod_doc_trib := NULL;
              ls_tip_doc_trib := NULL;
          END IF;

          IF  ls_tip_doc_trib = '0' AND ls_cod_doc_trib IS NULL THEN
              ls_tip_doc_trib := NULL;
          END IF;

          IF  ls_tip_doc_id = '0' AND ls_cod_doc_id IS NULL THEN
              ls_tip_doc_id := NULL;
          END IF;

          IF ls_ind_accionista IS NULL THEN
             ls_ind_accionista := '0';
          END IF;

          IF ls_tip_rellab IS NULL THEN
             ls_tip_rellab := '0';
          END IF;

          IF ls_tip_magnitud IS NULL OR ls_tip_magnitud = ' ' THEN
             IF ls_tip_persona = '2' THEN
                ls_tip_magnitud := '3';
             ELSE
                ls_tip_magnitud := '0';
             END IF;
          END IF;

          IF ls_tip_residencia = ' ' THEN
             ls_tip_residencia := '1';
          END IF;

-- Inserta registro de Identificacion
          IF n_reporte = 'RCD' THEN
             BEGIN
               INSERT INTO CRA_VALID_IDENTIF_RCD ( ano_refer, mes_refer, cod_empresa, num_sec_reg, tip_formulario,
                      tip_informacion, num_sec, cod_sbs, cod_unico_clie, cod_ciiu3,
                      cod_sunarp, tip_doc_trib, num_doc_trib, tip_doc_iden, num_doc_iden,
                      tip_persona, tip_residencia, tip_clasif_clie, tip_magnitud, ind_accionista,
                      tip_rellab, cod_pais, nom_sigla, nom_cliente,
                      ape_materno, ape_casada, primer_nombre, segundo_nombre, genero, estado_civil,
                      ind_riesgo_camb_cred, ind_atraso, clasif_interna_ent,
                      /* JCFS 05/05/2010: Se insertan los nuevos campos incluidos en la Res. 11356 */
                      cla_deu_sin_ali, cod_gru_eco, fec_nac, tip_doc_iden_com, num_doc_iden_com,
                      -- JAGJ 31/07/2013: Variables para almacenar las columnas incorporadas con la Res. 8548
                      Ind_Sobreendeudamiento )
               VALUES
                    ( ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ls_tip_doc,
                      ls_tip_doc, ln_num_sec, ln_cod_sbs, ls_cod_unico, ls_cod_ciiu3,
                      ls_cod_sunarp, ls_tip_doc_trib, ls_cod_doc_trib, ls_tip_doc_id, ls_cod_doc_id,
                      ls_tip_persona, ls_tip_residencia, ls_tip_clasif_deu, ls_tip_magnitud, ls_ind_accionista,
                      ls_tip_rellab, ls_cod_pais, ls_sigla, ls_dsdeu,
                      ls_ape_mat, ls_ape_cas, ls_pri_nom, ls_seg_nom, ls_sexo, ls_est_civil,
                      lv_ind_riesgo_camb_cred, lv_ind_atraso, lv_clasif_interna_ent,
                      /* JCFS 05/05/2010: Se insertan los nuevos campos incluidos en la Res. 11356 */
                      ls_cla_deu_sin_ali, ls_cod_gru_eco, ls_fec_nac, ls_tip_doc_iden_com, ls_num_doc_iden_com,
                      -- JAGJ 31/07/2013: Variables para almacenar las columnas incorporadas con la Res. 8548
                      ls_ind_endeudamiento );

               ln_can_ins_id   := ln_can_ins_id   + 1;
               ln_can_inserted := ln_can_inserted + 1;
               IF ln_can_inserted > 50000 THEN
                  ln_can_inserted := 0;
                  COMMIT;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                    ln_can_bad_id := ln_can_bad_id + 1;
                    IF ln_can_bad_id = 1 THEN
                       ls_error := SQLERRM;
                       n_observaciones := substr(ls_error,1,255);
                       UTL_FILE.FCLOSE(file_id);
                       SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                     ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                     ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
--                     Actualiza CRA_PAR_PROCESOS
                       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
--                     Actualiza CRA_PAR_CONTROL_PROCESOS
                       SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
--                     Actualiza CRA_PERIODO_INF_EMP_ETAPA
                       SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                       es_errado := 1;
                       EXIT;
                    END IF;
             END;
          END IF;
--
          IF n_reporte = 'RDD' THEN
             BEGIN
               IF ln_can_reg_id = 73451 THEN
                  ln_can_inserted := ln_can_inserted + 1;
               END IF;
               INSERT INTO CRA_VALID_IDENTIF_REP_ADIC ( cod_reporte, ano_refer, mes_refer, cod_empresa, num_sec_reg, tip_formulario, tip_informacion,
                    num_sec, cod_unico, nom_cliente, ape_materno, ape_casada, primer_nombre, segundo_nombre,
                    tip_doc_iden, num_doc_iden, tip_doc_trib, num_doc_trib, cod_sunarp, tip_persona,
                    tip_clasif_deu, tip_rellab, genero, estado_civil, fec_nac_text, fec_nac_date,
                    tip_doc_iden_com, num_doc_iden_com, situac_deu )
               VALUES
                  ( n_reporte, ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ls_tip_doc,
                    ls_tip_doc, ln_num_sec, ls_cod_unico, ls_ape_pat, ls_ape_mat, ls_ape_cas, ls_pri_nom, ls_seg_nom,
                    ls_tip_doc_id, ls_cod_doc_id, ls_tip_doc_trib, ls_cod_doc_trib, ls_cod_sunarp, ls_tip_persona,
                    ls_tip_clasif_deu, ls_tip_rellab, ls_sexo, ls_est_civil, ls_fec_nac, null,
                    ls_tip_doc_iden_com, ls_num_doc_iden_com, ls_cla_deu_sin_ali );

               ln_can_ins_id   := ln_can_ins_id   + 1;
               ln_can_inserted := ln_can_inserted + 1;
               IF ln_can_inserted > 50000 THEN
                  ln_can_inserted := 0;
                  COMMIT;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                    ln_can_bad_id := ln_can_bad_id + 1;
                    IF ln_can_bad_id = 1 THEN
                       ls_error := SQLERRM;
                       n_observaciones := substr(ls_error,1,255);
                       UTL_FILE.FCLOSE(file_id);
                       SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                     ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                     ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
                       SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                       SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                       SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                       es_errado := 1;
                       EXIT;
                    END IF;
             END;

             ln_can_sec_cta      := ln_can_sec_cta  + 1;
    --       Datos del registro de Saldos
             ls_cod_moneda     := Ltrim(Rtrim(Substr(ls_registro,356, 1)));
             ls_tip_credito   := Ltrim(Rtrim(Substr(ls_registro,357,2)));
             ls_cod_cuenta    := Rpad(Ltrim(Rtrim(Substr(ls_registro,359,14))),14,'0');
             ln_saldo         := Test_Number(Substr(ls_registro,373,18) ) / 100;
             ln_interes       := Test_Number(Substr(ls_registro,391,18) ) / 100;
             ln_otros_saldos  := Test_Number(Substr(ls_registro,409,18) ) / 100;
             ln_cond_dias     := Test_Number(Substr(ls_registro,427,4) ) ;
             ln_garantia      := Test_Number(Substr(ls_registro,431,18) ) / 100;

             BEGIN
                INSERT INTO CRA_VALID_SALDOS_REP_ADIC ( cod_reporte, ano_refer, mes_refer, cod_empresa, num_sec_reg, num_sec_cta, tip_formulario,
                      tip_informacion, tip_moneda, cod_tipo_cre, cod_cuenta, val_saldo_capital, val_intereses,
                      val_saldo_otros, val_garantias, can_dias )
                VALUES
                    ( n_reporte, ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ln_can_sec_cta, ls_tip_doc,
                      ls_tip_doc, ls_cod_moneda, ls_tip_credito, ls_cod_cuenta, ln_saldo, ln_interes,
                      ln_otros_saldos, ln_garantia, ln_cond_dias  ) ;

               ln_can_ins_sal  := ln_can_ins_sal  + 1;
               ln_can_inserted_sal := ln_can_inserted_sal + 1;
               IF ln_can_inserted_sal > 50000 THEN
                  ln_can_inserted_sal := 0;
                  COMMIT;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                  ln_can_bad_sal := ln_can_bad_sal + 1;
                  ls_error := SQLERRM;
                  n_observaciones := substr(ls_error,1,255);
                  UTL_FILE.FCLOSE(file_id);
                  SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);

                  SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                  SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                  SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                  es_errado := 1;
                  EXIT;
             END;
          END IF;

          IF n_reporte = 'RTC' THEN
             BEGIN
               INSERT INTO CRA_VALID_IDENTIF_RTC ( ano_refer, mes_refer, cod_empresa, num_sec_reg, tip_formulario, tip_informacion,
                      num_sec, cod_sbs, cod_unico_clie, cod_ciiu3, cod_sunarp, tip_doc_trib,
                      num_doc_trib, tip_doc_iden, num_doc_iden, tip_persona, tip_residencia,
                      tip_clasif_clie, tip_magnitud, ind_accionista, tip_rellab, cod_pais,
                      nom_sigla, nom_cliente, sexo, est_civil, fec_nac, direccion, cod_dir_ubigeo )
               VALUES
                    ( ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ls_tip_doc,
                      ls_tip_doc, ln_num_sec, ln_cod_sbs, ls_cod_unico, ls_cod_ciiu3, ls_cod_sunarp,
                      ls_tip_doc_trib, ls_cod_doc_trib, ls_tip_doc_id, ls_cod_doc_id,
                      ls_tip_persona, ls_tip_residencia, ls_tip_clasif_deu, ls_tip_magnitud,
                      ls_ind_accionista, ls_tip_rellab, ls_cod_pais, ls_sigla, ls_dsdeu, ls_sexo,
                      ls_est_civil, ld_fec_nac, ls_direccion, ls_dir_ubigeo ) ;
               ln_can_ins_id   := ln_can_ins_id   + 1;
               ln_can_inserted := ln_can_inserted + 1;
               IF ln_can_inserted > 50000 THEN
                  ln_can_inserted := 0;
                  COMMIT;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                  ln_can_bad_id := ln_can_bad_id + 1;
                  ls_error := SQLERRM;
                  n_observaciones := substr(ls_error,1,255);
                  UTL_FILE.FCLOSE(file_id);
                  SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);
                  SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
                  SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
                  SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E');
                  es_errado := 1;
                  EXIT;
             END;
          END IF;

          IF n_reporte IN ('RCA', 'RCM', 'RCT', 'RCO') THEN
             IF n_reporte = 'RCO' AND ls_tip_inf = '0' THEN
                BEGIN
                   ln_can_ins_id   := ln_can_ins_id   + 1;
                   INSERT INTO CRA_VALID_CODEUDOR ( cod_reporte, ano_refer, mes_refer, dia_refer, cod_sec_envio, cod_empresa, num_sec_reg, tip_formulario,
                          tip_informacion, num_sec_rcd, cod_sbs, tip_doc_trib, num_doc_trib, tip_doc_iden, num_doc_iden, tip_codeudor, val_saldo )
                   VALUES
                        ( n_reporte, ls_ano_refer, ls_mes_refer, i_dia_refer, i_cod_sec_envio, ls_cod_ent_vig, ln_can_ins_id, ls_tip_doc,
                          ls_tip_inf, ln_num_sec, ln_cod_sbs, ls_tip_doc_trib, ls_cod_doc_trib, ls_tip_doc_id, ls_cod_doc_id, ls_tip_codeudor, ln_saldo
                        );
                   ln_can_inserted := ln_can_inserted + 1;
                   IF ln_can_inserted > 50000 THEN
                      ln_can_inserted := 0;
                      COMMIT;
                   END IF;
                EXCEPTION
                   WHEN OTHERS THEN
                      ln_can_bad_id := ln_can_bad_id + 1;
                      IF ln_can_bad_id = 1 THEN
                         ls_error := SQLERRM;
                         n_observaciones := substr(ls_error,1,255);
                         UTL_FILE.FCLOSE(file_id);
                         SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                       ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                       ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
                         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                         SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                         es_errado := 1;
                         EXIT;
                      END IF;
                 END;

             ELSE
                BEGIN
                   IF n_reporte = 'RCO' THEN -- AND ls_tip_inf = '3'
                      ln_can_reg_id := ln_can_reg_sal;
                   END IF;

                   INSERT INTO CRA_VALID_IDENTIF ( cod_reporte, ano_refer, mes_refer, cod_empresa, num_sec_reg, tip_formulario,
                          tip_informacion, num_sec, cod_sbs, cod_unico_clie, cod_ciiu3, cod_sunarp,
                          tip_doc_trib, num_doc_trib, tip_doc_iden, num_doc_iden, tip_persona, tip_residencia,
                          tip_clasif_clie, tip_magnitud, ind_accionista, tip_rellab, cod_pais, nom_sigla,
                          nom_cliente, ape_materno, ape_casada, primer_nombre, segundo_nombre, genero,
                          estado_civil, fec_nac, dia_refer, cod_sec_envio, val_porc_conf, val_saldo_conf )
                   VALUES
                        ( n_reporte, ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ls_tip_doc,
                          ls_tip_inf, ln_num_sec, ln_cod_sbs, ls_cod_unico, ls_cod_ciiu3, ls_cod_sunarp,
                          ls_tip_doc_trib, ls_cod_doc_trib, ls_tip_doc_id, ls_cod_doc_id, ls_tip_persona, ls_tip_residencia,
                          ls_tip_clasif_deu, ls_tip_magnitud, ls_ind_accionista, ls_tip_rellab, ls_cod_pais, ls_sigla,
                          ls_dsdeu, ls_ape_mat, ls_ape_cas, ls_pri_nom, ls_seg_nom, ls_sexo,
                          ls_est_civil, ls_fec_nac, i_dia_refer, i_cod_sec_envio, ln_porc_codeudor, ln_saldo
                        );
                   IF n_reporte = 'RCO' THEN -- AND ls_tip_inf = '3'
                      ln_can_ins_sal := ln_can_ins_sal + 1;
                   ELSE
                      ln_can_ins_id := ln_can_ins_id + 1;
                   END IF;
                   ln_can_inserted := ln_can_inserted + 1;
                   IF ln_can_inserted > 50000 THEN
                      ln_can_inserted := 0;
                      COMMIT;
                   END IF;
                EXCEPTION
                   WHEN OTHERS THEN
                      IF n_reporte = 'RCO' THEN -- AND ls_tip_inf = '3'
                         ln_can_bad_sal := ln_can_bad_sal + 1;
                         ls_error := SQLERRM;
                         n_observaciones := substr(ls_error,1,255);
                         UTL_FILE.FCLOSE(file_id);
                         SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                       ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                       ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
                         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                         SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                         es_errado := 1;
                         EXIT;
                      ELSE
                         ln_can_bad_id := ln_can_bad_id + 1;
                         IF ln_can_bad_id = 1 THEN
                            ls_error := SQLERRM;
                            n_observaciones := substr(ls_error,1,255);
                            UTL_FILE.FCLOSE(file_id);
                            SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                          ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                          ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
                            SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                            SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                            SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                            es_errado := 1;
                            EXIT;
                         END IF;
                      END IF;
                 END;
             END IF;
          END IF;
       END IF;

    IF ls_tip_inf = '2' or ls_tip_inf = '5' THEN
       IF ls_tip_inf = '2' AND n_reporte IN ('RCD','RTC') THEN
          ln_can_reg_sal      := ln_can_reg_sal  + 1;
          ln_can_sec_cta      := ln_can_sec_cta  + 1;
--        Datos del registro de Saldos
          IF n_reporte = 'RCD' THEN
             ls_cod_ofi       := Lpad(Ltrim(Rtrim(Substr(ls_registro,11, 4))), 4,'0');
             ls_ofi_ubigeo    := Lpad(Ltrim(Rtrim(Substr(ls_registro,15, 6))), 6,'0');
             ls_cod_cuenta    := Rpad(Ltrim(Rtrim(Substr(ls_registro,21,14))),14,'0');
             ls_tip_credito   := Ltrim(Rtrim(Substr(ls_registro,35,2)));        -- JCFS 05/05/2010: Se aumenta el tamaño de 1 a 2
             ln_saldo         := Test_Number(Substr(ls_registro,37,18) ) / 100; -- JCFS 05/05/2010: Se modifica la posición inicial de 36 a 37 y se aumenta el tamaño de 15 a 18
             n_long_saldo     := LENGTH(ls_registro);
             ln_cond_dias     := Test_Number(Substr(ls_registro,55, 4) );       -- JCFS 05/05/2010: Se modifica la posición inicial de 51 a 55
             IF ln_cond_dias IS NULL THEN
                ln_cond_dias := 0;
             END IF;
             ls_cond_esp      := Lpad(Ltrim(Rtrim(Substr(ls_registro,59, 2))), 2, '0');  -- JCFS 05/05/2010: Se modifica la posición inicial de 55 a 59
             ls_cond_disp     := Lpad(Ltrim(Rtrim(Substr(ls_registro,61, 2))), 2, '0');  -- JCFS 05/05/2010: Se modifica la posición inicial de 57 a 61
             -- JCFS 05/05/2010: Se agrega Nueva Columna de Factor de Conversión Crediticio
             ls_fac_conv_cred := Lpad(Ltrim(Rtrim(Substr(ls_registro,63, 2))), 2, '0');
          END IF;

          IF n_reporte = 'RTC' THEN
             n_fecha_invalida := 0;
             ls_cod_ofi         := Lpad(Ltrim(Rtrim(Substr(ls_registro, 9, 4))), 4,'0');
             ls_ofi_ubigeo      := Lpad(Ltrim(Rtrim(Substr(ls_registro,13, 6))), 6,'0');
             ls_tip_reporte     := Ltrim(Rtrim(Substr(ls_registro,19, 2)));
             ls_tip_ctacte      := Ltrim(Rtrim(Substr(ls_registro,21, 1)));
             ls_num_ctacte      := Ltrim(Rtrim(Substr(ls_registro,22,30)));
             ls_tip_tarj_cre    := Ltrim(Rtrim(Substr(ls_registro,52, 1)));
             ls_num_tarj_cre    := Ltrim(Rtrim(Substr(ls_registro,53,30)));
             ls_tip_mda         := Ltrim(Rtrim(Substr(ls_registro,83, 1)));
             ls_fec_apertura    := Ltrim(Rtrim(Substr(ls_registro, 84, 8)));
             ls_tip_motivo_anul := Ltrim(Rtrim(Substr(ls_registro,92, 1)));
             ls_fec_anul_cierre := Ltrim(Rtrim(Substr(ls_registro, 93, 8)));
             ls_fec_public_peru := Ltrim(Rtrim(Substr(ls_registro,101, 8)));
             ln_num_rel_public  := Test_Number(Substr(ls_registro,109, 4) ) ;
             ls_fec_rec_rectif  := Ltrim(Rtrim(Substr(ls_registro,113, 8)));
             ls_fec_fin_rectif  := Ltrim(Rtrim(Substr(ls_registro,121, 8)));

             IF ls_fec_apertura > '00000000' THEN
                ld_fec_apertura := SF_VALIDA_FECHA (ls_fec_apertura);
                IF ld_fec_apertura IS NULL THEN
                   n_fecha_invalida := 1;
                END IF;
             ELSE
                ld_fec_apertura := NULL;
             END IF;

             IF ls_fec_anul_cierre > '00000000' THEN
                ld_fec_anul_cierre := SF_VALIDA_FECHA (ls_fec_anul_cierre);
                IF ld_fec_anul_cierre IS NULL THEN
                   n_fecha_invalida := 1;
                END IF;
             ELSE
                ld_fec_anul_cierre := NULL;
             END IF;

             IF ls_fec_public_peru > '00000000' THEN
                ld_fec_public_peru := SF_VALIDA_FECHA (ls_fec_public_peru);
                IF ld_fec_public_peru IS NULL THEN
                   n_fecha_invalida := 1;
                END IF;
             ELSE
                ld_fec_public_peru := NULL;
             END IF;

             IF ln_num_rel_public = 0 THEN
                ln_num_rel_public := NULL;
             END IF;

             IF ls_fec_rec_rectif > '00000000' THEN
                ld_fec_rec_rectif := SF_VALIDA_FECHA (ls_fec_rec_rectif);
                IF ld_fec_rec_rectif IS NULL THEN
                   n_fecha_invalida := 1;
                END IF;
             ELSE
                ld_fec_rec_rectif := NULL;
             END IF;

             IF ls_fec_fin_rectif > '00000000' THEN
                ld_fec_fin_rectif := SF_VALIDA_FECHA (ls_fec_fin_rectif);
                IF ld_fec_fin_rectif IS NULL THEN
                   n_fecha_invalida := 1;
                END IF;
             ELSE
                ld_fec_fin_rectif := NULL;
             END IF;

             IF ls_tip_reporte IN ('CC', 'RC') THEN
                ls_tip_tarj_cre := NULL;
                ls_num_tarj_cre := NULL;
             END IF;

             IF ls_tip_reporte IN ('TC', 'RT') THEN
                ls_tip_ctacte := NULL;
                ls_num_ctacte := NULL;
             END IF;
          END IF;

-- Inserta registro de Saldos
          IF n_reporte = 'RCD' THEN
             BEGIN
               -- JCFS 05/05/2010: Se agrega Nueva Columna de Factor de Conversión Crediticio
               INSERT INTO CRA_VALID_SALDOS_RCD ( ano_refer, mes_refer, cod_empresa, num_sec_reg, num_sec_cta, tip_formulario,
                      tip_informacion, num_sec, cod_oficina, cod_ubigeo_ofic, cod_cuenta, cod_tipo_cre,
                      val_saldo, can_dias, cond_esp_cta, cond_disponibilidad, fac_conv_cred )
               VALUES
                    ( ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ln_can_sec_cta, ls_tip_doc,
                      ls_tip_doc, ln_num_sec, ls_cod_ofi, ls_ofi_ubigeo, ls_cod_cuenta, ls_tip_credito,
                      ln_saldo, ln_cond_dias, ls_cond_esp, ls_cond_disp, ls_fac_conv_cred ) ;
               ln_can_ins_sal  := ln_can_ins_sal  + 1;
               ln_can_inserted := ln_can_inserted + 1;
               IF ln_can_inserted > 50000 THEN
                  ln_can_inserted := 0;
                  COMMIT;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                  ln_can_bad_sal := ln_can_bad_sal + 1;
                  ls_error := SQLERRM;
                  n_observaciones := substr(ls_error,1,255);
                  UTL_FILE.FCLOSE(file_id);
                  SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
                  SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                  SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                  SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                  es_errado := 1;
                  EXIT;
             END;
          END IF;

          IF n_reporte = 'RTC' THEN
             IF n_fecha_invalida = 0 THEN
                BEGIN
                  INSERT INTO CRA_VALID_DETALLE_RTC ( ano_refer, mes_refer, cod_empresa, num_sec_reg, num_sec_cta, tip_formulario, tip_informacion,
                         num_sec, cod_oficina, cod_ubigeo_ofic, tip_reporte, tip_ctacte, num_ctacte, tip_tarj_cre,
                         num_tarj_cre,  tip_mda, fec_apertura, tip_motivo_anul, fec_anul_cierre, fec_public_peru,
                         num_rel_public, fec_rec_rectif, fec_fin_rectif )
                  VALUES
                       ( ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ln_can_sec_cta,
                         ls_tip_doc, ls_tip_doc, ln_num_sec, ls_cod_ofi, ls_ofi_ubigeo, ls_tip_reporte,
                         ls_tip_ctacte, ls_num_ctacte, ls_tip_tarj_cre, ls_num_tarj_cre, ls_tip_mda,
                         ld_fec_apertura, ls_tip_motivo_anul, ld_fec_anul_cierre, ld_fec_public_peru,
                         ln_num_rel_public, ld_fec_rec_rectif, ld_fec_fin_rectif );
                  ln_can_ins_sal  := ln_can_ins_sal  + 1;
                  ln_can_inserted := ln_can_inserted + 1;
                  IF ln_can_inserted > 50000 THEN
                     ln_can_inserted := 0;
                     COMMIT;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                     ln_can_bad_sal := ln_can_bad_sal + 1;
                     ls_error := SQLERRM;
                     n_observaciones := substr(ls_error,1,255);
                     UTL_FILE.FCLOSE(file_id);
                     SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                   ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                   ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
                     SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                     SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                     SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                     es_errado := 1;
                     EXIT;
                END;
             ELSE
                ln_can_bad_sal := ln_can_bad_sal + 1;
             END IF;
          END IF;
     ELSE
          IF (ls_tip_inf = '5' and n_reporte = 'RCA') OR (ls_tip_inf = '2' and n_reporte = 'RCT')  THEN
--          IF n_reporte = 'RCA' OR n_reporte = 'RCT'  THEN
             ln_can_reg_sal      := ln_can_reg_sal  + 1;
             ln_can_sec_cta      := ln_can_sec_cta  + 1;

             ls_cod_ofi       := Lpad(Ltrim(Rtrim(Substr(ls_registro,11, 4))), 4,'0');
             ls_ofi_ubigeo    := Lpad(Ltrim(Rtrim(Substr(ls_registro,15, 6))), 6,'0');
             ls_cod_cuenta    := Rpad(Ltrim(Rtrim(Substr(ls_registro,21,14))),14,'0');
             ls_tip_credito   := Ltrim(Rtrim(Substr(ls_registro,35, 2)));        -- JCFS 05/05/2010: Se aumenta el tamaño de 1 a 2
             ln_saldo         := Test_Number(Substr(ls_registro,37,18) ) / 100;  -- JCFS 05/05/2010: Se modifica la posición inicial de 36 a 37 y se aumenta el tamaño de 15 a 18
             n_long_saldo     := LENGTH(ls_registro);
             ln_cond_dias     := Test_Number(Substr(ls_registro,55, 4) );        -- JCFS 05/05/2010: Se modifica la posición inicial de 51 a 55
             IF ln_cond_dias IS NULL THEN
                ln_cond_dias := 0;
             END IF;
             ------------------
             BEGIN
               INSERT INTO CRA_VALID_SALDOS ( cod_reporte, ano_refer, mes_refer, cod_empresa, num_sec_reg, num_sec_cta, tip_formulario, tip_informacion,
                      num_sec, cod_oficina, cod_ubigeo_ofic, cod_cuenta, cod_tipo_cre, val_saldo, can_dias, dia_refer, cod_sec_envio )
               VALUES ( n_reporte, ls_ano_refer, ls_mes_refer, ls_cod_ent_vig, ln_can_reg_id, ln_can_sec_cta, ls_tip_doc, ls_tip_doc,
                        ln_num_sec, ls_cod_ofi, ls_ofi_ubigeo, ls_cod_cuenta, ls_tip_credito, ln_saldo, ln_cond_dias, i_dia_refer, i_cod_sec_envio ) ;
               ln_can_ins_sal  := ln_can_ins_sal  + 1;
               ln_can_inserted := ln_can_inserted + 1;
               IF ln_can_inserted > 50000 THEN
                  ln_can_inserted := 0;
                  COMMIT;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                  ln_can_bad_sal := ln_can_bad_sal + 1;
                  ls_error := SQLERRM;
                  n_observaciones := substr(ls_error,1,255);
                  UTL_FILE.FCLOSE(file_id);
                  SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                                ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                                ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
                  SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
                  SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
                  SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);
                  es_errado := 1;
                  EXIT;
             END;
          END IF;
------------------------
       END IF;
     END IF;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN EXIT;
     END;
   END LOOP;

   IF es_errado = 0 THEN
--    Cierra el archivo
      UTL_FILE.FCLOSE(file_id);
      lb_is_open  := UTL_FILE.IS_OPEN(file_id);
      IF lb_is_open THEN
         DBMS_OUTPUT.PUT_LINE ('Archivo no se pudo cerrar');
      END IF;
      COMMIT;

      IF ln_can_bad_cab = 0 AND ln_can_bad_id = 0 AND ln_can_bad_sal = 0 THEN
          n_hay_error := 0;
          n_observaciones := 'MSJ: Carga a base de Datos OK';
      ELSE
          n_observaciones := 'OBS: Carga a base de Datos con Observaciones';
          n_hay_error := 1;
      END IF;

      IF n_hay_error = 1 THEN
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'OBS: Carga a base de Datos con Observaciones', i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F', i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'OBS: Carga a base de Datos con Observaciones', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
      ELSE
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', 'MSJ: Carga a base de Datos OK', i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'T', i_dia_refer, i_cod_sec_envio);
         SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'MSJ: Carga a base de Datos OK', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
      END IF;

      COMMIT;

      -- JCFS 17/10/2011: Se actualiza la etapa del RCD en las tablas de SUCAVE
      IF n_reporte = 'RCD' THEN
         SELECT tip_entidad, to_char(last_day(to_date(i_anopro||i_mespro||'01', 'yyyymmdd')), 'dd')
           INTO ls_tipentidad, ls_dia_refer
           FROM ays_ent_vigilada
          WHERE cod_ent_vig = i_codemp;

         ln_resultado := PK_SUCAVI.SF_GET_ESTADO_Y_NUM_PROC ( '0106', '01', i_anopro, i_mespro, ls_dia_refer, i_codemp,
                                                              ls_tipentidad, ls_est_proc, ln_num_proc, ls_ingreso_ext );
         IF ln_resultado = 1 THEN
            ln_resultado := PK_SUCAVI.SF_SET_ESTADO_PROC ( '0106', '01', i_anopro, i_mespro, ls_dia_refer,
                                                            i_codemp, ls_tipentidad, 'EP', ln_num_proc );

         END IF;
      END IF;

      -- JCFS 2018-02: Fin de "exoneración" del registro de auditoría
      PKG_APPLICATION_INFO.Fin;

      ln_can_reg_id := ln_can_reg_id - 1;  -- No se considera el identificador de Totales
      SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                    ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                    ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);

      IF es_errado = 0 THEN
         IF n_hay_error = 0 THEN
            IF n_reporte = 'RCD' THEN
               SP_GENERA_ESTADISTICA_CLASIF(i_anopro, i_mespro, i_codemp);
               IF SF_OBT_ESTADO_ENTIDAD (i_codemp) = 'OP' THEN
                  PK_RCD_BALCOM.SP_ACT_SAL_BALCOM_RCD (i_anopro, i_mespro, i_codemp);
               ELSE
                  SP_VAL_VALIDACION_RCD (i_anopro, i_mespro, i_codemp);
               END IF;
            ELSE
               IF n_reporte = 'RTC' THEN
                  SP_VAL_VALIDACION_RTC (i_anopro, i_mespro, i_codemp);
               ELSE
                  IF n_reporte IN ('RCA','RCM','RCT','RCO') THEN
                     SP_VAL_VALIDACION_RCA ( n_reporte, i_anopro, i_mespro, i_codemp, i_dia_refer, i_cod_sec_envio );
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;
   RETURN;

EXCEPTION
-- Finaliza con error
   WHEN NO_DATA_FOUND THEN
        n_observaciones := 'ERROR: UTL_FILE: No encontro datos'||'  '||substr(ls_error,1,220);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'Fin de registro', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'Fin de registro', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN UTL_FILE.INVALID_PATH THEN
        n_observaciones := 'ERROR: UTL_FILE: Ruta no valida'||'  '||substr(ls_error,1,220);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'ERROR: UTL_FILE: Ruta no valida', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'ERROR: UTL_FILE: Ruta no valida', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN UTL_FILE.READ_ERROR THEN
        n_observaciones := 'ERROR: UTL_FILE: Error en lectura'||'  '||substr(ls_error,1,220);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'ERROR: UTL_FILE: Error en lectura', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'ERROR: UTL_FILE: Error en lectura', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN UTL_FILE.WRITE_ERROR THEN
        n_observaciones := 'ERROR: UTL_FILE: Error en escritura'||'  '||substr(ls_error,1,220);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'ERROR: UTL_FILE: Error en escritura', i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'ERROR: UTL_FILE: Error en escritura', 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

   WHEN OTHERS THEN
        ls_error := SQLERRM;
        n_observaciones := 'ERROR: Error en registro: Identif: '|| ln_can_reg_id||'  Cta.: '|| ln_can_sec_cta||'  '||substr(ls_error,1,172);
        UTL_FILE.FCLOSE(file_id);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL, i_dia_refer, i_cod_sec_envio);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E', i_dia_refer, i_cod_sec_envio);

END;

----------------------------------------------------------------------

PROCEDURE SP_ACT_VAL_RESULT_VALIDACION
        ( i_anopro      IN VARCHAR2,
          i_mespro      IN VARCHAR2,
          i_reporte     IN VARCHAR2,
          i_codemp      IN VARCHAR2,
          i_etapa       IN VARCHAR2,
          i_can_reg_cab IN NUMBER,
          i_can_bad_cab IN NUMBER,
          i_can_reg_id  IN NUMBER,
          i_can_bad_id  IN NUMBER,
          i_can_reg_sal IN NUMBER,
          i_can_bad_sal IN NUMBER,
          i_fecini      IN DATE,
          i_fecfin      IN DATE,
          i_observac    IN VARCHAR2,
          i_dia_refer     IN VARCHAR2 default '01',
          i_cod_sec_envio IN VARCHAR2 default '01' )
-- ------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Agosto 2002
-- Objetivo: Actualiza tabla CRA_VAL_RESULT_VALIDACION.
-- ------------------------------------------------------------------------------
IS
BEGIN
     UPDATE CRA_VAL_RESULT_VALIDACION
        SET num_reg_cab_lei   = i_can_reg_cab,
            num_reg_cab_rec   = i_can_bad_cab,
            num_reg_ide_lei   = i_can_reg_id,
            num_reg_ide_rec   = i_can_bad_id,
            num_reg_mov_lei   = i_can_reg_sal,
            num_reg_mov_rec   = i_can_bad_sal,
            fec_ini_pro       = i_fecini,
            fec_fin_pro       = SYSDATE,
            des_observaciones = i_observac
      WHERE ano_refer     = i_anopro
        AND mes_refer     = i_mespro
        AND cod_reporte   = i_reporte
        AND cod_empresa   = i_codemp
        AND cod_etapa_val = i_etapa;

      IF SQL%Rowcount = 0 THEN
         -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
         INSERT INTO CRA_VAL_RESULT_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, cod_etapa_val,
                                                 num_reg_cab_lei, num_reg_cab_rec, num_reg_ide_lei,
                                                 num_reg_ide_rec, num_reg_mov_lei, num_reg_mov_rec,
                                                 fec_ini_pro, fec_fin_pro, des_observaciones, dia_refer, cod_sec_envio )
              VALUES (i_anopro, i_mespro, i_reporte, i_codemp, i_etapa,
                      i_can_reg_cab, i_can_bad_cab, i_can_reg_id,
                      i_can_bad_id,  i_can_reg_sal, i_can_bad_sal,
                      i_fecini, i_fecfin, i_observac, i_dia_refer, i_cod_sec_envio);
      END IF;
   COMMIT;
   RETURN;

EXCEPTION
   WHEN OTHERS THEN
        ROLLBACK;
   RETURN;
END;

----------------------------------------------------------------------------------------

PROCEDURE SP_VAL_ESTADISTICA_RTC
         (i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2)
-- -------------------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Julio 2003
-- Motivo: Actualiza la estadistica del RTC.
-- -------------------------------------------------------------------------------------
IS
   n_cod_ide_pro          NUMBER(3);
   n_cod_ori_pro          VARCHAR2(02);
   o_idepro               NUMBER(03);
   n_tot_reg_identif      NUMBER(07);
   n_tot_reg_saldos       NUMBER(07);
   n_tot_reg              NUMBER(08);
   n_tot_reg_tot          NUMBER(08);
   n_tot_reg_aux          NUMBER(08);
   n_tot_err              NUMBER(08);
   n_tot_cli              NUMBER(08);
   n_tot_cli_err          NUMBER(08);
   n_tot_cli_err_v        NUMBER(08);
   n_tot_cli_err_c        NUMBER(08);
   n_tot_cli_err_a        NUMBER(08);
   n_tot_deu              NUMBER(15,2);
   n_tot_deu_err          NUMBER(15,2);
   n_tot_deu_err_v        NUMBER(15,2);
   n_tot_deu_err_c        NUMBER(15,2);
   n_tot_deu_err_a        NUMBER(15,2);
BEGIN
-- Borra registros de la tabla CRA_VAL_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROLES_EMPRESA ('RTC', i_anopro, i_mespro, i_codemp, '01', '01');
   n_cod_ide_pro := 401;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_VAL_BORRA_CONTROLES_EMPRESA');
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) != 'T' THEN
         SP_CONTROL_DE_ERRORES (1, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
         RETURN;
      END IF;
   ELSE
      SP_CONTROL_DE_ERRORES (2, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
      RETURN;
   END IF;

-- Actualiza CRA_VAL_CONTROLES_X_EMPRESA
   SP_GRABA_CONTROL_RTC_X_EMPRESA ('RTC', i_anopro, i_mespro, i_codemp);
   n_cod_ide_pro := 401;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_GRABA_CONTROL_RTC_X_EMPRESA');
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) != 'T' THEN
         SP_CONTROL_DE_ERRORES (1, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
         RETURN;
      END IF;
   ELSE
      SP_CONTROL_DE_ERRORES (2, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
      RETURN;
   END IF;

--  Obtiene total registros de identificacion
    SELECT count(*) INTO n_tot_reg_identif FROM CRA_VALID_IDENTIF_RTC WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp AND tip_informacion = '1';
--  Obtiene total registros de detalle
    SELECT count(*) INTO n_tot_reg_saldos FROM CRA_VALID_DETALLE_RTC WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp AND tip_informacion = '1';
--  Obtiene total registros de saldos de totales
    n_tot_reg_tot := 0;
--  Calcula total registros
    n_tot_reg     := n_tot_reg_identif + n_tot_reg_saldos;

--  Obtiene el numero total de registros observados en la Empresa en Validacion RTC
    n_tot_err     := SF_OBT_TOTAL_ERR_RTC_EMPRESA (i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes RTC en la empresa
    n_tot_cli     := SF_OBT_TOTAL_CLI_RTC_EMPRESA (i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes RTC con errores en la empresa
    n_tot_cli_err := SF_OBT_TOT_CLI_RTC_ERR_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el numero total de clientes RTC con errores por tipo de control validez
   n_tot_cli_err_v := SF_OBT_TOTAL_CLI_RTC_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el numero total de clientes con errores por tipo de control consistencia
   n_tot_cli_err_c := SF_OBT_TOTAL_CLI_RTC_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el numero total de clientes con errores por tipo de control alerta
   n_tot_cli_err_a := SF_OBT_TOTAL_CLI_RTC_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'A');

--  Actualiza CRA_TOTALES_VALIDACION
   BEGIN
      SELECT num_tot_reg INTO n_tot_reg_aux
        FROM CRA_TOTALES_VALIDACION
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_reporte  = 'RTC' AND cod_empresa  = i_codemp;

      UPDATE CRA_TOTALES_VALIDACION
           SET num_tot_reg       = n_tot_reg,
               val_tot_deu       = n_tot_deu,
               num_tot_err       = n_tot_err,
               num_tot_cli       = n_tot_cli,
               num_tot_cli_err   = n_tot_cli_err,
               val_tot_deu_err   = n_tot_deu_err,
               num_tot_reg_tot   = n_tot_reg_tot,
               num_tot_cli_err_v = n_tot_cli_err_v,
               val_tot_deu_err_v = n_tot_deu_err_v,
               num_tot_cli_err_c = n_tot_cli_err_c,
               val_tot_deu_err_c = n_tot_deu_err_c,
               num_tot_cli_err_a = n_tot_cli_err_a,
               val_tot_deu_err_a = n_tot_deu_err_a
         WHERE ano_refer       = i_anopro
           AND mes_refer       = i_mespro
           AND cod_reporte     = 'RTC'
           AND cod_empresa     = i_codemp;
  EXCEPTION
    WHEN OTHERS THEN
         -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
         INSERT INTO CRA_TOTALES_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_tot_reg, val_tot_deu, num_tot_err, num_tot_cli, num_tot_cli_err, val_tot_deu_err,
                     num_tot_reg_tot, num_tot_cli_err_v, val_tot_deu_err_v, num_tot_cli_err_c, val_tot_deu_err_c, num_tot_cli_err_a, val_tot_deu_err_a, dia_refer, cod_sec_envio )
              VALUES (i_anopro, i_mespro, 'RTC', i_codemp, n_tot_reg, n_tot_deu, n_tot_err, n_tot_cli, n_tot_cli_err, n_tot_deu_err, n_tot_reg_tot,
                      n_tot_cli_err_v, n_tot_deu_err_v, n_tot_cli_err_c, n_tot_deu_err_c, n_tot_cli_err_a, n_tot_deu_err_a, '01', '01');
  END;

  COMMIT;

END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_PRE_VALIDACION_RTC
         (i_cod_form     IN  VARCHAR2,
          i_cod_anexo    IN  VARCHAR2,
          i_anopro       IN  VARCHAR2,
          i_mespro       IN  VARCHAR2,
          i_codemp       IN  VARCHAR2,
          i_fileloc      IN  VARCHAR2,
          i_cod_reporte  IN  VARCHAR2 DEFAULT '')
-- -------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - 25 Febrero 2002
-- Motivo: Realiza la Pre-validacion de los datos del movimiento RCD y RTC.
-- --------------------------------------------------------------------------------------------------------------
-- Revisiones:
--     Fecha        Autor                                           Descripcion
-- -------------  --------------------------  -------------------------------------------------------------------
-- 28/01/2004     Jaime Lopez-Torres M.       Se reemplazan valores 'E' por 'F' y 'T' por 'W' al actualizar el
--                                            codigo de estado de la etapa en la tabla CRA_PERIODO_INF_EMP_ETAPA,
--                                            por medio del procedure SP_ACT_EST_PERIODO_EMP_ETAPA.
-- -------------  --------------------------  -------------------------------------------------------------------
IS
  CURSOR cur_a (n_reporte VARCHAR2) IS
  SELECT cod_control,
         ind_activ_control,
         tip_control_val,
         cod_niv_val
    FROM CRA_CONTROL_HIS_VALIDACION
   WHERE ano_refer   = i_anopro
     AND mes_refer   = i_mespro
     AND cod_reporte = n_reporte;

-----------------------------------------------------------
-- CURSOR DE LA PRE-VALIDACION PARA EL CONTROL 21
-- FVSH 20050614
-- Se actualizo el cursor para poder observar todos los deudores
-- que presentan esta incidencia, adicionalmente se hace uso de
-- sentencias de agrupacion en lugar de comparar registros uno a uno
----------------------------------
/*
  CURSOR cur_b_rtc (n_reporte VARCHAR2) IS
  SELECT num_sec_reg, cod_unico_clie, nom_cliente
    FROM CRA_VALID_IDENTIF_AUX
   WHERE ano_refer   = i_anopro
     AND mes_refer   = i_mespro
     AND cod_reporte = n_reporte
     AND cod_empresa = i_codemp
   ORDER BY cod_unico_clie DESC;
----------------------------------
  CURSOR cur_b (n_reporte VARCHAR2) IS
  SELECT a.num_sec_reg, a.cod_unico_clie, a.nom_cliente
    FROM CRA_VALID_IDENTIF_AUX a
   WHERE a.ano_refer   = i_anopro
     AND a.mes_refer   = i_mespro
     AND a.cod_reporte = n_reporte
     AND a.cod_empresa = i_codemp
     AND a.cod_unico_clie in
               ( select x.cod_unico_clie
                   from CRA_VALID_IDENTIF_AUX x
                  where x.ano_refer   = i_anopro
                    and x.mes_refer   = i_mespro
                    and x.cod_reporte = n_reporte
                    and x.cod_empresa = i_codemp
                 group by x.cod_unico_clie
                 having count(*) > 1
               )
   ORDER BY a.cod_unico_clie DESC;
*/
--------------------------------------------------------------
-- Definicion de Arreglos
   TYPE def_arr_error  IS VARRAY(252) OF   NUMBER(6);
   TYPE def_arr_activ  IS VARRAY(252) OF VARCHAR2(1);
   TYPE def_arr_tipcon IS VARRAY(252) OF VARCHAR2(1);
   TYPE def_arr_nivval IS VARRAY(252) OF VARCHAR2(1);

-- Definicion de variables
   arr_error              def_arr_error  := def_arr_error (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
   arr_activ              def_arr_activ  := def_arr_activ
   arr_tipcon             def_arr_tipcon := def_arr_tipcon('','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','');
   arr_nivval             def_arr_nivval := def_arr_nivval
   n_count                NUMBER   (06);
   n_fecini_pro           DATE   ;
   n_hay_res_controles    NUMBER   (01);
   n_observaciones        VARCHAR2 (255);
   ls_error               VARCHAR2 (2000);
   n_cod_ide_pro          NUMBER   (03);
   n_cod_etapa_val        VARCHAR2 (02)  ;
   ln_can_reg_cab         NUMBER   := 0;
   ln_can_reg_id          NUMBER   := 0;
   ln_can_reg_sal         NUMBER   := 0;
   ln_can_bad_cab         NUMBER   := 0;
   ln_can_bad_id          NUMBER   := 0;
   ln_can_bad_sal         NUMBER   := 0;
-- Datos comunes
   n_hay_error            NUMBER   (01);
   n_es_cancelatorio      NUMBER   (01);
   n_reporte              VARCHAR2 (03);
   n_mensaje              VARCHAR2 (255);
   is_pri_resp  VARCHAR2 (40);
   is_cargo_pri VARCHAR2 (02);
   is_seg_resp  VARCHAR2 (40);
   is_cargo_seg VARCHAR2 (02);
   pn_max_sec NUMBER;
   pv_estado  VARCHAR2 (02);

BEGIN
   n_hay_error       := 0;
   n_es_cancelatorio := 0;
   n_fecini_pro      := SYSDATE;
   n_count           := 0;
   n_cod_etapa_val   := '02';
   n_reporte     := 'RTC';
   n_cod_ide_pro := 8;

-- Matricula de Entidades
   is_pri_resp  := ' ';
   is_cargo_pri := ' ';
   is_seg_resp  := ' ';
   is_cargo_seg := ' ';
   pn_max_sec := 0;
   pv_estado  := ' ';
-- Obtener la mayor secuencia y estado de proceso
   BEGIN
      SELECT nvl(MAX(NUM_SEC_MAT),0), Sf_Cod_Estado_Val_Empresa(i_anopro, i_mespro, 'RTC', 'V', i_codemp)
        INTO PN_MAX_SEC, PV_ESTADO
        FROM CRA_MATRICULAS
       WHERE ANO_REFER = i_anopro AND MES_REFER = i_mespro
          AND COD_REPORTE = n_reporte AND COD_EMPRESA = i_codemp;
   EXCEPTION
      WHEN OTHERS THEN
         pn_max_sec := 0;
   END;

  BEGIN
     SELECT MAX(NOM_PRI_RESPONSABLE), MAX(COD_CARGO_PRI_RESP),
            MAX(NOM_SEG_RESPONSABLE), MAX(COD_CARGO_SEG_RESP)
       INTO is_pri_resp, is_cargo_pri,
            is_seg_resp, is_cargo_seg
       FROM CRA_MATRICULAS
      WHERE ANO_REFER = '2002' AND MES_REFER = '12'
        AND COD_EMPRESA = i_codemp;

  EXCEPTION
    WHEN OTHERS THEN
      is_pri_resp  := ' ';
      is_cargo_pri := ' ';
      is_seg_resp  := ' ';
      is_cargo_seg := ' ';
  END;

  pn_max_sec := pn_max_sec + 1;
  ln_can_reg_id  := 0;
  BEGIN
     SELECT COUNT(1)
     INTO ln_can_reg_id
     FROM cra_valid_identif_rtc i
     WHERE
         ano_refer     = i_anopro
     AND mes_refer     = i_mespro
     AND i.cod_empresa = i_codemp;
  EXCEPTION
  WHEN OTHERS THEN
       ln_can_reg_id  := 0;
  END;
  BEGIN   -- MATRICULA DE LA EMPRESA
    -- JCFS 16/11/2011: Se agrega la nueva columna NUM_REG_EXTERNO
    INSERT INTO CRA_MATRICULAS ( ANO_REFER, MES_REFER, COD_REPORTE, COD_EMPRESA, NUM_SEC_MAT, FEC_MATRICULA, TIP_MEDIO_MAG,
        NOM_CONTENIDO_MED_MAG, COD_NRO_SERIE, NUM_TAMANO_BYTES, NUM_DEUDORES, NOM_PRI_RESPONSABLE, COD_CARGO_PRI_RESP, NOM_SEG_RESPONSABLE,
        COD_CARGO_SEG_RESP, FEC_REGISTRO, COD_USU_REG, FEC_MODIFICACION, COD_USU_MOD, IND_ANULACION, FEC_ARCHIVO,
        NUM_DOC_ENTREGA, FEC_DOC_ENTREGA, NUM_REG_EXTERNO )
    VALUES
      ( i_anopro, i_mespro, n_reporte, i_codemp, pn_max_sec, sysdate, '99',
        'SUCAVE', 'ANEXO 01/02', 0, ln_can_reg_id, is_pri_resp, is_cargo_pri, is_seg_resp,
        is_cargo_seg, SYSDATE, 'SUCAVE', NULL, NULL, NULL, SYSDATE,
        'S/N', SYSDATE, NULL );
  EXCEPTION
  WHEN OTHERS THEN
     is_cargo_seg := ' ';
  END;

  BEGIN   -- ACTUALIZA CRA_PERIODOS_INF_EMPRESA
    UPDATE cra_periodos_inf_empresa
       SET COD_EST_EMPRESA = 'V'
     WHERE ANO_REFER = i_anopro AND MES_REFER = i_mespro AND
           COD_REPORTE = n_reporte AND COD_PROCESO_GRAL = 'V' AND
           COD_EMPRESA = i_codemp;
  EXCEPTION
  WHEN OTHERS THEN
     is_cargo_seg := ' ';
  END;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL);
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'P');

-- Borra registros de la tabla CRA_VAL_CONTROLES_RCD/RTC/RCA_X_SEC
   SP_BORRA_VALID_ERRORES (i_cod_reporte, i_anopro, i_mespro, i_codemp, 'PV');

-- Borra registros de tabla CRA_VALID_IDENTIF_AUX.
   SP_BORRA_VALID_IDENTIF_AUX  (i_anopro, i_mespro, i_codemp, n_reporte, '01', '01');

-- Borra registros de la tabla CRA_VAL_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROLES_EMPRESA (n_reporte, i_anopro, i_mespro, i_codemp, '01', '01');

-- Verificacion del numero de controles de validacion
   BEGIN
     SELECT COUNT(1)
       INTO n_tot_controles
       FROM CRA_CONTROL_HIS_VALIDACION
      WHERE ano_refer   = i_anopro
        AND mes_refer   = i_mespro
        AND cod_reporte = n_reporte;
   EXCEPTION
      WHEN OTHERS THEN
           n_tot_controles := 0;
           n_code  := SQLCODE;
           n_error := SQLERRM;
           n_observaciones := substr(n_error,1,255);
           n_cod_est_pro := 'E';
           SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F');
           SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                         ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                         ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);
           RETURN;
   END;

   IF n_tot_controles > 252 THEN
      n_es_cancelatorio := 1;
      n_observaciones := 'ERROR: Numero de controles de validacion excede implementacion. Dar aviso a la Gerencia de Informatica';
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F');
      SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                    ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                    ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);
      RETURN;
   END IF;

-- Obtiene Datos de Controles
   FOR cur in cur_a (n_reporte) LOOP
       arr_activ  (cur.cod_control) := cur.ind_activ_control;
       arr_tipcon (cur.cod_control) := cur.tip_control_val;
       arr_nivval (cur.cod_control) := cur.cod_niv_val;
       arr_error  (cur.cod_control) := n_count;
   END LOOP;

-- Se debe obtener la cantidad de registros de las tablas cra_valid_identif_rtc y cra_valid_detalle_rtc
-- Estas tablas serán cargadas desde el SUCAVI a través de los formatos TIPICOS (SUCATIP)

-- seteo de variables principales
n_hay_error         := 0;
n_es_cancelatorio   := 0;
n_hay_res_controles := 0;
ln_can_reg_cab := 1;
ln_can_bad_cab := 0;
ln_can_reg_id  := 0;
ln_can_bad_id  := 0;
ln_can_reg_sal := 0;
ln_can_bad_sal := 0;

-- Obtener cantidad de registros de identificacion
BEGIN
  SELECT COUNT(1)
    INTO ln_can_reg_id
    FROM cra_valid_identif_rtc i
   WHERE ano_refer     = i_anopro
     AND mes_refer     = i_mespro
     AND i.cod_empresa = i_codemp;
EXCEPTION
  WHEN OTHERS THEN
       ln_can_reg_id  := 0;
END;
-- Obtener cantidad de registros de detalle
BEGIN
  SELECT COUNT(1)
  INTO ln_can_reg_sal
  FROM cra_valid_detalle_rtc d
  WHERE
      ano_refer     = i_anopro
  AND mes_refer     = i_mespro
  AND cod_empresa   = i_codemp;
EXCEPTION
  WHEN OTHERS THEN
       ln_can_reg_sal  := 0;
END;

--------------------------------------------------------------
-- Por si hay algún código adicional
--------------------------------------------------------------

-- Actualiza CRA_VAL_CONTROLES_X_EMPRESA
   IF n_hay_error = 1 THEN
      SP_GRABA_CONTROL_X_EMP_PV (n_reporte, i_anopro, i_mespro, i_codemp, '01', '01');
      n_hay_res_controles := 1;
   END IF;

   IF n_es_cancelatorio = 0 THEN
      IF n_hay_error = 1 THEN
         n_observaciones := 'OBS: Pre-Validacion con Observaciones';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', n_observaciones);
         SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F');
      ELSE
         n_observaciones := 'MSJ: Pre-Validacion OK';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', n_observaciones);
         SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'W');
      END IF;
   ELSE
      n_observaciones := 'OBS: Pre-Validacion con observacion cancelatoria, se rechaza el archivo. Ver Resultados';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
      SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F');
   END IF;
   COMMIT;

   SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                 ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                 ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);

   IF n_es_cancelatorio = 0 AND n_hay_error = 0 THEN
       SP_VAL_CARGA_A_SISTEMA_RTC (i_cod_form, i_cod_anexo, i_anopro, i_mespro, i_codemp, i_fileloc,n_reporte);
   ELSE
       RETURN;
   END IF;

EXCEPTION
-- Finaliza con error
   WHEN NO_DATA_FOUND THEN
        n_observaciones := 'ERROR: UTL_FILE: No encontro datos'||'  '||substr(ls_error,1,220);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);
--      Actualiza CRA_PAR_PROCESOS
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'Fin de registro');
--      Actualiza CRA_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'Fin de registro', 'VA', NULL, NULL, NULL);
--      Actualiza CRA_PERIODO_INF_EMP_ETAPA
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E');
   WHEN OTHERS THEN
        ls_error := SQLERRM;
        n_mensaje := 'ERROR: Error luego de secuencia => Ident: '|| ln_can_reg_id || '   Mov: '|| ln_can_reg_sal || '   ' || substr(ls_error,1,145);
        n_observaciones := substr(ls_error,1,255);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);
--      Actualiza CRA_PAR_PROCESOS
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_mensaje);
--      Actualiza CRA_CONTROL_PROCESOS
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_mensaje, 'VA', NULL, NULL, NULL);
--      Actualiza CRA_PERIODO_INF_EMP_ETAPA
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E');

        IF n_hay_error = 1 AND n_hay_res_controles = 0 THEN
--          Actualiza CRA_VAL_CONTROLES_X_EMPRESA
            IF n_hay_error = 1 THEN
               SP_GRABA_CONTROL_X_EMP_PV (n_reporte, i_anopro, i_mespro, i_codemp, '01', '01');
            END IF;
        END IF;
END;

--------------------------------------------------------------------------------------------------------------------

PROCEDURE SP_VAL_CARGA_A_SISTEMA_RTC
         (i_cod_form     IN VARCHAR2,
          i_cod_anexo    IN VARCHAR2,
          i_anopro       IN VARCHAR2,
          i_mespro       IN VARCHAR2,
          i_codemp       IN VARCHAR2,
          i_ruta         IN VARCHAR2,
          i_cod_reporte  IN VARCHAR2 DEFAULT '')
-- ------------------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Diciembre 2001
-- Motivo: Carga RCD a Sistema.
-- ------------------------------------------------------------------------------
-- Modificado por        : Jaime Lopez-Torres M.
-- Fecha Actualizacion   : 09 Noviembre 2002
-- Descripcion Actualiza.: Cambio en extraccion de caracteres especiales.
-- ------------------------------------------------------------------------------
-- Modificado por        : Jaime Lopez-Torres M.
-- Fecha Actualizacion   : 12 Junio 2003
-- Descripcion Actualiza.: Condicion en dias se amplia de 3 a 4 caracteres
-- ------------------------------------------------------------------------------
-- Modificado por        : Jaime Lopez-Torres M.
-- Fecha Actualizacion   : 01 Julio 2003
-- Descripcion Actualiza.: Se incluyen los sgtes. procedures:
--                         SP_BORRA_VALID_DEV_SALDOS_RCD, SP_BORRA_VALID_DEV_IDENTIF_RCD
--                         SP_BORRA_VALID_DEV_DETALLE_RTC, SP_BORRA_VALID_DEV_IDENTIF_RTC
-- ------------------------------------------------------------------------------
IS
   n_fecini_pro        DATE   ;
   n_observaciones     VARCHAR2 (255);
   ls_error            VARCHAR2 (2000);
   n_cod_ide_pro       NUMBER   (03);
   n_cod_etapa_val     VARCHAR2 (02);
   es_errado           NUMBER   (01);
   ln_can_reg_cab      NUMBER   := 0;
   ln_can_reg_id       NUMBER   := 0;
   ln_can_reg_sal      NUMBER   := 0;
   ln_can_sec_cta      NUMBER   := 0;
   ln_can_bad_cab      NUMBER   := 0;
   ln_can_bad_id       NUMBER   := 0;
   ln_can_bad_sal      NUMBER   := 0;
-- Datos comunes
   n_hay_error         NUMBER   (01);
   n_reporte           VARCHAR2 (03);

BEGIN
   es_errado     := 0;
   n_fecini_pro  := SYSDATE;
   n_cod_etapa_val := '03';
   n_reporte     := 'RTC';
   n_cod_ide_pro := 14;

   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'P', NULL);
   SP_ACT_EST_CONTROL_PROCESOS ('P', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, 'VA', NULL, NULL, NULL);
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'P');

/* Las tareas que se deben realizar aquí se llevan a cabo en:
   PRO: PK_FTO_ACTUALIZA.sp_fto_0208_01 y PK_FTO_ACTUALIZA.sp_fto_0208_02 (graba en CRA_VALID_IDENTIF_RTC y CRA_VALID_DETALLE_RTC, respectivamente)
   CRAPRO: PK_VALIDADOR_RTC_SUCAVE.SP_VAL_ENVIA_A_PRE_VALIDAR_RTC y demás */

   n_hay_error    := 0;
   es_errado      := 0;
   ln_can_bad_cab := 0;
   ln_can_bad_id  := 0;
   ln_can_bad_sal := 0;

   ln_can_reg_cab := 1;
   ln_can_bad_cab := 0;
   ln_can_reg_id  := 0;
   ln_can_bad_id  := 0;
   ln_can_reg_sal := 0;
   ln_can_bad_sal := 0;

   -- Obtener cantidad de registros de identificacion
   BEGIN
      SELECT COUNT(1) INTO ln_can_reg_id
        FROM cra_valid_identif_rtc i
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND i.cod_empresa = i_codemp;
   EXCEPTION
      WHEN OTHERS THEN
         ln_can_reg_id  := 0;
   END;

   -- Obtener cantidad de registros de detalle
   BEGIN
      SELECT COUNT(1) INTO ln_can_reg_sal
        FROM cra_valid_detalle_rtc d
       WHERE ano_refer = i_anopro AND mes_refer = i_mespro AND cod_empresa = i_codemp;
   EXCEPTION
      WHEN OTHERS THEN
         ln_can_reg_sal  := 0;
   END;

   IF es_errado = 0 THEN
      IF ln_can_bad_cab = 0 AND ln_can_bad_id  = 0 AND ln_can_bad_sal = 0 THEN
         n_hay_error := 0;
         n_observaciones := 'MSJ: Carga a base de Datos OK';
      ELSE
         n_observaciones := 'OBS: Carga a base de Datos con Observaciones';
         n_hay_error := 1;
      END IF;

      IF n_hay_error = 1 THEN
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'OBS: Carga a base de Datos con Observaciones');
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'F');
         SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'OBS: Carga a base de Datos con Observaciones', 'VA', NULL, NULL, NULL);
      ELSE
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'T', 'MSJ: Carga a base de Datos OK');
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'T');
         SP_ACT_EST_CONTROL_PROCESOS ('T', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'MSJ: Carga a base de Datos OK', 'VA', NULL, NULL, NULL);
      END IF;

      COMMIT;

      ln_can_reg_id := ln_can_reg_id - 1;  -- No se considera el identificador de Totales
      SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                    ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                    ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);

      IF es_errado = 0 THEN
         IF n_hay_error = 0 THEN
            SP_VAL_VALIDACION_RTC (i_anopro, i_mespro, i_codemp);
         END IF;
      END IF;
   END IF;
   RETURN;

EXCEPTION
-- Finaliza con error
   WHEN NO_DATA_FOUND THEN
        n_observaciones := 'ERROR: UTL_FILE: No encontro datos'||'  '||substr(ls_error,1,220);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', 'Fin de registro');
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'Fin de registro', 'VA', NULL, NULL, NULL);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E');
   WHEN OTHERS THEN
        ls_error := SQLERRM;
        n_observaciones := 'ERROR: Error en registro: Identif: '|| ln_can_reg_id||'  Cta.: '|| ln_can_sec_cta||'  '||substr(ls_error,1,172);
        SP_ACT_VAL_RESULT_VALIDACION (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val,
                                      ln_can_reg_cab, ln_can_bad_cab, ln_can_reg_id, ln_can_bad_id,
                                      ln_can_reg_sal, ln_can_bad_sal, n_fecini_pro, SYSDATE, n_observaciones);
        SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
        SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
        SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, n_reporte, i_codemp, n_cod_etapa_val, 'E');

END;

----------------------------------------------------------------------

PROCEDURE SP_VAL_VALIDACION_RTC
         (i_anopro   IN VARCHAR2,
          i_mespro   IN VARCHAR2,
          i_codemp   IN VARCHAR2)
-- Autor : Jaime Lopez-Torres M.
-- Fecha : 26 Abril 2002
-- Motivo: Realiza la validacion de los datos del movimiento RTC.
-- --------------------------------------------------------------------------------------------------------------------
-- Revisiones:
--     Fecha        Autor                                           Descripcion
-- -------------  --------------------------  -------------------------------------------------------------------------
-- 12/08/2003     Jaime Lopez-Torres M.       Se incluye lectura a tabla CRA_CLIENTE_SANCION_RTC.
-- --------------------------------------------------------------------------------------------------------------------
-- 22/09/2003     Jaime Lopez-Torres M.       Se incluye tipo de documento '9' (Extranjero no residente).
-- --------------------------------------------------------------------------------------------------------------------
-- 25/09/2003     Jaime Lopez-Torres M.       Se permite que fecha de anulacion de una tarjeta de credito o del cierre
--                                            de una cuenta corriente sea igual a la fecha de apertura informada por la
--                                            empresa (Nuevo alcance solicitado por el DERC).
-- --------------------------------------------------------------------------------------------------------------------
-- 02/10/2003     Jaime Lopez-Torres M.       Se actualizan glosas de mensajes de error.
-- 04/11/2003     Jaime Lopez-Torres M.       Se actualiza CRA_VALID_ASIG_COD_SBS.
-- --------------------------------------------------------------------------------------------------------------------
-- xx/07/2010     Juan Carlos Fernández S.    Se adecúa todo el SP a la Resolución 11356
-- --------------------------------------------------------------------------------------------------------------------
IS
  CURSOR cur_a IS
  SELECT cod_control,
         ind_activ_control,
         tip_control_val
    FROM CRA_CONTROL_HIS_VALIDACION
   WHERE ano_refer   = i_anopro
     AND mes_refer   = i_mespro
     AND cod_reporte = 'RTC';

  CURSOR cur_b IS
  SELECT num_sec_reg,
         tip_informacion,
         num_sec,
         cod_sbs,
         cod_unico_clie,
         cod_ciiu3,
         cod_sunarp,
         tip_doc_trib,
         num_doc_trib,
         tip_doc_iden,
         num_doc_iden,
         tip_persona,
         tip_residencia,
         tip_clasif_clie,
         tip_magnitud,
         ind_accionista,
         tip_rellab,
         Ltrim(Rtrim(cod_pais)) AS cod_pais,  -- JCFS 04/08/2010: Se elimina blancos porque el valor disminuye de 4 a 2 caracteres reportados
         nom_sigla,
         REPLACE(
         trim(
            trim(nvl(nom_cliente,  '')) || ' ' ||
            trim(nvl(ape_materno,  '')) || ' ' ||
            trim(nvl(ape_casada,   '')) || ' ' ||
            trim(nvl(primer_nombre,'')) || ' ' ||
            trim(nvl(segundo_nombre,''))
           )
           ,'  ',' ') as nom_cliente, -- Paterno
         REPLACE(
         trim(
            trim(nvl(nom_cliente,  '')) || ' ' ||
            trim(nvl(ape_materno,  '')) || ' ' ||
            trim(nvl(primer_nombre,''))
           )
           ,'  ',' ') as nom_cliente_C, -- Paterno
         sexo,
         est_civil,
         fec_nac,
         direccion,
         cod_dir_ubigeo
    FROM CRA_VALID_IDENTIF_RTC
   WHERE ano_refer = i_anopro AND mes_refer = i_mespro
     AND cod_empresa = i_codemp
     AND tip_formulario = '1'
ORDER BY num_sec_reg;

  CURSOR cur_c (p_num_sec_reg VARCHAR2) IS
  SELECT num_sec_reg,
         num_sec_cta,
         tip_informacion,
         num_sec,
         cod_oficina,
         cod_ubigeo_ofic,
         tip_reporte,
         tip_ctacte,
         num_ctacte,
         tip_tarj_cre,
         num_tarj_cre,
         tip_mda,
         fec_apertura,
         tip_motivo_anul,
         fec_anul_cierre,
         fec_public_peru,
         num_rel_public,
         fec_rec_rectif,
         fec_fin_rectif
    FROM CRA_VALID_DETALLE_RTC
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_empresa    = i_codemp
     AND num_sec_reg    = p_num_sec_reg
     AND tip_formulario = '1'
ORDER BY num_sec_cta;

  CURSOR cur_g (n_cod_sbs NUMBER, n_producto VARCHAR2, n_tip_reporte VARCHAR2) IS
  SELECT tip_ctacte,
         num_ctacte,
         tip_tarj_cre,
         num_tarj_cre,
         tip_mda,
         fec_public_peru,
         num_rel_public,
         fec_anul_cierre,
         cod_unico_clie,
         cod_oficina,
         des_det_rectifica
    FROM CRA_CTAS_ANUL_Y_RECTIF
   WHERE cod_sbs      = n_cod_sbs
     AND cod_empresa  = i_codemp
     AND tip_producto = n_producto
     AND tip_reporte  = n_tip_reporte;

  CURSOR cur_h (n_cod_sbs NUMBER) IS
  SELECT --+ORDERED
         A.cod_sbs_remplazado
    FROM CRI_REEMPLAZO "A",
         CRI_PERSONA   "B"
   WHERE A.cod_sbs_ult_rplzte = n_cod_sbs
     AND B.cod_sbs            = A.cod_sbs_remplazado;

  CURSOR cur_j IS
  SELECT num_sec_reg
    FROM CRA_VALID_ASIG_CODSBS
   WHERE ano_refer      = i_anopro
     AND mes_refer      = i_mespro
     AND cod_reporte    = 'RTC'
     AND cod_empresa    = i_codemp
     AND SF_OBT_TOT_CONTROL_RTC_X_SEC (i_anopro, i_mespro, i_codemp, num_sec_reg) > 0;

-- Definicion de Arreglos
   -- JCFS 12/09/2011: Se aumenta el tamaño de los arreglos a 250 (igual que la validación del RCD)
   TYPE def_arr_error  IS VARRAY(252) OF NUMBER(06);
   TYPE def_arr_activ  IS VARRAY(252) OF VARCHAR2(01);
   TYPE def_arr_tipcon IS VARRAY(252) OF VARCHAR2(01);

-- Definicion de variables
   arr_error           def_arr_error  := def_arr_error (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);

   arr_activ           def_arr_activ  := def_arr_activ ('','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','');

   arr_tipcon          def_arr_tipcon := def_arr_tipcon('','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                                                        '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','');

   n_cont                 NUMBER(10);
   n_repor_motiv          VARCHAR2(03);
   n_existe_codigo        NUMBER(01);
   n_tip_reporte_inf      VARCHAR2(02);
   n_motivo_anul_inf      VARCHAR2(01);
   n_cod_etapa            VARCHAR2(02);
   n_reg_altas            NUMBER(07);
   n_reg_no_alertas       NUMBER(07);
   o_idepro               NUMBER(03);
   n_cod_ori_pro          VARCHAR2(02);
   n_codigo_valido        NUMBER(01);
   n_existe_a_rectificar  NUMBER(01);
   n_observaciones        VARCHAR2(255);
   n_registros            NUMBER(03);
   n_loop                 NUMBER(02);
   n_blancos              NUMBER(02);
   n_invalidos            NUMBER(03);
   n_error                VARCHAR2(2000);
   n_producto             VARCHAR2(01);
   n_tip_ctacte           VARCHAR2(01);
   n_tip_tarj_cre         VARCHAR2(01);
   n_tip_reporte          VARCHAR2(02);
   n_tip_mda              VARCHAR2(01);
   n_fec_public_peru      DATE;
   n_fec_anul_cierre      DATE;
   n_fec_fin_sancion      DATE;
   n_num_rel_public       NUMBER(04);
   n_cod_unico_clie       VARCHAR2(20);
   n_num_tarj_cre         VARCHAR2(30);
   n_num_ctacte           VARCHAR2(30);
   n_des_det_rectifica    VARCHAR2(20);
   n_num_ruc              VARCHAR2(11);
   n_num_ruc11            VARCHAR2(11);
   n_hay_error            NUMBER(01);
   n_nom_dir_ubigeo       VARCHAR2(60);
   n_num_seq_val          NUMBER(03);
   n_cod_act_eco          VARCHAR2(04);
   n_cod_ide_pro          NUMBER(3);
   n_cod_est_pro          VARCHAR2(1);
   n_tip_condicion        VARCHAR2(5);
   n_tip_condicion_sanc   VARCHAR2(5);
   n_no_encuentra         NUMBER(1);
   n_long_nom_cliente     NUMBER(3);
   n_long_cod_unico       NUMBER(2);
   n_cod_unico_clie_aux   VARCHAR2(20);
   n_ind_fijo_nombre      VARCHAR2(1);
   n_ind_fijo_ruc         VARCHAR2(1);
   n_ind_fijo_doc_id      VARCHAR2(1);
   n_ind_fijo_sunarp      VARCHAR2(1);
   n_ind_fijo_ciiu3       VARCHAR2(1);
   n_tot_reg_identif      NUMBER(07);
   n_tot_reg_saldos       NUMBER(07);
   n_tot_reg              NUMBER(08);
   n_tot_reg_tot          NUMBER(08);
   n_tot_reg_aux          NUMBER(08);
   n_tot_err              NUMBER(08);
   n_tot_cli              NUMBER(08);
   n_tot_cli_err          NUMBER(08);
   n_tot_cli_err_v        NUMBER(08);
   n_tot_cli_err_c        NUMBER(08);
   n_tot_cli_err_a        NUMBER(08);
   n_tot_deu              NUMBER(15,2);
   n_tot_deu_err          NUMBER(15,2);
   n_tot_deu_err_v        NUMBER(15,2);
   n_tot_deu_err_c        NUMBER(15,2);
   n_tot_deu_err_a        NUMBER(15,2);
   n_valor                BOOLEAN;
   n_cod_sbs_sigla_dup    NUMBER(03);
   n_cod_sbs_nombre_dup   NUMBER(03);
   n_num_doc_iden_dup     NUMBER(03);
   n_num_doc_trib_dup     NUMBER(03);
   n_cod_sunarp_dup       NUMBER(03);
   n_cod_pais             VARCHAR2(04);
   n_sec_identif          NUMBER(07);
   n_sec_saldos           NUMBER(07);
   n_tip_persona          VARCHAR2(01);
   n_cod_sbs              NUMBER(10);
   n_cod_sbs_sanc         NUMBER(10);
   n_cod_sbs_ruc8         NUMBER(10);
   n_cod_sbs_ruc11        NUMBER(10);
   n_cod_sbs_nat          NUMBER(10);
   n_cod_sbs_man          NUMBER(10);
   n_cod_sbs_entidad      NUMBER(10);
   n_cod_sbs_nom_cliente  NUMBER(10);
   n_cod_sbs_sunarp       NUMBER(10);
   n_cod_sbs_sigla        NUMBER(10);
   n_cod_sbs_ult_rplzte   NUMBER(10);
   n_cod_actividad_econ   VARCHAR2(04);
   n_tip_docto_ident_maes VARCHAR2(03);
   n_num_docto_ident_maes VARCHAR2(15);
   n_nom_cliente_maes     VARCHAR2(120);
   n_cod_onrp_maes        VARCHAR2(15);
   n_nom_sigla            VARCHAR2(20);
   n_control              NUMBER(03);
   n_cod_oficina_aux      VARCHAR2(04);
   n_codigo_unico_difer   NUMBER(01);
   n_ruc_iguales_u_omit   NUMBER(01);
   n_tot_controles        NUMBER(05);
   ls_estado_entidad   VARCHAR2(02);
   ls_ind_reporta_rcd  VARCHAR2(01);
   ls_ubigeo_oficina   VARCHAR2(06);
   ls_tip_est_oficina  VARCHAR2(02);

   /* JCFS 12/09/2011: Se utilizará una tabla indexada para consultar las Oficinas */
   type typTableOficinas IS TABLE OF ays_oficina%ROWTYPE;
   colTableOficinas typTableOficinas;
   type typInxOficinas IS TABLE OF ays_oficina%ROWTYPE INDEX BY ays_oficina.num_oficina%TYPE;
   colInxOficinas typInxOficinas;

BEGIN
   dbms_output.put_line('Proceso : SP_VAL_VALIDACION_RTC  ' || i_codemp);
   dbms_output.put_line('Hora de inicio:  ' || to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'));
   n_cont        := 0;
   n_cod_ide_pro := 401;
   n_cod_etapa   := '05';
   n_cod_ori_pro := 'VA';
   n_hay_error   := 0;

   n_cod_est_pro := 'P';
   SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, NULL);
   SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, n_cod_est_pro);
   SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, NULL, n_cod_ori_pro, NULL, NULL, NULL);

-- Borra registros de la tabla CRA_VAL_CONTROLES_X_EMPRESA
   SP_VAL_BORRA_CONTROLES_EMPRESA ('RTC', i_anopro, i_mespro, i_codemp, '01', '01');
   n_cod_ide_pro := 401;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_VAL_BORRA_CONTROLES_EMPRESA');
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) != 'T' THEN
         SP_CONTROL_DE_ERRORES (1, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
         RETURN;
      END IF;
   ELSE
      SP_CONTROL_DE_ERRORES (2, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
      RETURN;
   END IF;

-- Borra registros de validacion en la tabla CRA_VAL_CONTROLES_RTC_X_SEC
   SP_BORRA_VALID_ERRORES ('RTC',i_anopro, i_mespro, i_codemp,'VA');
   n_cod_ide_pro := 401;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_BORRA_VALID_ERRORES_RTC_VA');
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) != 'T' THEN
         SP_CONTROL_DE_ERRORES (1, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
         RETURN;
      END IF;
   ELSE
      SP_CONTROL_DE_ERRORES (2, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
      RETURN;
   END IF;

-- Actualiza CRA_NRO_VALIDACION
   BEGIN
     SELECT MAX(num_seq_val)
       INTO n_num_seq_val
       FROM CRA_NRO_VALIDACION
      WHERE ano_refer    = i_anopro
        AND mes_refer    = i_mespro
        AND cod_reporte  = 'RTC'
        AND cod_empresa  = i_codemp;
     n_num_seq_val := n_num_seq_val + 1;
     -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
     INSERT INTO CRA_NRO_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_seq_val, cod_est_val, fec_ini_val, fec_fin_val, dia_refer, cod_sec_envio )
          VALUES (i_anopro, i_mespro, 'RTC', i_codemp, n_num_seq_val, 'P', SYSDATE, NULL, '01', '01');
   EXCEPTION
     WHEN OTHERS THEN
          n_num_seq_val := 1;
          -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
          INSERT INTO CRA_NRO_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_seq_val, cod_est_val, fec_ini_val, fec_fin_val, dia_refer, cod_sec_envio )
               VALUES (i_anopro, i_mespro, 'RTC', i_codemp, n_num_seq_val, 'P', SYSDATE, NULL, '01', '01');
   END;
   COMMIT;

-- Verificacion del numero de controles de validacion
   BEGIN
     SELECT COUNT(*)
       INTO n_tot_controles
       FROM CRA_CONTROL_HIS_VALIDACION
      WHERE ano_refer   = i_anopro
        AND mes_refer   = i_mespro
        AND cod_reporte = 'RTC';
   EXCEPTION
      WHEN OTHERS THEN
           n_tot_controles := 0;
           n_error := SQLERRM;
           n_observaciones := substr(n_error,1,255);
           n_cod_est_pro := 'E';
           SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, n_observaciones);
           SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, 'F');
           SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
           RETURN;
   END;

   IF n_tot_controles > 200 THEN
      n_observaciones := 'ERROR: Numero de controles de validacion excede implementacion. Dar aviso.';
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, 'F');
      SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
      RETURN;
   END IF;

-- Obtiene Datos de Controles
   FOR cur in cur_a LOOP
       arr_activ  (cur.cod_control) := cur.ind_activ_control;
       arr_tipcon (cur.cod_control) := cur.tip_control_val;
       arr_error  (cur.cod_control) := 0;
   END LOOP;

   n_sec_saldos    := 0;
   n_sec_identif   := 0;
   n_codigo_valido := 1;

  /* JCFS 03/08/2010: Para validación de Países -> Se carga la Nested Table y luego se recorre la misma para cargar la Tabla Indexada (Associative Array) */
  SELECT *
    BULK COLLECT INTO colTableAdmElemento
    FROM adm_elemento
   WHERE cod_tabla = 'COD_PAIS_ISO3166';

  IF colTableAdmElemento.COUNT < 1 THEN
     n_observaciones := 'ERROR: No se encontró Elementos en la Tabla de Países ISO. Dar aviso.';
     SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
     SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, 'F');
     SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
     RETURN;
  END IF;

  FOR i IN colTableAdmElemento.FIRST..colTableAdmElemento.LAST LOOP
      colInxAdmElemento(colTableAdmElemento(i).cod_elemento) := colTableAdmElemento(i).des_elemento;
  END LOOP;

  -- JCFS 12/09/2011: Se obtiene el estado de la entidad, que será utilizado en la validación de oficinas cerradas
  SELECT tip_est_ent_vig INTO ls_estado_entidad
    FROM ays_ent_vigilada
   WHERE cod_ent_vig = i_codemp;

  /* JCFS 12/09/2011: Para validación de Oficinas -> Se carga la Nested Table y luego se recorre la misma para cargar la Tabla Indexada (Associative Array) */
  SELECT *
    BULK COLLECT INTO colTableOficinas
    FROM ays_oficina
   WHERE cod_ent_vig = i_codemp;

  IF colTableOficinas.COUNT < 1 THEN
     n_observaciones := 'ERROR: No se encontró Elementos en la Tabla de Oficinas de la Entidad. Dar aviso.';
     SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_observaciones);
     SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, n_cod_etapa, 'F');
     SP_ACT_EST_CONTROL_PROCESOS ('E', USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, n_observaciones, 'VA', NULL, NULL, NULL);
     RETURN;
  END IF;

  FOR i IN colTableOficinas.FIRST..colTableOficinas.LAST LOOP
      colInxOficinas(colTableOficinas(i).num_oficina) := colTableOficinas(i);
  END LOOP;


/**** Registros de Identificacion de Clientes ****/

   FOR cur in cur_b LOOP
       <<Lectura>>
       n_cont            := n_cont + 1;
       n_codigo_unico_difer   := 0;
       n_ruc_iguales_u_omit   := 0;
       n_cod_sbs_sanc         := 0;
       n_cod_actividad_econ   := NULL;
       n_tip_persona          := NULL;
       n_num_ruc              := NULL;
       n_num_ruc11            := NULL;
       n_nom_cliente_maes     := NULL;
       n_tip_docto_ident_maes := NULL;
       n_num_docto_ident_maes := NULL;
       n_cod_onrp_maes        := NULL;
       n_tip_condicion        := NULL;
       n_tip_condicion_sanc   := NULL;
       n_ind_fijo_nombre      := NULL;
       n_ind_fijo_ruc         := NULL;
       n_ind_fijo_doc_id      := NULL;
       n_ind_fijo_sunarp      := NULL;
       n_ind_fijo_ciiu3       := NULL;
       n_cod_pais             := NULL;

       IF n_codigo_valido = 1 THEN
          IF n_sec_saldos != n_sec_identif THEN
             n_control := 17;
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, n_sec_identif, 0, 'VA', arr_tipcon(n_control) );
          END IF;
       END IF;
       n_sec_identif := cur.num_sec_reg;

/***** Valida Datos de Campos *****/

/***** Código SBS ****/
       n_codigo_valido := 1;
       n_cod_sbs := Test_Number(cur.cod_sbs);
       IF n_cod_sbs IS NULL THEN
          n_codigo_valido := 0;
          n_control := 38;  -- Código SBS informado no es numérico
          n_hay_error := 1;
          arr_error (n_control) := arr_error (n_control) + 1;
          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
       ELSE
          IF n_cod_sbs = 0 THEN
             n_control := 41;  -- Código SBS no informado
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          ELSE
             n_valor := SF_VERIFICA_MOD11 (cur.cod_sbs, 'SBS');
             IF n_valor = FALSE THEN
                n_codigo_valido := 0;
                n_control := 42;  -- Código SBS no cumple módulo 11
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             ELSE
                n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (n_cod_sbs);
                IF n_tip_condicion = 'RPZDO' THEN
                   n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs);
                   IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
                      IF n_cod_sbs_ult_rplzte > 0 THEN
                         n_cod_sbs := n_cod_sbs_ult_rplzte;
                      END IF;
                   END IF;
                END IF;

                n_control := 43;  -- Código SBS no está registrado en la SBS
                BEGIN
                  SELECT cod_actividad_econ, num_ruc, num_ruc11, tip_persona, cod_pais_origen
                    INTO n_cod_actividad_econ, n_num_ruc, n_num_ruc11, n_tip_persona, n_cod_pais
                    FROM CRI_PERSONA
                   WHERE cod_sbs = n_cod_sbs;
                  IF SQL%ROWCOUNT = 0 THEN
                     n_codigo_valido := 0;
                     n_hay_error := 1;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_codigo_valido := 0;
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                END;

                IF n_codigo_valido = 1 THEN
                   IF n_tip_persona = '1' THEN
                      BEGIN
                        SELECT ape_paterno||' '||ape_materno||' '||nom_persona, tip_docto_ident, num_docto_ident
                          INTO n_nom_cliente_maes, n_tip_docto_ident_maes, n_num_docto_ident_maes
                          FROM CRI_PERSONA_NAT
                         WHERE cod_sbs = n_cod_sbs;
                        IF SQL%ROWCOUNT = 0 THEN
                           n_no_encuentra := 1;
                        END IF;
                      EXCEPTION
                         WHEN OTHERS THEN
                              n_no_encuentra := 1;
                      END;
                   END IF;

                   -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
                   IF n_tip_persona IN ('2', '4') THEN
                      BEGIN
                        SELECT nom_razon_social, cod_onrp
                          INTO n_nom_cliente_maes, n_cod_onrp_maes
                          FROM CRI_PERSONA_JUR
                         WHERE cod_sbs = n_cod_sbs;
                        IF SQL%Rowcount = 0 THEN
                           n_no_encuentra := 1;
                        END IF;
                      EXCEPTION
                         WHEN OTHERS THEN
                            n_no_encuentra := 1;
                      END;
                   END IF;

                   IF n_tip_persona = '3' THEN
                      BEGIN
                        SELECT nom_razon_social, tip_docto_ident, num_docto_ident
                          INTO n_nom_cliente_maes, n_tip_docto_ident_maes, n_num_docto_ident_maes
                          FROM CRI_PERSONA_NOID
                         WHERE cod_sbs = n_cod_sbs;
                        IF SQL%ROWCOUNT = 0 THEN
                           n_no_encuentra := 1;
                        END IF;
                      EXCEPTION
                         WHEN OTHERS THEN
                            n_no_encuentra := 1;
                      END;
                   END IF;

                   IF (cur.cod_unico_clie IS NOT NULL) AND (cur.cod_unico_clie NOT IN (' ', '0')) THEN
                      BEGIN
                          n_cod_unico_clie_aux := ' ';
                          SELECT MIN(cod_unico_entidad) INTO n_cod_unico_clie_aux
                            FROM CRI_DEUDOR_XENT
                           WHERE cod_sbs     = n_cod_sbs
                             AND cod_ent_vig = i_codemp;
                          IF SQL%ROWCOUNT != 0 THEN
                             n_control := 51;  -- Codigo unico informado es diferente al registrado en la SBS
                             IF arr_activ (n_control) = 'S' AND n_cod_unico_clie_aux > ' ' THEN
                                IF cur.cod_unico_clie != n_cod_unico_clie_aux THEN
                                   n_codigo_unico_difer := 1;
                                   n_hay_error := 1;
                                   arr_error (n_control) := arr_error (n_control) + 1;
                                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                                END IF;
                             END IF;
                          END IF;
                        EXCEPTION
                           WHEN OTHERS THEN
                              n_no_encuentra := 1;
                        END;
                   END IF;
                END IF;
             END IF;
          END IF;

          IF n_cod_sbs = 0 THEN
             IF (cur.cod_unico_clie IS NOT NULL) AND (cur.cod_unico_clie NOT IN (' ', '0')) THEN
                n_cod_sbs_entidad := 0;
                BEGIN
                   SELECT MIN(cod_sbs) INTO n_cod_sbs_entidad
                      FROM CRI_DEUDOR_XENT
                     WHERE cod_ent_vig = i_codemp
                       AND cod_unico_entidad = cur.cod_unico_clie;
                    IF SQL%ROWCOUNT != 0 THEN
                       n_control := 58;  -- Cliente/Deudor registrado para la entidad y no reportó código SBS
                       IF arr_activ (n_control) = 'S' AND n_cod_sbs_entidad > 0 THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                       END IF;
                    END IF;
                  EXCEPTION
                     WHEN OTHERS THEN
                         n_no_encuentra := 1;
                  END;
             END IF;
          END IF;
       END IF;

--       IF n_codigo_valido = 0 THEN
--          GOTO Lectura;
--       END IF;

/***** Código Unico del Cliente ****/

       IF cur.cod_unico_clie IS NULL OR cur.cod_unico_clie IN (' ', '0') THEN
          n_control := 78;  -- Código Unico no informado
          IF arr_activ (n_control) = 'S' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          END IF;
       ELSE
          n_long_cod_unico := LENGTH(cur.cod_unico_clie);
          n_loop := 1;
          n_blancos := 0;
          FOR n_loop in 1..n_long_cod_unico LOOP
              IF Substr(cur.cod_unico_clie,n_loop,1) = ' ' THEN
                 n_blancos := n_blancos + 1;
              END IF;
          END LOOP;
          IF n_blancos > 0 THEN
             n_control := 102;  -- Codigo Unico no es válido
             IF arr_activ (n_control) = 'S' THEN
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          ELSE
             BEGIN
               n_cod_sbs_entidad := 0;
               SELECT MIN(cod_sbs), ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id, ind_fijo_sunarp, ind_fijo_ciiu3
                 INTO n_cod_sbs_entidad, n_ind_fijo_nombre, n_ind_fijo_ruc, n_ind_fijo_doc_id, n_ind_fijo_sunarp, n_ind_fijo_ciiu3
                 FROM CRI_DEUDOR_XENT
                WHERE cod_ent_vig       = i_codemp
                  AND cod_unico_entidad = cur.cod_unico_clie
                GROUP BY ind_fijo_nombre, ind_fijo_ruc, ind_fijo_doc_id, ind_fijo_sunarp, ind_fijo_ciiu3;
               IF SQL%ROWCOUNT != 0 THEN
                  IF n_cod_sbs_entidad > 0 THEN
                     IF n_cod_sbs = 0 OR n_codigo_valido = 0 THEN
                        n_control := 80;  -- Código Unico existe y no informó el código SBS
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        END IF;
                     ELSE
                        n_control := 79;  -- Codigo Unico esta asignado a otro Cliente/Deudor
                        IF arr_activ (n_control) = 'S' THEN
                           n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (n_cod_sbs_entidad);
                           IF n_tip_condicion = 'RPZDO' THEN
                              n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs_entidad);
                              IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
                                 IF n_cod_sbs_ult_rplzte > 0 THEN
                                    n_cod_sbs_entidad := n_cod_sbs_ult_rplzte;
                                 END IF;
                              END IF;
                           END IF;
                           IF n_cod_sbs_entidad != n_cod_sbs THEN
                              n_hay_error := 1;
                              arr_error (n_control) := arr_error (n_control) + 1;
                              SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                  n_no_encuentra := 1;
             END;
          END IF;
       END IF;

/***** Código CIIU3 (Sector Económico) ****/

       n_control := 76;  -- CIIU3 no informado en Tipo de Persona 2
       IF arr_activ (n_control) = 'S' THEN
          -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
          IF cur.tip_persona IN ('2', '4') THEN
             IF cur.cod_ciiu3 IS NULL OR cur.cod_ciiu3 IN (' ', '0') THEN
--              03.MAR.2003 JLT : "Para el caso de clientes nuevos (personas juridicas) es obligatorio
--              el codigo de CIIU. En caso se trate de un cliente antiguo en el sistema, se tomara el
--              dato de CIIU del maestro de personas".
                IF n_cod_sbs = 0 THEN
--                IF n_ind_fijo_ciiu3 IS NULL THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
--                END IF;
                END IF;
             END IF;
          END IF;
       END IF;

       IF  (cur.cod_ciiu3 IS NOT NULL) AND  cur.cod_ciiu3 > ' ' THEN
            IF (n_cod_actividad_econ IS NOT NULL) AND n_cod_actividad_econ > ' ' THEN
                n_control := 50;  -- Cod CIUU informado es diferente al registrado en la SBS
                IF arr_activ (n_control) = 'S' THEN
                   IF cur.cod_ciiu3 != n_cod_actividad_econ THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                   END IF;
                END IF;
            END IF;

            n_control := 77;  -- CIIU no registrado en la tabla O.N.U.
            IF arr_activ (n_control) = 'S' THEN
               BEGIN
                 SELECT cod_actividad_econ INTO n_cod_act_eco
                   FROM CRA_ACTIVIDAD_ECON
                  WHERE cod_actividad_econ = cur.cod_ciiu3;
                 IF SQL%ROWCOUNT = 0 THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                 END IF;
               EXCEPTION
                 WHEN OTHERS THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
               END;
            END IF;
       END IF;

/***** Codigo SUNARP ****/

       -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
       IF  cur.tip_persona IN ('2', '4') AND cur.tip_residencia = '1' THEN
           IF cur.cod_sunarp IS NULL OR cur.cod_sunarp IN (' ', '0') THEN
              n_control := 72;  -- Codigo ONRP no informado en Tipo de Persona 2
              IF arr_activ (n_control) = 'S' THEN
                 IF n_ind_fijo_sunarp IS NULL THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                 END IF;
              END IF;
           ELSE
              n_control := 75;  -- Código ONRP está asignado a otro Cliente/Deudor
              IF arr_activ (n_control) = 'S' THEN
                 BEGIN
                   n_cod_sbs_sunarp := 0;
                   SELECT MIN(A.cod_sbs) INTO n_cod_sbs_sunarp
                     FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                    WHERE A.cod_onrp       = cur.cod_sunarp
                      AND B.cod_sbs        = A.cod_sbs
                      AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                   IF SQL%Rowcount != 0 THEN
                      IF n_cod_sbs != n_cod_sbs_sunarp AND n_cod_sbs_sunarp > 0 THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                      END IF;
                   END IF;
                 EXCEPTION
                   WHEN OTHERS THEN
                        n_no_encuentra := 1;
                 END;
              END IF;
           END IF;
       ELSE
          n_control := 73;  -- Codigo ONRP no es valido o no corresponde al Tipo de Persona 1 o 3
          IF arr_activ (n_control) = 'S' THEN
             IF (cur.cod_sunarp IS NOT NULL) AND cur.cod_sunarp > ' '
             AND cur.tip_persona IN ('1', '3') THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

       n_control := 74;  -- Codigo ONRP esta duplicado en la SBS
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.cod_sunarp IS NOT NULL) AND cur.cod_sunarp > ' ' THEN
              -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
              IF cur.tip_persona IN ('2', '4') THEN
                 n_cod_sunarp_dup := 0;
                 BEGIN
                   SELECT count(*) INTO n_cod_sunarp_dup
                     FROM CRI_PERSONA_JUR "A",
                          CRI_PERSONA     "B"
                    WHERE A.cod_onrp       = cur.cod_sunarp
                      AND B.cod_sbs        = A.cod_sbs
                      AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                   IF SQL%Rowcount != 0 THEN
                      IF n_cod_sunarp_dup > 1 THEN
                         n_hay_error := 1;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                      END IF;
                   END IF;
                 EXCEPTION
                   WHEN OTHERS THEN
                       n_no_encuentra := 1;
                 END;
              END IF;
          END IF;
       END IF;

/**** Numero de Documento Tributario ****/

       n_control := 45;  -- Codigo RUC informado diferente al registrado en la SBS
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.num_doc_trib IS NOT NULL) AND  cur.num_doc_trib > ' ' AND (cur.num_doc_trib NOT IN ('0', '00000000000')) THEN
               IF cur.tip_doc_trib = '3' THEN
                  IF cur.num_doc_trib != n_num_ruc11 AND n_num_ruc11 > ' ' AND (n_num_ruc11 IS NOT NULL) THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                      n_ruc_iguales_u_omit := 1;
                  END IF;
               ELSE
                  IF cur.num_doc_trib != n_num_ruc AND n_num_ruc > ' ' AND (n_num_ruc IS NOT NULL) THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                      n_ruc_iguales_u_omit := 1;
                  END IF;
               END IF;
          END IF;
       END IF;

--     12.ABR.2002 JLT :
--     "Para el caso de clientes nuevos es obligatorio validar estrictamente el numero de R.U.C.".
--     "En caso se trate de un cliente antiguo en el sistema con calificacion de riesgo '4' (Perdida),
--      se tomara el dato numero de R.U.C. del maestro de personas".
--     (Reunion de la Comision de Criterios de Aceptacion del R.C.D. del 12.ABR.2002).
       n_control := 54;  -- RUC no es válido, no cumple módulo 11 ó tipo de doc. no corresp. a doc.tributario
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.num_doc_trib IS NOT NULL) AND  cur.num_doc_trib > ' ' AND  cur.num_doc_trib != '00000000000' THEN
               IF cur.tip_doc_trib = '3' THEN
                  IF LENGTH(cur.num_doc_trib) != 11 THEN
                     IF n_cod_sbs > 0 THEN
                        n_hay_error := 1;
                        arr_error (n_control) := arr_error (n_control) + 1;
                        SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                     ELSE
                        IF cur.tip_clasif_clie != '4' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        END IF;
                     END IF;
                  ELSE
                     n_valor := SF_VERIFICA_MOD11 (cur.num_doc_trib, 'RUC');
                     IF n_valor = FALSE THEN
                        IF n_cod_sbs > 0 THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        ELSE
                           IF cur.tip_clasif_clie != '4' THEN
                              n_hay_error := 1;
                              arr_error (n_control) := arr_error (n_control) + 1;
                              SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END IF;
               IF cur.tip_doc_trib = '2' THEN
                  IF LENGTH(cur.num_doc_trib) != 8 THEN
                     IF n_cod_sbs > 0 THEN
                        n_hay_error := 1;
                        arr_error (n_control) := arr_error (n_control) + 1;
                        SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                     ELSE
                        IF cur.tip_clasif_clie != '4' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        END IF;
                     END IF;
                  ELSE
                     n_valor := SF_VERIFICA_MOD11 (cur.num_doc_trib, 'RUC');
                     IF n_valor = FALSE THEN
                        IF n_cod_sbs > 0 THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        ELSE
                           IF cur.tip_clasif_clie != '4' THEN
                              n_hay_error := 1;
                              arr_error (n_control) := arr_error (n_control) + 1;
                              SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END IF;
          END IF;
       END IF;

       n_control := 53;  -- RUC no informado en personas juridicas
       IF arr_activ (n_control) = 'S' THEN
          -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
          IF cur.tip_persona IN ('2', '4') AND cur.tip_residencia = '1' THEN
              IF cur.num_doc_trib IS NULL
              OR cur.num_doc_trib IN (' ', '0') THEN
                 IF n_ind_fijo_ruc IS NULL THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                 END IF;
              END IF;
          END IF;
       END IF;

       n_control := 103;  -- RUC no informado en personas naturales
       IF arr_activ (n_control) = 'S' THEN
          IF cur.tip_persona = '1' THEN
             IF cur.num_doc_trib IS NULL OR cur.num_doc_trib IN (' ', '0') THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

       n_control := 57;  -- RUC esta asignado a otro Cliente/Deudor
       IF arr_activ (n_control) = 'S' THEN
          IF n_cod_sbs > 0 THEN
             IF (cur.num_doc_trib IS NOT NULL) AND cur.num_doc_trib > ' ' AND cur.num_doc_trib != '00000000000' THEN
                 IF cur.tip_doc_trib = '3' THEN

                    IF cur.tip_persona = '1' THEN
                       n_no_encuentra  := 0;
                       n_cod_sbs_ruc11 := 0;
                       BEGIN
                         SELECT MIN(A.cod_sbs), A.tip_condicion
                           INTO n_cod_sbs_ruc11, n_tip_condicion
                           FROM CRI_PERSONA A, CRI_PERSONA_NAT B
                          WHERE A.num_ruc11 = cur.num_doc_trib
                            AND B.cod_sbs   = A.cod_sbs
                          GROUP BY A.tip_condicion;
                         IF SQL%ROWCOUNT != 0 THEN
                            IF n_cod_sbs_ruc11 > 0 THEN
                               IF n_tip_condicion = 'RPZDO' THEN
                                  n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs_ruc11);
                                  IF n_cod_sbs_ult_rplzte > 0 THEN
                                     n_cod_sbs_ruc11 := n_cod_sbs_ult_rplzte;
                                  END IF;
                               END IF;
                               IF n_cod_sbs != n_cod_sbs_ruc11 THEN
                                  n_hay_error := 1;
                                  arr_error (n_control) := arr_error (n_control) + 1;
                                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                               END IF;
                            END IF;
                         END IF;
                       EXCEPTION
                         WHEN OTHERS THEN
                            n_no_encuentra := 1;
                       END;
                    END IF;

                    -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
                    IF cur.tip_persona IN ('2', '4') THEN
                       n_no_encuentra  := 0;
                       n_cod_sbs_ruc11 := 0;
                       BEGIN
                         SELECT MIN(A.cod_sbs), A.tip_condicion
                           INTO n_cod_sbs_ruc11, n_tip_condicion
                           FROM CRI_PERSONA A, CRI_PERSONA_JUR B
                          WHERE A.num_ruc11 = cur.num_doc_trib
                            AND B.cod_sbs   = A.cod_sbs
                          GROUP BY A.tip_condicion;
                         IF SQL%ROWCOUNT != 0 THEN
                            IF n_cod_sbs_ruc11 > 0 THEN
                               IF n_tip_condicion = 'RPZDO' THEN
                                  n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs_ruc11);
                                  IF n_cod_sbs_ult_rplzte > 0 THEN
                                     n_cod_sbs_ruc11 := n_cod_sbs_ult_rplzte;
                                  END IF;
                               END IF;
                               IF n_cod_sbs != n_cod_sbs_ruc11 THEN
                                  n_hay_error := 1;
                                  arr_error (n_control) := arr_error (n_control) + 1;
                                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                               END IF;
                            END IF;
                         END IF;
                       EXCEPTION
                         WHEN OTHERS THEN
                              n_no_encuentra := 1;
                       END;
                    END IF;

                    IF cur.tip_persona = '3' THEN
                       n_no_encuentra  := 0;
                       n_cod_sbs_ruc11 := 0;
                       BEGIN
                         SELECT MIN(A.cod_sbs), A.tip_condicion
                           INTO n_cod_sbs_ruc11, n_tip_condicion
                           FROM CRI_PERSONA A, CRI_PERSONA_NOID B
                          WHERE A.num_ruc11 = cur.num_doc_trib
                            AND B.cod_sbs   = A.cod_sbs
                          GROUP BY A.tip_condicion;
                         IF SQL%ROWCOUNT != 0 THEN
                            IF n_cod_sbs_ruc11 > 0 THEN
                               IF n_tip_condicion = 'RPZDO' THEN
                                  n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs_ruc11);
                                  IF n_cod_sbs_ult_rplzte > 0 THEN
                                     n_cod_sbs_ruc11 := n_cod_sbs_ult_rplzte;
                                  END IF;
                               END IF;
                               IF n_cod_sbs != n_cod_sbs_ruc11 THEN
                                  n_hay_error := 1;
                                  arr_error (n_control) := arr_error (n_control) + 1;
                                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                               END IF;
                            END IF;
                         END IF;
                       EXCEPTION
                         WHEN OTHERS THEN
                              n_no_encuentra := 1;
                       END;
                    END IF;
                 END IF;
--
                 IF cur.tip_doc_trib = '2' THEN
                    n_no_encuentra := 0;
                    n_cod_sbs_ruc8 := 0;
                    BEGIN
                      SELECT MIN(cod_sbs), tip_condicion
                        INTO n_cod_sbs_ruc8, n_tip_condicion
                        FROM CRI_PERSONA
                       WHERE num_ruc = cur.num_doc_trib
                       GROUP BY tip_condicion;
                      IF SQL%ROWCOUNT != 0 THEN
                         IF n_cod_sbs_ruc8 > 0 THEN
                            IF n_tip_condicion = 'RPZDO' THEN
                               n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (n_cod_sbs_ruc8);
                               IF n_cod_sbs_ult_rplzte > 0 THEN
                                  n_cod_sbs_ruc8 := n_cod_sbs_ult_rplzte;
                               END IF;
                            END IF;
                            IF n_cod_sbs != n_cod_sbs_ruc8 THEN
                               n_hay_error := 1;
                               arr_error (n_control) := arr_error (n_control) + 1;
                               SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                            END IF;
                         END IF;
                      END IF;
                    EXCEPTION
                      WHEN OTHERS THEN
                           n_no_encuentra := 1;
                    END;
                 END IF;
             END IF;
          END IF;
       END IF;

       n_control := 109;  -- RUC no es valido para el tipo de persona
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.num_doc_trib IS NOT NULL) AND cur.num_doc_trib > ' ' AND cur.num_doc_trib != '00000000000' THEN
              IF cur.tip_doc_trib = '3' THEN
                 -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
                 IF cur.tip_persona IN ('2', '4') THEN
                    IF Substr(cur.num_doc_trib,1,2) = '10' THEN
--                    OR Substr(cur.num_doc_trib,1,2) = '15' THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                    END IF;
                 END IF;
                 IF cur.tip_persona IN ('1', '3') THEN
                    IF Substr(cur.num_doc_trib,1,2) = '20' THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                    END IF;
                 END IF;
              END IF;
          END IF;
       END IF;

       n_control := 56;  -- RUC esta duplicado en la SBS
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.tip_doc_trib IS NOT NULL) AND (cur.num_doc_trib IS NOT NULL) AND
             cur.tip_doc_trib > ' ' AND  cur.num_doc_trib > ' ' AND cur.num_doc_trib != '00000000000' THEN
             IF cur.tip_doc_trib = '2' THEN
                  n_num_doc_trib_dup := 0;
                  BEGIN
                    SELECT count(*) INTO n_num_doc_trib_dup
                      FROM CRI_PERSONA
                     WHERE num_ruc = cur.num_doc_trib
                       AND (tip_condicion != 'RPZDO' OR tip_condicion IS NULL);
                    IF SQL%Rowcount != 0 THEN
                       IF n_num_doc_trib_dup > 1 THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                       END IF;
                    END IF;
                  EXCEPTION
                    WHEN OTHERS THEN
                         n_no_encuentra := 1;
                  END;
               END IF;

               IF cur.tip_doc_trib = '3' THEN
                  n_num_doc_trib_dup := 0;
                  BEGIN
                    SELECT count(*) INTO n_num_doc_trib_dup
                      FROM CRI_PERSONA
                     WHERE num_ruc11 = cur.num_doc_trib
                       AND (tip_condicion != 'RPZDO' OR tip_condicion IS NULL);
                    IF SQL%Rowcount != 0 THEN
                       IF n_num_doc_trib_dup > 1 THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                       END IF;
                    END IF;
                  EXCEPTION
                    WHEN OTHERS THEN
                         n_no_encuentra := 1;
                  END;
               END IF;
          END IF;
       END IF;

--     JCFS 12/08/2011: Se agrega validación del RUC en la BD de SUNAT
--     RUC no existe en el maestro de contribuyentes de la SUNAT
       n_rc := 0;
       n_control := 82;
       IF arr_activ (n_control) = 'S' THEN
          IF nvl(cur.tip_doc_trib, ' ') = '3' THEN  -- Solo se valida si se reporta el RUC de 11 dígitos
             n_rc := sf_valida_control_82 ( cur.num_doc_trib );
             IF n_rc <> 1 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             ELSE
                -- JCFS 08/09/2011: Se agrega validación de la Razón Social en la BD de SUNAT
                -- El RUC informado existe en el maestro de contribuyentes de la SUNAT pero la Razón Social informada no es la misma.
                n_rc := 0;
                n_control := 83;
                IF arr_activ (n_control) = 'S' THEN
                   n_rc := sf_valida_control_83 ( cur.num_doc_trib, cur.nom_cliente );
                   IF n_rc <> 1 THEN
                      n_hay_error := 1;
                      arr_error (n_control) := arr_error (n_control) + 1;
                      SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                   END IF;
                END IF;
             END IF;
          END IF;
       END IF;


/**** Tipo de Documento de Identificacion ****/

       n_control := 67;  -- Tipo de Doc. de identidad no es del 1 al 5 (en Persona 1 ó 3)
       IF arr_activ (n_control) = 'S' THEN
          IF cur.tip_persona > ' ' AND cur.tip_persona IN ('1', '3') THEN
-- 22 SET 2003 (JLT) Se incluye tipo de documento '9'
--              IF (cur.tip_doc_iden NOT IN ('1', '2', '3', '4', '5'))
-- JCFS 21/07/2010: Se retira el Tipo de Documento de Identidad 9 - RES 11356
--              IF cur.tip_doc_iden NOT IN ('1', '2', '3', '4', '5', '9') THEN
              IF (cur.tip_doc_iden NOT IN ('1', '2', '3', '4', '5')) THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
              END IF;
          END IF;
       END IF;

/**** Numero de Documento de Identificacion ****/

       n_control := 68;  -- Documento de identidad no informado en Persona 1 ó 3
       IF arr_activ (n_control) = 'S' THEN
          IF cur.tip_persona IN ('1', '3') THEN
             IF cur.num_doc_iden IS NULL OR cur.num_doc_iden IN (' ', '0') THEN
                IF n_ind_fijo_doc_id IS NULL THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                END IF;
             END IF;
          END IF;
       END IF;

       n_control := 69;  -- Documento de identidad no es valido o no corresp. al tipo de persona 2
       IF arr_activ (n_control) = 'S' THEN
          -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
          IF cur.tip_persona IN ('2', '4') AND (cur.num_doc_iden IS NOT NULL) AND cur.num_doc_iden > ' ' THEN
               n_hay_error := 1;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          END IF;
          IF cur.tip_persona IN ('1', '3') THEN
             IF cur.tip_doc_iden = '1' AND LENGTH(cur.num_doc_iden) != 8 THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

       n_control := 70;  -- Documento de identidad esta duplicado en la SBS
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.tip_doc_iden IS NOT NULL) AND (cur.num_doc_iden IS NOT NULL) AND
             cur.tip_doc_iden > ' ' AND  cur.num_doc_iden > ' ' THEN
               IF cur.tip_persona = '1' THEN
                  n_num_doc_iden_dup := 0;
                  BEGIN
                    SELECT count(*) INTO n_num_doc_iden_dup
                      FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                     WHERE A.tip_docto_ident = cur.tip_doc_iden
                       AND A.num_docto_ident = cur.num_doc_iden
--                     WHERE A.tip_docto_ident > ''
                       AND B.cod_sbs         = A.cod_sbs
                       AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                    IF SQL%Rowcount != 0 THEN
                       IF n_num_doc_iden_dup > 1 THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                       END IF;
                    END IF;
                  EXCEPTION
                    WHEN OTHERS THEN
                         n_no_encuentra := 1;
                  END;
               END IF;

               IF cur.tip_persona = '3' THEN
                  n_num_doc_iden_dup := 0;
                  BEGIN
                    SELECT count(1) INTO n_num_doc_iden_dup
                      FROM CRI_PERSONA_NOID A, CRI_PERSONA B
                     WHERE A.tip_docto_ident = cur.tip_doc_iden
                       AND A.num_docto_ident = cur.num_doc_iden
--                     WHERE A.tip_docto_ident > ''
                       AND A.num_docto_ident = cur.num_doc_iden
                       AND B.cod_sbs         = A.cod_sbs
                       AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                    IF SQL%Rowcount != 0 THEN
                       IF n_num_doc_iden_dup > 1 THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                       END IF;
                    END IF;
                  EXCEPTION
                    WHEN OTHERS THEN
                         n_no_encuentra := 1;
                  END;
               END IF;
          END IF;
       END IF;

       n_control := 71;  -- Documento de identidad esta asignado a otro Cliente/Deudor.
       IF arr_activ (n_control) = 'S' THEN
          IF  n_cod_sbs > 0 AND cur.tip_persona IN ('1', '3') THEN
              IF (cur.num_doc_iden IS NOT NULL) AND cur.num_doc_iden > ' ' AND
-- 22 SET 2003 (JLT) Se incluye tipo de documento '9'
--              AND (cur.tip_doc_iden NOT IN ('1', '2', '3', '4', '5'))
-- JCFS 21/07/2010: Se retira el Tipo de Documento de Identidad 9 - RES 11356
--              AND cur.tip_doc_iden IN ('1', '2', '3', '4', '5', '9') THEN
                 (cur.tip_doc_iden NOT IN ('1', '2', '3', '4', '5')) THEN
                  IF cur.tip_persona = '1' THEN
                     n_cod_sbs_nat := 0;
                     BEGIN
                      SELECT MIN(A.cod_sbs) INTO n_cod_sbs_nat
                        FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                       WHERE A.tip_docto_ident = cur.tip_doc_iden
                         AND A.num_docto_ident = cur.num_doc_iden
                         AND B.cod_sbs       = A.cod_sbs
                         AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                      IF SQL%ROWCOUNT != 0 THEN
                         IF  n_cod_sbs != n_cod_sbs_nat AND n_cod_sbs_nat > 0 THEN
                             n_hay_error := 1;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                         END IF;
                      END IF;
                     EXCEPTION
                       WHEN OTHERS THEN
                            n_no_encuentra := 1;
                     END;
                  ELSE
                    n_cod_sbs_man := 0;
                    BEGIN
                      SELECT MIN(A.cod_sbs) INTO n_cod_sbs_man
                        FROM CRI_PERSONA_NOID A, CRI_PERSONA B
                       WHERE A.tip_docto_ident = cur.tip_doc_iden
                         AND A.num_docto_ident = cur.num_doc_iden
                         AND B.cod_sbs         = A.cod_sbs
                         AND (B.tip_condicion  != 'RPZDO' OR B.tip_condicion IS NULL);
                      IF SQL%ROWCOUNT != 0 THEN
                         IF  n_cod_sbs != n_cod_sbs_man AND n_cod_sbs_man > 0 THEN
                             n_hay_error := 1;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                         END IF;
                      END IF;
                    EXCEPTION
                      WHEN OTHERS THEN
                           n_no_encuentra := 1;
                    END;
                  END IF;
              END IF;
          END IF;
       END IF;

/**** Cliente/Deudor informado sin residencia y tiene documentos de residente ****/

       n_control := 44;
       IF arr_activ (n_control) = 'S' THEN

          -- JCFS 08/07/2011: Se modifica el Control para que solo se active en el caso de Tipo de Residencia 4
          IF cur.tip_residencia = '4' AND
--          AND cur.tip_doc_iden IN ('1', '3', '4')
             (cur.num_doc_iden > ' ' OR cur.num_doc_trib > ' ' OR cur.cod_sunarp   > ' ') THEN
               n_hay_error := 1;
               arr_error (n_control) := arr_error (n_control) + 1;
               SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          END IF;
       END IF;

/**** Relacion Laboral no es valida o no corresp. al Tipo de Persona 2 o 3 ****/

       n_control := 92;
       IF arr_activ (n_control) = 'S' THEN
          -- JCFS 21/07/2010: Se agrega el Tipo de Relación Laboral 5 - RES 11356
          IF (cur.tip_rellab NOT IN ('0', '1', '2', '3', '4', '5')) OR (cur.tip_rellab IS NULL) THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          ELSE
             -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
             IF cur.tip_persona IN ('2', '3', '4') AND cur.tip_rellab  IN ('1', '2', '3', '4') THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

/**** Codigo de Pais ****/

       n_control := 106;  -- Código de país no informado
       IF arr_activ (n_control) = 'S' THEN
          IF cur.cod_pais IS NULL OR cur.cod_pais IN (' ', '0') THEN
--           12.ABR.2002 JLT : "Para el caso de clientes nuevos es obligatorio el codigo de pais".
--           "En caso se trate de un cliente antiguo en el sistema, se tomara el dato de codigo de pais
--           del maestro de personas".
--           (Reunion de la Comision de Criterios de Aceptacion del R.C.D. del 12.ABR.2002).
             IF n_cod_sbs = 0 THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

       n_control := 107;  -- Código de país no existe en la tabla de paises
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.cod_pais IS NOT NULL) AND cur.cod_pais > ' ' THEN
             -- JCFS 21/07/2010: Se reemplaza la tabla COD_PAIS_INEI por COD_PAIS_ISO3166 en el query a la tabla ADM_ELEMENTO
             -- JCFS 03/08/2010: Se reemplaza la llamada al query por una búsqueda en la Tabla Indexada (cargada en el Proceso de Validación del RTC) */
             IF NOT colInxAdmElemento.EXISTS(ltrim(rtrim(cur.cod_pais))) THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

       n_control := 108;  -- Tipo de documento de identidad no guarda relación con el código de país
       IF arr_activ (n_control) = 'S' THEN   -- AND n_cod_sbs > 0 THEN
          -- JCFS 17/05/2010: Se reemmplaza el código 4028 por PE y se elimina el 9 de los Tipos de Documento
          IF ltrim(rtrim(cur.cod_pais)) = 'PE' THEN
--            14.MAR.2002 (JLT) Queda sin efecto
--            IF cur.tip_residencia = '0' OR cur.tip_doc_iden IN ('2', '5') THEN
-- 22 SET 2003 (JLT) Se incluye tipo de documento '9'
--              IF cur.tip_doc_iden IN ('2', '5', '9')
              IF cur.tip_doc_iden IN ('2', '5') THEN
                 IF n_cod_sbs = 0 THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                 ELSE
                    IF rtrim(ltrim(n_cod_pais)) <> 'PE' THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                    END IF;
                 END IF;
              END IF;
           ELSE
--            14.MAR.2002 (JLT) Queda sin efecto
--            IF cur.tip_residencia = '1'
--            OR cur.tip_doc_iden IN ('1', '3', '4') THEN
              IF cur.tip_doc_iden IN ('1', '3', '4') THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
              END IF;
/*
              IF   cur.tip_persona = '2'
              AND (cur.num_doc_trib IS NOT NULL)
              AND  cur.num_doc_trib > ' ' THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
              END IF;
*/
           END IF;
       END IF;

/**** Siglas de la Persona Juridica ****/

       n_control := 64;  -- Sigla no válida o no corresponde al Tipo de Persona 2
       IF arr_activ (n_control) = 'S' THEN
          IF cur.tip_persona in ('1', '3') AND (cur.nom_sigla IS NOT NULL) AND cur.nom_sigla > ' ' THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          END IF;
       END IF;

       IF arr_activ (65) = 'S' OR arr_activ (66) = 'S' THEN
          -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
          IF (cur.nom_sigla IS NOT NULL) AND cur.nom_sigla > ' ' AND
             cur.tip_persona IN ('2', '4') THEN
              n_cod_sbs_sigla_dup := 0;
              BEGIN
                SELECT count(*) INTO n_cod_sbs_sigla_dup
                  FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                 WHERE A.des_siglas = cur.nom_sigla
                   AND B.cod_sbs         = A.cod_sbs
                   AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                IF SQL%Rowcount != 0 THEN
                   IF n_cod_sbs_sigla_dup > 1 THEN
                      IF arr_activ (65) = 'S' THEN
                         n_control := 65;  -- Sigla está duplicada en la SBS
                         IF arr_activ (n_control) = 'S' THEN
                            n_hay_error := 1;
                            arr_error (n_control) := arr_error (n_control) + 1;
                            SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                         END IF;
                      END IF;
                   ELSE
                      IF arr_activ (66) = 'S' THEN
                         -- JCFS 21/07/2010: Faltaba la siguiente línea (No se asignaba el número del control a la variable)
                         n_control := 66;  -- Sigla asignada a otro Cliente/Deudor en la SBS
                         n_cod_sbs_sigla := 0;
                         BEGIN
                           SELECT MIN(A.cod_sbs) INTO n_cod_sbs_sigla
                             FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                            WHERE A.des_siglas    = cur.nom_sigla
                              AND B.cod_sbs       = A.cod_sbs
                              AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                           IF SQL%Rowcount != 0 THEN
                              IF n_cod_sbs != n_cod_sbs_sigla AND n_cod_sbs_sigla > 0 THEN
                                  n_hay_error := 1;
                                  arr_error (n_control) := arr_error (n_control) + 1;
                                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                              END IF;
                           END IF;
                         EXCEPTION
                           WHEN OTHERS THEN
                                n_no_encuentra := 1;
                         END;
                      END IF;
                   END IF;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                     n_no_encuentra := 1;
              END;
          END IF;
       END IF;

--     n_long_nom_sigla := LENGTH(cur.nom_sigla);
--     n_nom_sigla_len  := Ltrim(Rtrim(Substr(cur.nom_sigla,1,n_long_nom_sigla)));
--     WHERE Ltrim(Rtrim(Substr(des_siglas,1,n_long_nom_sigla))) = Ltrim(Rtrim(Substr(cur.nom_sigla,1,n_long_nom_sigla)));

       -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
       IF cur.tip_persona IN ('2', '4') AND n_cod_sbs > 0 THEN
           n_nom_sigla := ' ';
           BEGIN
             SELECT des_siglas INTO n_nom_sigla
               FROM CRI_PERSONA_JUR
              WHERE cod_sbs = n_cod_sbs;
             IF SQL%Rowcount != 0 THEN
                IF (n_nom_sigla IS NOT NULL) AND n_nom_sigla > ' ' THEN
                    IF cur.nom_sigla > ' ' THEN
                       n_control := 47;  -- Sigla informada es diferente a la registrada en la SBS
                       IF arr_activ (n_control) = 'S' THEN
                          IF cur.nom_sigla != n_nom_sigla THEN
                             n_hay_error := 1;
                             arr_error (n_control) := arr_error (n_control) + 1;
                             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                          END IF;
                       END IF;
                    ELSE
                       n_control := 63;  -- Sigla no ha sido informada existiendo en la SBS
                       IF arr_activ (n_control) = 'S' THEN
                          n_hay_error := 1;
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                       END IF;
                    END IF;
                END IF;
             END IF;
           EXCEPTION
             WHEN OTHERS THEN
                  n_no_encuentra := 1;
           END;
       END IF;

/**** Nombre del Cliente ****/

       n_control := 59;  -- Nombre del Cliente/Deudor no ha sido informado
       IF arr_activ (n_control) = 'S' THEN
          IF cur.nom_cliente IS NULL OR cur.nom_cliente IN (' ') THEN
             n_hay_error := 1;
             arr_error (n_control) := arr_error (n_control) + 1;
             SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
          ELSE
             n_control := 60;  -- Nombre con caracteres no válidos o más de un blanco entre palabras
             IF arr_activ (n_control) = 'S' AND n_cod_sbs = 0 THEN
                n_rc := sf_valida_control_60 ( n_cod_sbs, cur.tip_persona, cur.nom_cliente,  'RTC' );
                IF n_rc <> 1 THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                END IF;
             END IF;
          END IF;
       END IF;

       n_control := 104;  -- Persona natural con menos de 3 palabras en el nombre y no sustentado
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.nom_cliente IS NOT NULL) AND cur.nom_cliente > ' ' AND cur.tip_persona = '1' AND
             Substr(cur.nom_cliente,2,2) IN ('', '  ') THEN
               IF n_ind_fijo_nombre IS NULL THEN
                  n_hay_error := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
               END IF;
          END IF;
       END IF;

       n_control := 105;  -- Personas mancomunadas con menos de 5 palabras en el nombre y no sustentado
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.nom_cliente IS NOT NULL) AND cur.nom_cliente > ' ' AND cur.tip_persona = '3' AND
             Substr(cur.nom_cliente,4,2) IN ('', '  ') THEN
               IF n_ind_fijo_nombre IS NULL THEN
                  n_hay_error := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
               END IF;
          END IF;
       END IF;

       n_control := 46;  -- Nombre del Cliente/Deudor informado es diferente al registrado en la SBS
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.nom_cliente_C IS NOT NULL) AND (n_nom_cliente_maes IS NOT NULL) AND
             cur.nom_cliente_C > ' ' AND n_nom_cliente_maes > ' ' THEN
               IF cur.nom_cliente_C != n_nom_cliente_maes THEN
                  n_hay_error := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
               END IF;
          END IF;
       END IF;

       IF arr_activ (61) = 'S' OR arr_activ (62) = 'S' THEN
          IF (cur.nom_cliente IS NOT NULL) AND cur.nom_cliente > ' ' THEN
             IF cur.tip_persona = '1' THEN
                n_cod_sbs_nombre_dup := 0;
                BEGIN
                  SELECT count(*) INTO n_cod_sbs_nombre_dup
                    FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                   WHERE A.ape_paterno||' '||A.ape_materno||' '||A.nom_persona = cur.nom_cliente
                     AND A.ape_paterno LIKE SUBSTR(cur.nom_cliente, 1, instr(cur.nom_cliente,' ',1) - 1)||'%'
                     AND B.cod_sbs         = A.cod_sbs
                     AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                  IF SQL%Rowcount != 0 THEN
                     IF n_cod_sbs_nombre_dup > 1 THEN
                        n_control := 61;  -- Nombre del Cliente/Deudor esta duplicado en la SBS
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        END IF;
                     ELSE
                        n_control := 62;  -- Nombre esta asignado a otro Cliente/Deudor
                        IF n_cod_sbs > 0 AND arr_activ (n_control) = 'S' THEN
                            n_cod_sbs_nom_cliente := 0;
                            BEGIN
                              SELECT A.cod_sbs INTO n_cod_sbs_nom_cliente
                                FROM CRI_PERSONA_NAT A, CRI_PERSONA B
                               WHERE A.ape_paterno||' '||A.ape_materno||' '||A.nom_persona = cur.nom_cliente
                                 AND A.ape_paterno LIKE SUBSTR(cur.nom_cliente, 1, instr(cur.nom_cliente,' ',1) - 1)||'%'
                                 AND B.cod_sbs        = A.cod_sbs
                                 AND (B.tip_condicion != 'RPZDO' OR B.tip_condicion IS NULL);
                              IF SQL%Rowcount != 0 THEN
                                 IF n_cod_sbs != n_cod_sbs_nom_cliente THEN
                                    n_hay_error := 1;
                                    arr_error (n_control) := arr_error (n_control) + 1;
                                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                                 END IF;
                              END IF;
                            EXCEPTION
                               WHEN OTHERS THEN
                                    n_no_encuentra := 1;
                            END;
                        END IF;
                     END IF;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_no_encuentra := 1;
                END;
             END IF;

             -- JCFS 21/07/2010: Se agrega el Tipo de Persona 4 - RES 11356
             IF cur.tip_persona IN ('2', '4') THEN
                n_cod_sbs_nombre_dup := 0;
                BEGIN
                  SELECT count(1) INTO n_cod_sbs_nombre_dup
                    FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                   WHERE A.nom_razon_social = cur.nom_cliente
                     AND B.cod_sbs          = A.cod_sbs
                     AND (B.tip_condicion   != 'RPZDO' OR B.tip_condicion IS NULL);
                  IF SQL%Rowcount != 0 THEN
                     IF n_cod_sbs_nombre_dup > 1 THEN
                        n_control := 61;  -- Nombre del Cliente/Deudor está duplicado en la SBS
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        END IF;
                     ELSE
                        n_control := 62;  -- Nombre esta asignado a otro Cliente/Deudor
                        IF n_cod_sbs > 0 AND arr_activ (n_control) = 'S' THEN
                            n_cod_sbs_nom_cliente := 0;
                            BEGIN
                              SELECT A.cod_sbs INTO n_cod_sbs_nom_cliente
                                FROM CRI_PERSONA_JUR A, CRI_PERSONA B
                               WHERE A.nom_razon_social = cur.nom_cliente
                                 AND B.cod_sbs          = A.cod_sbs
                                 AND (B.tip_condicion   != 'RPZDO' OR B.tip_condicion IS NULL);
                              IF SQL%Rowcount != 0 THEN
                                 IF n_cod_sbs != n_cod_sbs_nom_cliente AND n_cod_sbs_nom_cliente > 0 THEN
                                     n_hay_error := 1;
                                     arr_error (n_control) := arr_error (n_control) + 1;
                                     SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                                 END IF;
                              END IF;
                            EXCEPTION
                               WHEN OTHERS THEN
                                   n_no_encuentra := 1;
                            END;
                        END IF;
                     END IF;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                      n_no_encuentra := 1;
                END;
             END IF;

             IF cur.tip_persona = '3' THEN
                n_cod_sbs_nombre_dup := 0;
                BEGIN
                  SELECT count(*) INTO n_cod_sbs_nombre_dup
                    FROM CRI_PERSONA_NOID A, CRI_PERSONA B
                   WHERE A.nom_razon_social = cur.nom_cliente
                     AND B.cod_sbs          = A.cod_sbs
                     AND (B.tip_condicion   != 'RPZDO' OR B.tip_condicion IS NULL);
                  IF SQL%Rowcount != 0 THEN
                     IF n_cod_sbs_nombre_dup > 1 THEN
                        n_control := 61;  -- Nombre del Cliente/Deudor está duplicado en la SBS
                        IF arr_activ (n_control) = 'S' THEN
                           n_hay_error := 1;
                           arr_error (n_control) := arr_error (n_control) + 1;
                           SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                        END IF;
                     ELSE
                        n_control := 62;  -- Nombre esta asignado a otro Cliente/Deudor
                        IF  n_cod_sbs > 0 AND arr_activ (n_control) = 'S' THEN
                            n_cod_sbs_nom_cliente := 0;
                            BEGIN
                              SELECT A.cod_sbs INTO n_cod_sbs_nom_cliente
                                FROM CRI_PERSONA_NOID A, CRI_PERSONA B
                               WHERE A.nom_razon_social = cur.nom_cliente
                                 AND B.cod_sbs          = A.cod_sbs
                                 AND (B.tip_condicion   != 'RPZDO' OR B.tip_condicion IS NULL);
                              IF SQL%Rowcount != 0 THEN
                                 IF n_cod_sbs != n_cod_sbs_nom_cliente AND n_cod_sbs_nom_cliente > 0 THEN
                                     n_hay_error := 1;
                                     arr_error (n_control) := arr_error (n_control) + 1;
                                     SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                                 END IF;
                              END IF;
                            EXCEPTION
                               WHEN OTHERS THEN
                                    n_no_encuentra := 1;
                            END;
                        END IF;
                     END IF;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_no_encuentra := 1;
                END;
             END IF;
          END IF;
       END IF;

/**** Documento de Identidad ****/

       n_control := 48;  -- Doc. de identidad informado es diferente al registro en la SBS
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.tip_doc_iden IS NOT NULL) AND (cur.num_doc_iden IS NOT NULL) AND
             cur.tip_doc_iden > ' ' AND cur.num_doc_iden > ' ' THEN
--             Esta es la comparacion correcta (con tipo y numero de documento)
--               IF (cur.tip_doc_iden != n_tip_docto_ident_maes)
--               OR (cur.num_doc_iden != n_num_docto_ident_maes) THEN
               IF (cur.num_doc_iden != n_num_docto_ident_maes) THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
               END IF;
          END IF;
       END IF;

/**** Codigo ONRP ****/

       n_control := 49;  -- Codigo ONRP informado es diferente al registrado en la SBS
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.cod_sunarp IS NOT NULL) AND cur.cod_sunarp > ' ' THEN
             IF cur.cod_sunarp != n_cod_onrp_maes THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

/**** Sexo ****/

       IF cur.sexo > ' ' THEN
          n_control := 144;  -- Sexo informado no es F o M
          IF arr_activ (n_control) = 'S' THEN
             IF cur.sexo NOT IN ('F', 'M') THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

/**** Estado Civil ****/

       n_control := 165;  -- Estado civil no informado en tipo de persona 1
       IF arr_activ (n_control) = 'S' THEN
          IF cur.tip_persona = '1' THEN
             IF cur.est_civil = ' '
             OR cur.est_civil IS NULL THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

       n_control := 143;  -- Estado civil no es S, C, D, V, O
       IF arr_activ (n_control) = 'S' THEN
          IF cur.tip_persona = '1' THEN
             -- JCFS 14/09/2011: Se elimina el valor 'O' (Conviviente) que no es válido
             IF cur.est_civil NOT IN ('S', 'C', 'D', 'V') THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;
       END IF;

/**** Fecha de nacimiento ****/

       n_control := 161;  -- Fecha de nacimiento no informada
       IF cur.tip_persona = '1' AND cur.fec_nac IS NULL AND arr_activ (n_control) = 'S' THEN
          n_hay_error := 1;
          arr_error (n_control) := arr_error (n_control) + 1;
          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
       END IF;

/**** Ubigeo ****/

       n_control := 168;  -- Ubigeo de la dirección no informado
       IF arr_activ (n_control) = 'S' THEN
          IF (cur.cod_dir_ubigeo IS NULL) OR (cur.cod_dir_ubigeo IN (' ')) THEN
              n_repor_motiv     := SF_OBT_REPORTE_Y_MOTIVO (i_anopro, i_mespro, i_codemp, cur.num_sec_reg, 1);
              n_tip_reporte_inf := SUBSTR(n_repor_motiv,1,2);
              n_motivo_anul_inf := SUBSTR(n_repor_motiv,3,1);
              IF (n_tip_reporte_inf = 'CC' AND n_motivo_anul_inf = '1') OR
                 (n_tip_reporte_inf = 'TC' AND n_motivo_anul_inf = '4') THEN
                  n_hay_error := 1;
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
              END IF;
          ELSE
             n_control := 169;  -- Ubigeo de la dirección no existe en la tabla de Ubigeo de la SBS
             IF arr_activ (n_control) = 'S' THEN
                BEGIN
                  SELECT nom_ubigeo INTO n_nom_dir_ubigeo
                    FROM ADM_UBIGEO
                   WHERE cod_dpto||cod_prov||cod_dist = cur.cod_dir_ubigeo;
                  IF SQL%ROWCOUNT = 0 THEN
                     n_hay_error := 1;
                     arr_error (n_control) := arr_error (n_control) + 1;
                     SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur.num_sec_reg, 0, 'VA', arr_tipcon(n_control) );
                END;
             END IF;
          END IF;
       END IF;

/*********************************************/
/**** Registros de Movimiento del Cliente ****/
/*********************************************/

      FOR cur_sld in cur_c (cur.num_sec_reg) LOOP
          n_sec_saldos := cur_sld.num_sec_reg;  -- Numero de Secuencia

/**** Código de la Oficina ****/

          -- JCFS 12/09/2011: Se reescribe toda la validación de oficinas, para que utilice una tabla indexada en lugar de arreglos
          IF colInxOficinas.EXISTS(cur_sld.cod_oficina) THEN
             ls_ind_reporta_rcd := colInxOficinas(cur_sld.cod_oficina).ind_reporta_f16;
             ls_ubigeo_oficina  := colInxOficinas(cur_sld.cod_oficina).cod_dpto ||
                                   colInxOficinas(cur_sld.cod_oficina).cod_prov ||
                                   colInxOficinas(cur_sld.cod_oficina).cod_dist;
             ls_tip_est_oficina := colInxOficinas(cur_sld.cod_oficina).tip_est_oficina;

             n_control := 32;   -- Oficina no identificada para reportar RCD
             IF ls_ind_reporta_rcd <> 'S' and arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END IF;

             n_control := 170;  -- Ubigeo de la oficina no corresponde al registrado en la SBS
             IF ls_ubigeo_oficina <> cur_sld.cod_ubigeo_ofic and arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END IF;

             -- JCFS 12/09/2011: Nuevo control 249, que verifica para una entidad en operación, que la oficina reportada no esté cerrada
             n_control := 249;  -- Oficina cerrada en el Maestro de Oficinas
             IF ls_estado_entidad = 'OP' and ls_tip_est_oficina = 'CE' and arr_activ (n_control) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END IF;
          ELSE
             n_control := 81;   -- Oficina no existe en la Tabla de Oficinas
             IF arr_activ (81) = 'S' THEN
                n_hay_error := 1;
                arr_error (n_control) := arr_error (n_control) + 1;
                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;


/**** Tipo de Reporte ****/

          n_control := 147;  -- Tipo de reporte no es "TC", "CC", "RC", "RT"
          -- JCFS 2015-05: Se retiran los tipos 'TC' yy 'RT', debido a los cambios al SUCAVE del mes de Abril 2015
          IF arr_activ (n_control) = 'S' THEN
             IF (cur_sld.tip_reporte NOT IN ('CC', 'RC'))   -- 'TC', 'RT'
             OR (cur_sld.tip_reporte) IS NULL THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;

/**** Tipo de Cuenta Corriente ****/

          n_control := 151;  -- Tipo de Cuenta Corriente no es 1 ni 3
          IF arr_activ (n_control) = 'S' THEN
             IF cur_sld.tip_ctacte > ' ' OR cur_sld.num_ctacte > ' ' THEN
                IF cur_sld.tip_ctacte NOT IN ('1', '3') THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                ELSE
                   n_control := 156;  -- Número de cuenta corriente o tarjeta de crédito no informado
                   IF (cur_sld.num_ctacte = ' ' OR cur_sld.num_ctacte IS NULL)
                   AND arr_activ (n_control) = 'S' THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                   END IF;
                END IF;
             END IF;
          END IF;

/**** Tipo de Tarjeta de Credito ****/

          n_control := 157;  -- Tipo de tarjeta de crédito no es 1 ni 2
          IF arr_activ (n_control) = 'S' THEN
             IF cur_sld.tip_tarj_cre > ' '
             OR cur_sld.num_tarj_cre > ' ' THEN
                IF cur_sld.tip_tarj_cre NOT IN ('1', '2') THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                ELSE
                   n_control := 156;  -- Número de cuenta corriente o tarjeta de crédito no informado
                   IF (cur_sld.num_tarj_cre = ' ' OR cur_sld.num_tarj_cre IS NULL) AND
                      arr_activ (n_control) = 'S' THEN
                       n_hay_error := 1;
                       arr_error (n_control) := arr_error (n_control) + 1;
                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                   END IF;
                END IF;
             END IF;
          END IF;

/**** Tipo de Moneda ****/

          n_control := 150;  -- Moneda informada no es N o E
          IF arr_activ (n_control) = 'S' THEN
             IF (cur_sld.tip_mda NOT IN ('N', 'E')) OR (cur_sld.tip_mda IS NULL) THEN
                 n_hay_error := 1;
                 arr_error (n_control) := arr_error (n_control) + 1;
                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END IF;
          END IF;

/**** Cierre de Cta.Cte. ****/

          n_control := 112;  -- Cierre de Cta.Cte. por motivo 1 en el período de inhabilitación
          IF cur_sld.tip_reporte     = 'CC' AND cur_sld.tip_motivo_anul = '1' AND
             n_cod_sbs > 0 AND arr_activ (n_control) = 'S' THEN
              BEGIN
                SELECT fec_fin_sancion INTO n_fec_fin_sancion
                  FROM CRA_CLIENTE_SANCION_RTC
                 WHERE cod_sbs         = n_cod_sbs
                   AND tip_reporte     = 'CC'
                   AND tip_motivo_anul = '1'
                   AND ind_sancion     = 'S';
                 IF SQL%ROWCOUNT != 0 THEN
                     IF cur_sld.fec_anul_cierre < n_fec_fin_sancion THEN
                        n_hay_error := 1;
                        arr_error (n_control) := arr_error (n_control) + 1;
                        SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                     END IF;
                 END IF;
              EXCEPTION
                 WHEN OTHERS THEN
                      n_no_encuentra := 1;
              END;
          END IF;

/**** Fecha de Publicacion en "El Peruano" / Numero de la Relacion Publicada ****/

          n_control := 149;  -- Fecha Publ. errada/Numero Relación no informado, motivo cierre 2
          IF arr_activ (n_control) = 'S' THEN
             IF cur_sld.tip_reporte IN ('RC', 'RT') THEN
                IF cur_sld.fec_public_peru IS NULL OR cur_sld.num_rel_public IS NULL THEN
                   n_hay_error := 1;
                   arr_error (n_control) := arr_error (n_control) + 1;
                   SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                ELSE
                   IF cur_sld.tip_motivo_anul = '4' THEN
                      IF cur_sld.fec_public_peru IS NULL OR cur_sld.num_rel_public IS NULL THEN
                         n_hay_error := 1;
                         arr_error (n_control) := arr_error (n_control) + 1;
                         SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                      END IF;
                   END IF;
                END IF;
             END IF;
          END IF;

/**** Consistencias por relacion de Controles: ****/

          n_control := 131;  -- Fecha de apertura igual o posterior a fecha de Cierre
          IF arr_activ (n_control) = 'S' THEN
             IF cur_sld.fec_apertura IS NOT NULL AND cur_sld.fec_anul_cierre IS NOT NULL THEN
-- 25 SET 2003 (JLT) Se permite que fecha de anulacion de una tarjeta de credito o del cierre
--                   de una cuenta corriente sea igual a la fecha de apertura informada por
--                   la empresa. (Nuevo alcance solicitado por el DERC).
--                 IF cur_sld.fec_apertura = cur_sld.fec_anul_cierre
--                 OR cur_sld.fec_apertura > cur_sld.fec_anul_cierre THEN
                 IF cur_sld.fec_apertura > cur_sld.fec_anul_cierre THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                 END IF;
             END IF;
          END IF;

          n_control := 134;  -- Fecha de anulación o cierre es anterior a fecha de expedición o apertura
          IF arr_activ (n_control) = 'S' THEN
             IF  cur_sld.fec_apertura IS NOT NULL AND cur_sld.fec_anul_cierre IS NOT NULL THEN
                 IF cur_sld.fec_anul_cierre < cur_sld.fec_apertura THEN
                    n_hay_error := 1;
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                 END IF;
             END IF;
          END IF;

--        Rectificaciones
          IF ((cur_sld.tip_reporte = 'RC' AND cur_sld.tip_motivo_anul = '1') OR
              (cur_sld.tip_reporte = 'RT' AND cur_sld.tip_motivo_anul = '4')) AND
              n_cod_sbs > 0 THEN
              IF cur_sld.tip_reporte = 'RC' THEN
                 n_producto    := 'C';
                 n_tip_reporte := 'CC';
              ELSE
                 n_producto    := 'T';
                 n_tip_reporte := 'TC';
              END IF;

              n_existe_codigo := 0;
              n_cod_sbs_sanc  := n_cod_sbs;
              IF SF_DETERMINA_CODSBS_SANCIONADO (n_cod_sbs) = 'S' THEN
                 n_existe_codigo := 1;
              END IF;

              IF n_existe_codigo = 0 THEN
                 n_tip_condicion_sanc := SF_VERIFICA_REEMPLAZO_CODSBS (n_cod_sbs);
                 IF n_tip_condicion_sanc = 'RPZTE' THEN
                    FOR cur_reem IN cur_h (n_cod_sbs) LOOP
                        IF SF_DETERMINA_CODSBS_SANCIONADO (cur_reem.cod_sbs_remplazado) = 'S' THEN
                           n_cod_sbs_sanc := cur_reem.cod_sbs_remplazado;
                           n_existe_codigo := 1;
                        END IF;
                    END LOOP;
                 END IF;
              END IF;

             BEGIN
               SELECT COUNT(1) INTO n_registros
                 FROM CRA_CTAS_ANUL_Y_RECTIF
                WHERE cod_sbs      = n_cod_sbs_sanc
                  AND cod_empresa  = i_codemp
                  AND tip_producto = n_producto
                  AND tip_reporte  = n_tip_reporte;
               IF SQL%ROWCOUNT != 0 THEN
                  IF n_registros = 1 THEN
                     BEGIN
                       SELECT tip_ctacte, num_ctacte, tip_tarj_cre, num_tarj_cre,
                              tip_mda, fec_public_peru, num_rel_public, fec_anul_cierre,
                              cod_unico_clie, cod_oficina, des_det_rectifica
                         INTO n_tip_ctacte, n_num_ctacte, n_tip_tarj_cre, n_num_tarj_cre,
                              n_tip_mda, n_fec_public_peru, n_num_rel_public, n_fec_anul_cierre,
                              n_cod_unico_clie, n_cod_oficina_aux, n_des_det_rectifica
                         FROM CRA_CTAS_ANUL_Y_RECTIF
                        WHERE cod_sbs      = n_cod_sbs_sanc
                          AND cod_empresa  = i_codemp
                          AND tip_producto = n_producto
                          AND tip_reporte  = n_tip_reporte;
                       IF SQL%ROWCOUNT = 0 THEN
                          n_hay_error := 1;
                          n_control := 155;  -- Registro de anulación o cierre a rectificar no existe en la SBS
                          arr_error (n_control) := arr_error (n_control) + 1;
                          SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                       ELSE
                          IF n_tip_reporte = 'CC' THEN
                             IF arr_activ (122) = 'S' AND arr_activ (196) = 'S' THEN
                                 IF cur_sld.tip_ctacte != n_tip_ctacte THEN
                                    n_hay_error := 1;
                                    n_control := 122;  -- Tipo de Cta.Cte. es diferente al que informó en el Cierre o Anulación
                                    arr_error (n_control) := arr_error (n_control) + 1;
                                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                                 ELSE
                                    IF cur_sld.num_ctacte != n_num_ctacte THEN
                                       n_hay_error := 1;
                                       n_control := 196;  -- Número de Cuenta Corriente no coincide con el informado en la anulación
                                       arr_error (n_control) := arr_error (n_control) + 1;
                                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                                    END IF;
                                 END IF;
                             END IF;
                          ELSE
                             IF arr_activ (122) = 'S' AND arr_activ (167) = 'S' THEN
                                 IF cur_sld.tip_tarj_cre != n_tip_tarj_cre THEN
                                    n_hay_error := 1;
                                    n_control := 122;  -- Tipo de Cta.Cte. es diferente al que informó en el Cierre o Anulación
                                    arr_error (n_control) := arr_error (n_control) + 1;
                                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                                 ELSE
                                    IF cur_sld.num_tarj_cre != n_num_tarj_cre THEN
                                       n_hay_error := 1;
                                       n_control := 167;  -- Número de Tarjeta Crédito no coincide con el informado en la anulación
                                       arr_error (n_control) := arr_error (n_control) + 1;
                                       SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                                    END IF;
                                 END IF;
                             END IF;
                          END IF;
--
                          IF cur_sld.tip_mda = n_tip_mda AND cur_sld.fec_public_peru = n_fec_public_peru AND
                             cur_sld.num_rel_public  = n_num_rel_public THEN
                              IF cur_sld.fec_anul_cierre != n_fec_anul_cierre THEN
                                 n_hay_error := 1;
                                 n_control := 124;  -- Fecha de Cierre o Anulación es diferente a la informada en su oportunidad
                                 arr_error (n_control) := arr_error (n_control) + 1;
                                 SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                              END IF;
                              IF n_cod_unico_clie > ' ' THEN
                                 IF cur.cod_unico_clie != n_cod_unico_clie THEN
                                    n_hay_error := 1;
                                    n_control := 128;  -- Cod. Unico es diferente al que informó en el Cierre
                                    arr_error (n_control) := arr_error (n_control) + 1;
                                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                                 END IF;
                              END IF;
                              IF n_cod_oficina_aux > ' ' THEN
                                 IF cur_sld.cod_oficina != n_cod_oficina_aux THEN
                                    n_hay_error := 1;
                                    n_control := 121;  -- Cod. de oficina es diferente al que informó en el Cierre o Anulación
                                    arr_error (n_control) := arr_error (n_control) + 1;
                                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                                 END IF;
                              END IF;
                          ELSE
                             IF cur_sld.tip_mda != n_tip_mda THEN
                                n_hay_error := 1;
                                n_control := 123;  -- Tipo de moneda es diferente al que informó en el Cierre o Anulación
                                arr_error (n_control) := arr_error (n_control) + 1;
                                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                             END IF;
                             IF cur_sld.fec_public_peru != n_fec_public_peru THEN
                                n_hay_error := 1;
                                n_control := 126;  -- Fecha de Publicación es diferente a la que informó en el Cierre
                                arr_error (n_control) := arr_error (n_control) + 1;
                                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                             END IF;
                             IF cur_sld.num_rel_public != n_num_rel_public THEN
                                n_hay_error := 1;
                                n_control := 127;  -- Nro. de Relacion Publicada es diferente a la que informó en el cierre
                                arr_error (n_control) := arr_error (n_control) + 1;
                                SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                             END IF;
                          END IF;
                       END IF;
--                Averiguar si se habilita el control 198 (Verificar que el campo asignado como
--                a quien se rectifica, debe tener informacion.
--                  IF n_des_det_rectifica IS NULL
--                  OR n_des_det_rectifica IN ('                    ', '00000000000000000000') THEN
--                     n_hay_error := 1;
--                     n_control := 198;  -- Fecha de Publicación Inválida o no corresponde al tipo de reporte informado
--                     arr_error (n_control) := arr_error (n_control) + 1;
--                     SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
--                  END IF;
                     EXCEPTION
                       WHEN OTHERS THEN
                            n_error := SQLERRM;
                            n_hay_error := 1;
                            n_control := 155;
                            arr_error (n_control) := arr_error (n_control) + 1;
                            SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                     END;
                  ELSE
                     n_existe_a_rectificar := 0;
                     FOR cur_rect in cur_g (n_cod_sbs_sanc, n_producto, n_tip_reporte) LOOP
--                         IF n_tip_reporte = 'CC' THEN
-- 10 MAR 2003
--                            IF  cur_sld.tip_ctacte      = cur_rect.tip_ctacte
--                            AND cur_sld.num_ctacte      = cur_rect.num_ctacte
--                             IF cur_sld.tip_mda         = cur_rect.tip_mda
--                            AND cur_sld.fec_public_peru = cur_rect.fec_public_peru
--                            AND cur_sld.num_rel_public  = cur_rect.num_rel_public
--                           AND cur_sld.fec_anul_cierre = cur_rect.fec_anul_cierre THEN
--                                n_existe_a_rectificar := 1;
--                            END IF;
--                         ELSE
-- 10 MAR 2003
--                            IF  cur_sld.tip_tarj_cre    = cur_rect.tip_tarj_cre
--                            AND cur_sld.num_tarj_cre    = cur_rect.num_tarj_cre
                             IF cur_sld.tip_mda         = cur_rect.tip_mda
                            AND cur_sld.fec_public_peru = cur_rect.fec_public_peru
                            AND cur_sld.num_rel_public  = cur_rect.num_rel_public
                            AND cur_sld.fec_anul_cierre = cur_rect.fec_anul_cierre THEN
                                n_existe_a_rectificar := 1;
                            END IF;
--                        END IF;
                     END LOOP;
                     IF n_existe_a_rectificar = 0 THEN
                        n_hay_error := 1;
                        n_control := 155;  -- Registro de anulación o cierre a rectificar no existe en la SBS
                        arr_error (n_control) := arr_error (n_control) + 1;
                        SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
                     END IF;
                  END IF;
               ELSE
                  n_hay_error := 1;
                  n_control := 155;  -- Registro de anulación o cierre a rectificar no existe en la SBS
                  arr_error (n_control) := arr_error (n_control) + 1;
                  SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                    n_error := SQLERRM;
                    n_hay_error := 1;
                    n_control := 155;  -- Registro de anulación o cierre a rectificar no existe en la SBS
                    arr_error (n_control) := arr_error (n_control) + 1;
                    SP_VAL_GRABA_VALID_ERRORES_RTC (i_anopro, i_mespro, i_codemp, n_control, cur_sld.num_sec_reg, cur_sld.num_sec_cta, 'VA', arr_tipcon(n_control) );
             END;
          END IF;
--
      END LOOP;
   END LOOP;

--  Actualiza CRA_NRO_VALIDACION
    UPDATE CRA_NRO_VALIDACION
       SET fec_fin_val  = sysdate, cod_est_val  = 'T'
     WHERE ano_refer    = i_anopro
       AND mes_refer    = i_mespro
       AND cod_reporte  = 'RTC'
       AND cod_empresa  = i_codemp
       AND num_seq_val  = n_num_seq_val;

    COMMIT;

-- Actualiza CRA_VAL_CONTROLES_X_EMPRESA
   SP_GRABA_CONTROL_RTC_X_EMPRESA ('RTC', i_anopro, i_mespro, i_codemp);
   n_cod_ide_pro := 401;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_GRABA_CONTROL_RTC_X_EMPRESA');
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) != 'T' THEN
         SP_CONTROL_DE_ERRORES (1, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
         RETURN;
      END IF;
   ELSE
      SP_CONTROL_DE_ERRORES (2, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
      RETURN;
   END IF;

--  Obtiene total registros de identificacion
    SELECT count(*) INTO n_tot_reg_identif
      FROM CRA_VALID_IDENTIF_RTC
     WHERE ano_refer       = i_anopro
       AND mes_refer       = i_mespro
       AND cod_empresa     = i_codemp
       AND tip_informacion = '1';

--  Obtiene total registros de detalle
    SELECT count(*) INTO n_tot_reg_saldos
      FROM CRA_VALID_DETALLE_RTC
     WHERE ano_refer       = i_anopro
       AND mes_refer       = i_mespro
       AND cod_empresa     = i_codemp
       AND tip_informacion = '1';

--  Obtiene total registros de saldos de totales
    n_tot_reg_tot := 0;

--  Calcula total registros
    n_tot_reg     := n_tot_reg_identif + n_tot_reg_saldos;

--  Obtiene el numero total de registros observados en la Empresa en Validacion RTC
    n_tot_err     := SF_OBT_TOTAL_ERR_RTC_EMPRESA (i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes RTC en la empresa
    n_tot_cli     := SF_OBT_TOTAL_CLI_RTC_EMPRESA (i_anopro, i_mespro, i_codemp);

--  Obtiene el numero total de clientes RTC con errores en la empresa
    n_tot_cli_err := SF_OBT_TOT_CLI_RTC_ERR_EMPRESA (i_anopro, i_mespro, i_codemp);

-- Obtiene el numero total de clientes RTC con errores por tipo de control validez
   n_tot_cli_err_v := SF_OBT_TOTAL_CLI_RTC_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'V');

-- Obtiene el numero total de clientes con errores por tipo de control consistencia
   n_tot_cli_err_c := SF_OBT_TOTAL_CLI_RTC_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'C');

-- Obtiene el numero total de clientes con errores por tipo de control alerta
   n_tot_cli_err_a := SF_OBT_TOTAL_CLI_RTC_ERR_TIPO (i_anopro, i_mespro, i_codemp, 'A');

--  Actualiza CRA_TOTALES_VALIDACION

  BEGIN
    SELECT num_tot_reg
      INTO n_tot_reg_aux
      FROM CRA_TOTALES_VALIDACION
     WHERE ano_refer    = i_anopro
       AND mes_refer    = i_mespro
       AND cod_reporte  = 'RTC'
       AND cod_empresa  = i_codemp;

    UPDATE CRA_TOTALES_VALIDACION
           SET num_tot_reg       = n_tot_reg,
               val_tot_deu       = n_tot_deu,
               num_tot_err       = n_tot_err,
               num_tot_cli       = n_tot_cli,
               num_tot_cli_err   = n_tot_cli_err,
               val_tot_deu_err   = n_tot_deu_err,
               num_tot_reg_tot   = n_tot_reg_tot,
               num_tot_cli_err_v = n_tot_cli_err_v,
               val_tot_deu_err_v = n_tot_deu_err_v,
               num_tot_cli_err_c = n_tot_cli_err_c,
               val_tot_deu_err_c = n_tot_deu_err_c,
               num_tot_cli_err_a = n_tot_cli_err_a,
               val_tot_deu_err_a = n_tot_deu_err_a
         WHERE ano_refer       = i_anopro
           AND mes_refer       = i_mespro
           AND cod_reporte     = 'RTC'
           AND cod_empresa     = i_codemp;
  EXCEPTION
    WHEN OTHERS THEN
         -- JCFS 02/09/2015: Se agrega la lista de columnas en el INSERT, y se agregan las dos nuevas columnas dia_refer y cod_sec_envio
         INSERT INTO CRA_TOTALES_VALIDACION ( ano_refer, mes_refer, cod_reporte, cod_empresa, num_tot_reg, val_tot_deu, num_tot_err, num_tot_cli, num_tot_cli_err, val_tot_deu_err,
                     num_tot_reg_tot, num_tot_cli_err_v, val_tot_deu_err_v, num_tot_cli_err_c, val_tot_deu_err_c, num_tot_cli_err_a, val_tot_deu_err_a, dia_refer, cod_sec_envio )
              VALUES (i_anopro, i_mespro, 'RTC', i_codemp, n_tot_reg, n_tot_deu, n_tot_err, n_tot_cli, n_tot_cli_err, n_tot_deu_err, n_tot_reg_tot,
                      n_tot_cli_err_v, n_tot_deu_err_v, n_tot_cli_err_c, n_tot_deu_err_c, n_tot_cli_err_a, n_tot_deu_err_a, '01', '01');
  END;

  COMMIT;

-- Extraccion de registros sin codigo SBS en el movimiento RTC
   SP_VAL_EXTRAE_RTC_SIN_CODSBS ('RTC', i_anopro, i_mespro, i_codemp);
   n_cod_ide_pro := 401;
   o_idepro := SF_OBT_COD_IDE_PRO ('SP_VAL_EXTRAE_RTC_SIN_CODSBS');
   IF o_idepro IS NOT NULL THEN
      IF SF_OBT_COD_EST_PRO (i_anopro, i_mespro, i_codemp, o_idepro) != 'T' THEN
         SP_CONTROL_DE_ERRORES (1, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
         RETURN;
      END IF;
   ELSE
      SP_CONTROL_DE_ERRORES (2, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, 'E', n_cod_ori_pro);
      RETURN;
   END IF;

-- Actualiza clientes recuperados que han sido observados en la validacion
   n_cont := 0;
   FOR cur_observ in cur_j LOOP
       n_cont := n_cont + 1;
       UPDATE CRA_VALID_ASIG_CODSBS
          SET ind_reg_observ = 'S'
        WHERE ano_refer   = i_anopro
          AND mes_refer   = i_mespro
          AND cod_reporte = 'RTC'
          AND cod_empresa = i_codemp
          AND num_sec_reg = cur_observ.num_sec_reg;
       IF n_cont > 5000 THEN -- SRR 10/09/2010 verificando performance
          n_cont := 0;
          COMMIT;
       END IF;
   END LOOP;

   BEGIN
     n_reg_altas := 0;
     SELECT COUNT(*) INTO n_reg_altas
       FROM CRA_VALID_ASIG_CODSBS
      WHERE ano_refer    = i_anopro
        AND mes_refer    = i_mespro
        AND cod_reporte  = 'RTC'
        AND cod_empresa  = i_codemp;

   EXCEPTION
      WHEN OTHERS THEN
           n_error := SQLERRM;
   END;

   n_reg_no_alertas := 0;
   IF n_reg_altas = 0 THEN
      BEGIN
        SELECT SUM(num_veces) INTO n_reg_no_alertas
          FROM CRA_VAL_CONTROLES_X_EMPRESA "A",
               CRA_CONTROL_HIS_VALIDACION  "B"
         WHERE A.ano_refer      = i_anopro
           AND A.mes_refer      = i_mespro
           AND A.cod_empresa    = i_codemp
           AND A.ano_refer      = B.ano_refer
           AND A.mes_refer      = B.mes_refer
           AND B.cod_reporte    = 'RTC'
           AND A.cod_control    = B.cod_control
           AND B.tip_control_val NOT IN ('A');

        IF n_reg_no_alertas IS NULL THEN
           n_reg_no_alertas := 0;
        END IF;

      EXCEPTION
        WHEN OTHERS THEN
           n_error := SQLERRM;
      END;
   END IF;

   n_cod_est_pro := 'T';
   IF n_hay_error = 1 THEN
--    Actualiza CRA_PAR_PROCESOS
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, 'OBS: Validacion con Observaciones');
--    Actualiza CRA_PERIODO_INF_EMP_ETAPA
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '05', 'F');
--    Actualiza CRA_PAR_CONTROL_PROCESOS
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'OBS: Validacion con Errores', 'VA', NULL, NULL, NULL);
   ELSE
--    Actualiza CRA_PAR_PROCESOS
      SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, 'MSJ: Validacion OK');
--    Actualiza CRA_PERIODO_INF_EMP_ETAPA
      SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '05', 'W');
--    Actualiza CRA_PAR_CONTROL_PROCESOS
      SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, 'MSJ: Validacion OK', 'VA', NULL, NULL, NULL);
   END IF;

-- Si no registra altas y/o recuperacion de clientes y los controles de validacion
-- son solo alertas, se continua con la siguiente etapa.
   IF  n_reg_altas = 0 AND n_reg_no_alertas = 0 THEN
       SP_VAL_EXCLUSION_RTC ('RTC', i_anopro, i_mespro, i_codemp);
   END IF;

EXCEPTION
    WHEN OTHERS THEN
         n_error := SQLERRM;
--       Actualiza CRA_PAR_PROCESOS
         n_cod_est_pro := 'E';
         SP_REG_CONTROL (i_anopro, i_mespro, i_codemp, n_cod_ide_pro, n_cod_est_pro, substr(n_error,1,255));
--       Actualiza CRA_PERIODO_INF_EMP_ETAPA
         SP_ACT_EST_PERIODO_EMP_ETAPA (i_anopro, i_mespro, 'RTC', i_codemp, '05', 'E');
--       Actualiza CRA_PAR_CONTROL_PROCESOS
         SP_ACT_EST_CONTROL_PROCESOS (n_cod_est_pro, USER, i_anopro, i_mespro, i_codemp, n_cod_ide_pro, NULL, substr(n_error,1,255), 'VA', NULL, NULL, NULL);
END;

----------------------------------------------------------------------
-- Definicion de Funciones
----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_EMPRESA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
-- --------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Obtiene el total del valor concepto Total Deuda de la Empresa en Validacion.
-- --------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda  NUMBER(15,2);
BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda
     INTO o_val_tot_deuda
     FROM cra_valid_saldos_rcd        "A",
          cra_valid_identif_rcd       "B",
          cra_rel_his_concepto_cuenta "C"
    WHERE A.ano_refer      = i_ano_val
      AND A.mes_refer      = i_mes_val
      AND A.cod_empresa    = i_cod_empresa
      AND A.tip_formulario = '1'
      AND B.ano_refer      = A.ano_refer
      AND B.mes_refer      = A.mes_refer
      AND B.cod_empresa    = A.cod_empresa
      AND B.num_sec_reg    = A.num_sec_reg
      AND C.ano_refer      = A.ano_refer
      AND C.mes_refer      = A.mes_refer
      AND C.cod_cta        = A.cod_cuenta
      AND C.tip_plan       = 'MF'
      AND C.num_version    = 1
      AND C.cod_concepto   = 53;
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda;
   END IF;
--
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_ERRORES_EMPRESA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M. - Enero 2002
-- Objetivo: Obtiene el numero total de errores de la Empresa en Validacion.
-- Revisiones:
--     Fecha        Autor                                           Descripcion
-- -------------  --------------------------  ----------------------------------------------------------------------------
-- 14/09/2002     Jaime Lopez-Torres M.       Obtiene el numero total de registros observados en la Empresa en Validacion.
-- 24/09/2002     Jaime Lopez-Torres M.       No se consideran los de tipo de control 'A' y 'D'.
--------------------------------------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_errores  NUMBER(7);
BEGIN
   SELECT COUNT(DISTINCT num_sec_reg||num_sec_cta) val_tot_errores
     INTO o_val_tot_errores
     FROM CRA_VAL_CONTROLES_RCD_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B"
    WHERE A.ano_refer    = i_ano_val
      AND A.mes_refer    = i_mes_val
      AND A.cod_empresa  = i_cod_empresa
      AND A.ind_pro_val  = 'VA'
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_reporte  = 'RCD'
      AND B.cod_control  = A.cod_control
      AND B.tip_control_val NOT IN ('A', 'D');

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_errores;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_ERRORES_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_ERR_RTC_EMPRESA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
-- ------------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el numero total de registros observados en la Empresa en Validacion RTC.
-- ------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_errores  NUMBER(7);
BEGIN
   SELECT COUNT(DISTINCT num_sec_reg||num_sec_cta) val_tot_errores
     INTO o_val_tot_errores
     FROM CRA_VAL_CONTROLES_RTC_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B"
    WHERE A.ano_refer    = i_ano_val
      AND A.mes_refer    = i_mes_val
      AND A.cod_empresa  = i_cod_empresa
      AND A.ind_pro_val  = 'VA'
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_reporte  = 'RTC'
      AND B.cod_control  = A.cod_control
      AND B.tip_control_val NOT IN ('A', 'D');

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_errores;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_ERR_RTC_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_ERR_RCA_EMPRESA
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------------------------
-- Autor   : Francisco Vite Shelton - Junio 2006
-- Objetivo: Obtiene el numero total de errores de la Empresa en Validacion.
-- -------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_errores  NUMBER(7);
BEGIN
  o_val_tot_errores := PK_VALIDADOR_RCA.SF_OBT_TOTAL_ERR_RCA_EMPRESA ( i_cod_reporte, i_ano_val, i_mes_val, i_cod_empresa, i_dia_refer, i_cod_sec_envio );
  return o_val_tot_errores;
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_ERR_RCA_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLIENTES_EMPRESA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
-- --------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2002
-- Objetivo: Obtiene el numero total de clientes de la Empresa en Validacion.
-- --------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_clientes  NUMBER(8);
BEGIN
   SELECT MAX(num_sec_reg) val_tot_clientes
     INTO o_val_tot_clientes
     FROM cra_valid_identif_rcd
    WHERE ano_refer       = i_ano_val
      AND mes_refer       = i_mes_val
      AND cod_empresa     = i_cod_empresa
      AND tip_formulario  = '1';

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_clientes;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLIENTES_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_RTC_EMPRESA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
-- ------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2002
-- Objetivo: Obtiene el numero total de clientes RTC de la Empresa en Validacion.
-- ------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_clientes  NUMBER(8);
BEGIN
   SELECT MAX(num_sec_reg) val_tot_clientes
     INTO o_val_tot_clientes
     FROM cra_valid_identif_rtc
    WHERE ano_refer       = i_ano_val
      AND mes_refer       = i_mes_val
      AND cod_empresa     = i_cod_empresa
      AND tip_formulario  = '1';
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_clientes;
   END IF;
--
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_RTC_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_RCA_EMPRESA
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- --------------------------------------------------------------------------
-- Autor   : Francisco Vite Shelton - Junio 2006
-- Objetivo: Obtiene el numero total de clientes de la Empresa en Validacion.
-- --------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_clientes  NUMBER(8);
BEGIN
  o_val_tot_clientes := PK_VALIDADOR_RCA.SF_OBT_TOTAL_CLI_RCA_EMPRESA (i_cod_reporte, i_ano_val, i_mes_val, i_cod_empresa, i_dia_refer, i_cod_sec_envio);
  RETURN o_val_tot_clientes;
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_RCA_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_ERR_EMPRESA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
-- --------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2002
-- Objetivo: Obtiene el numero total de clientes observados en Validacion en la Empresa.
---------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err  NUMBER(8);
--
BEGIN
   SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
     INTO o_val_tot_cli_err
     FROM CRA_VAL_CONTROLES_RCD_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B",
          CRA_VALID_IDENTIF_RCD        "C"
    WHERE A.ano_refer      = i_ano_val
      AND A.mes_refer      = i_mes_val
      AND A.cod_empresa    = i_cod_empresa
      AND A.ano_refer      = B.ano_refer
      AND A.mes_refer      = B.mes_refer
      AND B.cod_reporte    = 'RCD'
      AND A.cod_control    = B.cod_control
      AND B.tip_control_val NOT IN ('A', 'D')
      AND C.ano_refer      = A.ano_refer
      AND C.mes_refer      = A.mes_refer
      AND C.cod_empresa    = A.cod_empresa
      AND C.num_sec_reg    = A.num_sec_reg
      AND C.tip_formulario = '1';
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_cli_err;
   END IF;
--
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_ERR_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_ERR_RCA_EMPR
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- ------------------------------------------------------------------------------------
-- Autor   : Francisco Vite Shelton - Junio 2006
-- Objetivo: Obtiene el numero total de clientes observados en Validacion en la Empresa.
-- ------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err  NUMBER(8);
BEGIN
  o_val_tot_cli_err := PK_VALIDADOR_RCA.SF_OBT_TOTAL_CLI_ERR_RCA_EMPR ( i_cod_reporte, i_ano_val, i_mes_val, i_cod_empresa, i_dia_refer, i_cod_sec_envio );
  RETURN o_val_tot_cli_err;
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_ERR_RCA_EMPR;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_ERR_TIPO
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_tip_control   IN VARCHAR2)
-- ------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2002
-- Objetivo: Obtiene el numero total de clientes con error de Validacion por tipo de control.
---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err_tip  NUMBER(8);
BEGIN
   SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
     INTO o_val_tot_cli_err_tip
     FROM CRA_VAL_CONTROLES_RCD_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B",
          CRA_VALID_IDENTIF_RCD        "C"
    WHERE A.ano_refer       = i_ano_val
      AND A.mes_refer       = i_mes_val
      AND A.cod_empresa     = i_cod_empresa
      AND A.ano_refer       = B.ano_refer
      AND A.mes_refer       = B.mes_refer
      AND B.cod_reporte     = 'RCD'
      AND A.cod_control     = B.cod_control
      AND B.tip_control_val = i_tip_control
      AND C.ano_refer       = A.ano_refer
      AND C.mes_refer       = A.mes_refer
      AND C.cod_empresa     = A.cod_empresa
      AND C.num_sec_reg     = A.num_sec_reg
      AND C.tip_formulario  = '1';

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_cli_err_tip;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_ERR_TIPO;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_ERR_RCA_TIPO
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_tip_control   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- ------------------------------------------------------------------------------------
-- Autor   : Francisco Vite Shelton - Junio 2006
-- Objetivo: Obtiene el numero total de clientes con error de Validacion por tipo de control.
---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err_tip  NUMBER(8);
BEGIN
  o_val_tot_cli_err_tip := PK_VALIDADOR_RCA.SF_OBT_TOTAL_CLI_ERR_RCA_TIPO ( i_cod_reporte, i_ano_val, i_mes_val, i_cod_empresa, i_tip_control, i_dia_refer, i_cod_sec_envio );
  RETURN o_val_tot_cli_err_tip;
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_ERR_RCA_TIPO;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_RTC_ERR_TIPO
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_tip_control   IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M. - Octubre 2002
-- Objetivo: Obtiene el numero total de clientes RTC con error de Validacion por tipo de control.
---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err_tip  NUMBER(8);
BEGIN
   SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
     INTO o_val_tot_cli_err_tip
     FROM CRA_VAL_CONTROLES_RTC_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B",
          CRA_VALID_IDENTIF_RTC        "C"
    WHERE A.ano_refer       = i_ano_val
      AND A.mes_refer       = i_mes_val
      AND A.cod_empresa     = i_cod_empresa
      AND A.ano_refer       = B.ano_refer
      AND A.mes_refer       = B.mes_refer
      AND B.cod_reporte     = 'RTC'
      AND A.cod_control     = B.cod_control
      AND B.tip_control_val = i_tip_control
      AND C.ano_refer       = A.ano_refer
      AND C.mes_refer       = A.mes_refer
      AND C.cod_empresa     = A.cod_empresa
      AND C.num_sec_reg     = A.num_sec_reg
      AND C.tip_formulario  = '1';

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_cli_err_tip;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_RTC_ERR_TIPO;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOT_CLI_RTC_ERR_EMPRESA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M.
-- Fecha   : 07 Enero 2002
-- Lugar   : S.B.S.
-- Objetivo: Obtiene el numero total de clientes RTC Observados en Validacion en la Empresa.
---------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err  NUMBER(8);
--
BEGIN
   SELECT --+ORDERED
          COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
     INTO o_val_tot_cli_err
     FROM CRA_VAL_CONTROLES_RTC_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B",
          CRA_VALID_IDENTIF_RTC        "C"
    WHERE A.ano_refer       = i_ano_val
      AND A.mes_refer       = i_mes_val
      AND A.cod_empresa     = i_cod_empresa
      AND A.ano_refer       = B.ano_refer
      AND A.mes_refer       = B.mes_refer
      AND B.cod_reporte     = 'RTC'
      AND A.cod_control     = B.cod_control
      AND B.tip_control_val NOT IN ('A','D')
      AND C.ano_refer       = A.ano_refer
      AND C.mes_refer       = A.mes_refer
      AND C.cod_empresa     = A.cod_empresa
      AND C.num_sec_reg     = A.num_sec_reg
      AND C.tip_formulario  = '1';
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_cli_err;
   END IF;
--
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOT_CLI_RTC_ERR_EMPRESA;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_OBSERVADA
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M. - Abril 2002
-- Objetivo: Obtiene el total del valor concepto Total Deuda de la Empresa
--           en Validacion, con Observaciones. (No incluye Alertas y Cuadre).
-----------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda_obs  NUMBER(15,2);
BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda_obs INTO o_val_tot_deuda_obs
     FROM CRA_VALID_SALDOS_RCD        "A",
          CRA_REL_HIS_CONCEPTO_CUENTA "B"
    WHERE A.ano_refer      = i_ano_val
      AND A.mes_refer      = i_mes_val
      AND A.cod_empresa    = i_cod_empresa
      AND A.tip_formulario = '1'
      AND A.num_sec_reg IN ( SELECT C.num_sec_reg
                               FROM CRA_VAL_CONTROLES_RCD_X_SEC "C",
                                    CRA_CONTROL_HIS_VALIDACION  "D"
                              WHERE C.ano_refer    = i_ano_val
                                AND C.mes_refer    = i_mes_val
                                AND C.cod_empresa  = i_cod_empresa
--                                AND C.ind_pro_val  = 'VA'
                                AND C.ano_refer    = D.ano_refer
                                AND C.mes_refer    = D.mes_refer
                                AND D.cod_reporte  = 'RCD'
                                AND C.cod_control  = D.cod_control
                                AND D.tip_control_val NOT IN ('A', 'D') )
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_cta      = A.cod_cuenta
      AND B.tip_plan     = 'MF'
      AND B.num_version  = 1
      AND B.cod_concepto = 53;
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda_obs;
   END IF;
--
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_OBSERVADA;

-----------------------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_TIPO
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_tip_control   IN VARCHAR2)
--
-- Autor   : Jaime Lopez-Torres M. - Abril 2002
-- Objetivo: Obtiene el total del valor concepto Total Deuda de la Empresa
--           en Validacion, con Observaciones, por tipo de control.
--           (No incluye Alertas y Cuadre).
--------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda_obs  NUMBER(15,2);

BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda_obs INTO o_val_tot_deuda_obs
     FROM CRA_VALID_SALDOS_RCD        "A",
          CRA_REL_HIS_CONCEPTO_CUENTA "B"
    WHERE A.ano_refer      = i_ano_val
      AND A.mes_refer      = i_mes_val
      AND A.cod_empresa    = i_cod_empresa
      AND A.tip_formulario = '1'
      AND A.num_sec_reg IN ( SELECT C.num_sec_reg
                               FROM CRA_VAL_CONTROLES_RCD_X_SEC "C",
                                    CRA_CONTROL_HIS_VALIDACION  "D"
                              WHERE C.ano_refer       = i_ano_val
                                AND C.mes_refer       = i_mes_val
                                AND C.cod_empresa     = i_cod_empresa
--                                AND C.ind_pro_val     = 'VA'
                                AND C.ano_refer       = D.ano_refer
                                AND C.mes_refer       = D.mes_refer
                                AND D.cod_reporte     = 'RCD'
                                AND C.cod_control     = D.cod_control
                                AND D.tip_control_val = i_tip_control )
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_cta      = A.cod_cuenta
      AND B.tip_plan     = 'MF'
      AND B.num_version  = 1
      AND B.cod_concepto = 53;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda_obs;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_TIPO;

----------------------------------------------------------------------
/* SF_OBT_ULT_COD_SBS - Obtiene el ultimo codigo SBS asignado
   | RETURN
   |   NUMBER    : Devuelve el codigo obtenido
   | EXCEPTIONS
   |   no_data_found - No existe ningun codigo asignado
--------------------------------------------------------------------*/
FUNCTION SF_OBT_ULT_COD_SBS
RETURN NUMBER
IS
  ln_codigo      NUMBER;
BEGIN
--  LOCK TABLE CRA_ULT_COD_SBS IN EXCLUSIVE MODE ;
/* 24 feb 2003 JLT
  WHILE ls_ind_en_uso = 'S' LOOP
      SELECT cod_sbs_ult
             ind_en_uso,
        INTO ln_codigo,
             ls_ind_en_uso
        FROM CRA_ULT_COD_SBS;
    END LOOP;
*/
  SELECT cod_sbs_ult
    INTO ln_codigo
    FROM CRA_ULT_COD_SBS;
--
  RETURN ln_codigo;
--
EXCEPTION
   WHEN no_data_found THEN
        RETURN 0;
   WHEN OTHERS        THEN
        gn_code  := SQLCODE;
        gs_error := SQLERRM;
        RETURN gn_code * -1;
END;

----------------------------------------------------------------------
/* SF_GENERA_MOD11 - Genera un codigo que cumple Modulo 11
   | IN
   | - an_codigo : Codigo a partir del cual se va a generar el
   |               siguiente codigo que cumple modulo 11.
   | RETURN
   |   NUMBER    : Siguiente codigo que cumple modulo 11.
   | EXCEPTIONS
--------------------------------------------------------------------*/
FUNCTION SF_GENERA_MOD11
       ( an_codigo           IN NUMBER )
--       ( an_codigo           IN NUMBER DEFAULT 0 )
RETURN NUMBER
IS
  lb_cumple     BOOLEAN;
  ln_codigo     NUMBER;
BEGIN
  ln_codigo     := an_codigo;
  gn_m11_digito := 11;
  WHILE gn_m11_digito >= 11 LOOP
     ln_codigo  := ln_codigo + 10;
     lb_cumple  := SF_VERIFICA_MOD11 ( ln_codigo, 'SBS');
  END LOOP;
  ln_codigo     := trunc(ln_codigo,-1) + gn_m11_digito;
  RETURN ln_codigo;
EXCEPTION
   WHEN OTHERS THEN
        gn_code  := SQLCODE;
        gs_error := SQLERRM;
        RETURN 0;
END;
----------------------------------------------------------------------
/* SF_VERIFICA_MOD11 - Verifica si un codigo cumple Modulo 11
   | IN
   | - as_codigo     : Codigo a verificar si cumple Modulo 11
   | - as_tip_codigo : Tipo de codigo a verificar. Los valores son:
   |                   'SBS' - para codigo SBS
   |                          (valor asumido por omision)
   |                   'RUC' - para codigo RUC, de 8 y 11 digitos
   |                   'LTR' - para libreta tributaria (anterior al RUC)
   | RETURN
   |   BOOLEAN      : TRUE (> 0) : SI cumple Modulo 11
                      FALSE(= 0) : NO cumple Modulo 11
   | EXCEPTIONS
--------------------------------------------------------------------*/
FUNCTION SF_VERIFICA_MOD11
       ( as_codigo           IN VARCHAR2
       , as_tip_codigo       IN VARCHAR2
--       , as_tip_codigo       IN VARCHAR2  DEFAULT 'SBS'
       )
RETURN BOOLEAN
IS
   ls_codigo     VARCHAR2(13);
   ln_total      NUMBER;
   ln_digito     NUMBER;
BEGIN
-- Si es Libreta Tributaria
   IF as_tip_codigo = 'LTR'     THEN
      gn_m11_codigo := NVL(TEST_NUMBER( TRANSLATE(LTRIM(RTRIM(as_codigo))
                                      , 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                                      , '12345678912345678923456789') )
                          ,0);
-- Si es Codigo SBS o RUC
   ELSE
      gn_m11_codigo := NVL(TEST_NUMBER(as_codigo),0);
   END IF;
-- Calcula digito verificador
   ls_codigo    := LPAD(gn_m11_codigo,13,'0');
   ln_total     := TO_NUMBER(substr(ls_codigo,01,1)) * 7
                 + TO_NUMBER(substr(ls_codigo,02,1)) * 6
                 + TO_NUMBER(substr(ls_codigo,03,1)) * 5
                 + TO_NUMBER(substr(ls_codigo,04,1)) * 4
                 + TO_NUMBER(substr(ls_codigo,05,1)) * 3
                 + TO_NUMBER(substr(ls_codigo,06,1)) * 2
                 + TO_NUMBER(substr(ls_codigo,07,1)) * 7
                 + TO_NUMBER(substr(ls_codigo,08,1)) * 6
                 + TO_NUMBER(substr(ls_codigo,09,1)) * 5
                 + TO_NUMBER(substr(ls_codigo,10,1)) * 4
                 + TO_NUMBER(substr(ls_codigo,11,1)) * 3
                 + TO_NUMBER(substr(ls_codigo,12,1)) * 2 ;
   ln_digito    := TO_NUMBER(substr(ls_codigo,13,1));
--
-- Digito verificador
   gn_m11_digito:= 11 - MOD(ln_total,11);
   IF gn_m11_digito = 10 THEN
      gn_m11_digito:= 0;
   END IF ;
   IF gn_m11_digito = 11 AND as_tip_codigo = 'RUC' THEN
      gn_m11_digito:= 1;
   END IF ;
-- Verifica si cumple Modulo 11
   IF gn_m11_digito = ln_digito THEN
       RETURN TRUE;
   ELSE
       RETURN FALSE;
   END IF;
--
EXCEPTION
   WHEN OTHERS THEN
        gn_code  := SQLCODE;
        gs_error := SQLERRM;
        RETURN FALSE;
END SF_VERIFICA_MOD11;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_VAL
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_num_sec_reg   IN NUMBER)
-- --------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Obtiene el valor del concepto Total Deuda de un Cliente en Validacion.
-- --------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda  NUMBER(18,2);  -- JCFS 16/08/2010: Se aumenta la precisión de 13,2 a 18,2

BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda
     INTO o_val_tot_deuda
     FROM cra_valid_saldos_rcd         "A",
          cra_rel_his_concepto_cuenta  "B"
    WHERE A.ano_refer    = i_ano_val
      AND A.mes_refer    = i_mes_val
      AND A.cod_empresa  = i_cod_empresa
      AND A.num_sec_reg  = i_num_sec_reg
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_cta      = A.cod_cuenta
      AND B.tip_plan     = 'MF'
      AND B.num_version  = 1
      AND B.cod_concepto = 53;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_VAL;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_CTA_VAL
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_num_sec_reg   IN NUMBER,
         i_num_sec_cta   IN NUMBER)
-- ---------------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Obtiene el valor del concepto Total Deuda de una cuenta de un Cliente en Validacion.
-- ---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda  NUMBER(13,2);  -- JCFS 16/08/2010: Se aumenta la precisión de 13,2 a 18,2

BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda
     INTO o_val_tot_deuda
     FROM cra_valid_saldos_rcd         "A",
          cra_rel_his_concepto_cuenta  "B"
    WHERE A.ano_refer    = i_ano_val
      AND A.mes_refer    = i_mes_val
      AND A.cod_empresa  = i_cod_empresa
      AND A.num_sec_reg  = i_num_sec_reg
      AND A.num_sec_cta  = i_num_sec_cta
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_cta      = A.cod_cuenta
      AND B.tip_plan     = 'MF'
      AND B.num_version  = 1
      AND B.cod_concepto = 53;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_CTA_VAL;

----------------------------------------------------------------------

FUNCTION SF_VERIFICA_REEMPLAZO_CODSBS
        (i_codsbs    IN NUMBER)
--
-- Autor   : Jaime Lopez-Torres M. - Abril 2002
-- Objetivo: Verifica si un codigo SBS ha sido reemplazado, obteniendo la condicion vigente.
------------------------------------------------------------------------------------------------
RETURN VARCHAR2 IS
  o_tip_condicion   VARCHAR2(5);
BEGIN
  SELECT tip_condicion
    INTO o_tip_condicion
    FROM CRI_PERSONA
   WHERE cod_sbs = i_codsbs;
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_tip_condicion;
   END IF;
--
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_VERIFICA_REEMPLAZO_CODSBS;

----------------------------------------------------------------------

FUNCTION SF_OBT_CODSBS_REEMPLAZANTE
         (i_codsbs_reemplzdo  IN NUMBER)
--
-- Autor   : Jaime Lopez-Torres M. - Abril 2002
-- Objetivo: Obtiene el codigo SBS del ultimo reemplazante de un codigo SBS reemplazado.
------------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_codsbs_reemplzte   NUMBER(10);

BEGIN
  SELECT --+ORDERED
         cod_sbs_ult_rplzte,
         tip_motivo_reemp
    INTO n_cod_sbs_ult_rplzte,
         n_tip_motivo_reemp
    FROM CRI_REEMPLAZO
   WHERE cod_sbs_remplazado = i_codsbs_reemplzdo;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
--      IF n_tip_motivo_reemp = '1' THEN
         o_codsbs_reemplzte := n_cod_sbs_ult_rplzte;
         RETURN o_codsbs_reemplzte;
--      ELSE
--         RETURN 0;
--      END IF;
   END IF;
--
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_CODSBS_REEMPLAZANTE;

----------------------------------------------------------------------

FUNCTION SF_OBT_DEUD_ACUM_X_CONTROL_RCA
        (i_cod_reporte  IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_cod_control   IN NUMBER,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Obtiene el Total Deuda acumulada para un control RCD.
------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda  NUMBER(15,2);
BEGIN
  o_val_tot_deuda  := PK_VALIDADOR_RCA.SF_OBT_DEUD_ACUM_X_CONTROL_RCA ( i_cod_reporte, i_ano_val, i_mes_val, i_cod_empresa, i_cod_control, i_dia_refer, i_cod_sec_envio );
  RETURN o_val_tot_deuda;
EXCEPTION
   WHEN OTHERS THEN
       RETURN NULL;
END SF_OBT_DEUD_ACUM_X_CONTROL_RCA;

----------------------------------------------------------------------

FUNCTION SF_OBT_DEUD_ACUM_X_CONTROL_RCD
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_cod_control   IN NUMBER)
-- ---------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Obtiene el Total Deuda acumulada para un control RCD.
-- ---------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda  NUMBER(15,2);

BEGIN
   SELECT SUM(val_tot_deu) val_tot_deuda
     INTO o_val_tot_deuda
     FROM CRA_VAL_CONTROLES_RCD_X_SEC
    WHERE ano_refer    = i_ano_val
      AND mes_refer    = i_mes_val
      AND cod_empresa  = i_cod_empresa
      AND cod_control  = i_cod_control;
--      AND num_sec_cta  = 0;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_DEUD_ACUM_X_CONTROL_RCD;

----------------------------------------------------------------------

FUNCTION SF_OBT_DEUD_ACUM_X_CONTROL_RTC
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_cod_control   IN NUMBER)
-- ---------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Diciembre 2001
-- Objetivo: Obtiene el Total Deuda acumulada para un control RTC.
-- ---------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda  NUMBER(15,2);

BEGIN
   SELECT SUM(val_tot_deu) val_tot_deuda
     INTO o_val_tot_deuda
     FROM CRA_VAL_CONTROLES_RTC_X_SEC
    WHERE ano_refer    = i_ano_val
      AND mes_refer    = i_mes_val
      AND cod_empresa  = i_cod_empresa
      AND cod_control  = i_cod_control;
--      AND num_sec_cta  = 0;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_DEUD_ACUM_X_CONTROL_RTC;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOT_CONTROL_RCA_X_SEC
        (i_cod_reporte  IN VARCHAR2,
         i_anopro  IN VARCHAR2,
         i_mespro  IN VARCHAR2,
         i_codemp  IN VARCHAR2,
         i_numsec  IN NUMBER,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Agosto 2002
-- Objetivo: Obtiene el Total Deuda acumulada para un control RCD.
-- Total deudore observados diferentes a un control de alerta
-- -------------------------------------------------------------------
RETURN NUMBER IS
  o_tot_control  NUMBER(3);
BEGIN
  o_tot_control := PK_VALIDADOR_RCA.SF_OBT_TOT_CONTROL_RCA_X_SEC ( i_cod_reporte, i_anopro, i_mespro, i_codemp, i_numsec, i_dia_refer, i_cod_sec_envio );
  RETURN o_tot_control;
EXCEPTION
   WHEN OTHERS THEN
        RETURN 0;
END SF_OBT_TOT_CONTROL_RCA_X_SEC;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOT_CONTROL_RCD_X_SEC
        (i_anopro  IN VARCHAR2,
         i_mespro  IN VARCHAR2,
         i_codemp  IN VARCHAR2,
         i_numsec  IN NUMBER)
-- -------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Agosto 2002
-- Objetivo: Obtiene el Total de Ocurrencias para un control RCD.
-- -------------------------------------------------------------------
RETURN NUMBER IS
  o_tot_control  NUMBER(3);

BEGIN
   SELECT count(1)
     INTO o_tot_control
     FROM CRA_VAL_CONTROLES_RCD_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B"
    WHERE A.ano_refer        = i_anopro
      AND A.mes_refer        = i_mespro
      AND A.cod_empresa      = i_codemp
      AND A.cod_control NOT IN (41, 58, 80)
      AND A.num_sec_reg      = i_numsec
      AND A.num_sec_cta     >= 0
      AND B.ano_refer        = A.ano_refer
      AND B.mes_refer        = A.mes_refer
      AND B.cod_reporte      = 'RCD'
      AND B.cod_control      = A.cod_control
      AND B.tip_control_val <> 'A';

   IF SQL%Rowcount = 0 THEN
      RETURN 0;
   ELSE
      RETURN o_tot_control;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN 0;
END SF_OBT_TOT_CONTROL_RCD_X_SEC;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOT_CONTROL_RTC_X_SEC
        (i_anopro  IN VARCHAR2,
         i_mespro  IN VARCHAR2,
         i_codemp  IN VARCHAR2,
         i_numsec  IN NUMBER)
-- -------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el Total de Ocurrencias para un control RTC.
-- -------------------------------------------------------------------
RETURN NUMBER IS
  o_tot_control  NUMBER(3);

BEGIN
   SELECT count(1)
     INTO o_tot_control
     FROM CRA_VAL_CONTROLES_RTC_X_SEC  "A",
          CRA_CONTROL_HIS_VALIDACION   "B"
    WHERE A.ano_refer        = i_anopro
      AND A.mes_refer        = i_mespro
      AND A.cod_empresa      = i_codemp
      AND A.cod_control NOT IN (41, 58, 80)
      AND A.num_sec_reg      = i_numsec
      AND A.num_sec_cta     >= 0
      AND B.ano_refer        = A.ano_refer
      AND B.mes_refer        = A.mes_refer
      AND B.cod_reporte      = 'RTC'
      AND B.cod_control      = A.cod_control
      AND B.tip_control_val <> 'A';

   IF SQL%Rowcount = 0 THEN
      RETURN 0;
   ELSE
      RETURN o_tot_control;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN 0;
END SF_OBT_TOT_CONTROL_RTC_X_SEC;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_EMPR_DEV
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
-- ------------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el total del valor concepto Total Deuda de la Empresa con Observaciones.
-- ------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda  NUMBER(15,2);

BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda
     INTO o_val_tot_deuda
     FROM cra_valid_dev_saldos_rcd    "A",
          cra_rel_his_concepto_cuenta "B"
    WHERE A.ano_refer      = i_ano_val
      AND A.mes_refer      = i_mes_val
      AND A.cod_empresa    = i_cod_empresa
      AND A.cod_cuenta     = B.cod_cta
      AND A.tip_formulario = '1'
      AND B.ano_refer      = A.ano_refer
      AND B.mes_refer      = A.mes_refer
      AND B.tip_plan       = 'MF'
      AND B.num_version    = 1
      AND B.cod_concepto   = 53;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_EMPR_DEV;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_ERRORES_EMPR_DEV
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- --------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el numero total de errores de la Empresa con Observaciones.
-- --------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_errores  NUMBER(7);

BEGIN
/*
   SELECT SUM(num_veces) val_tot_errores
     INTO o_val_tot_errores
     FROM cra_dev_controles_x_empresa
    WHERE ano_refer    = i_ano_val
      AND mes_refer    = i_mes_val
      AND cod_reporte  = i_cod_reporte
      AND cod_empresa  = i_cod_empresa;
*/
   IF i_cod_reporte = 'RCD' THEN
      SELECT COUNT(DISTINCT num_sec_reg||num_sec_cta) val_tot_errores
        INTO o_val_tot_errores
        FROM cra_dev_controles_rcd_x_sec
       WHERE ano_refer    = i_ano_val
         AND mes_refer    = i_mes_val
         AND cod_empresa  = i_cod_empresa;
   END IF;

   IF i_cod_reporte = 'RTC' THEN
      SELECT COUNT(DISTINCT num_sec_reg||num_sec_cta) val_tot_errores
        INTO o_val_tot_errores
        FROM cra_dev_controles_rtc_x_sec
       WHERE ano_refer    = i_ano_val
         AND mes_refer    = i_mes_val
         AND cod_empresa  = i_cod_empresa;
   END IF;

   IF i_cod_reporte IN ('RCA','RCM','RCT','RCO') THEN
      SELECT COUNT(DISTINCT s.num_sec_reg||s.num_sec_cta) val_tot_errores
        INTO o_val_tot_errores
        FROM cra_dev_controles_x_sec s
       WHERE s.cod_reporte  = i_cod_reporte
         AND s.ano_refer    = i_ano_val
         AND s.mes_refer    = i_mes_val
         AND s.cod_empresa  = i_cod_empresa
         AND s.dia_refer     = i_dia_refer
         AND s.cod_sec_envio = i_cod_sec_envio;
   END IF;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_errores;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_ERRORES_EMPR_DEV;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLIENTES_EMPR_DEV
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- ------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el numero total de clientes de la Empresa con observaciones.
-- ------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_clientes  NUMBER(8);

BEGIN
   IF i_cod_reporte = 'RCD' THEN
      SELECT MAX(num_sec_reg) val_tot_clientes
        INTO o_val_tot_clientes
        FROM cra_valid_dev_identif_rcd
       WHERE ano_refer       = i_ano_val
         AND mes_refer       = i_mes_val
         AND cod_empresa     = i_cod_empresa
         AND tip_formulario  = '1';
   END IF;
   IF i_cod_reporte = 'RTC' THEN
      SELECT MAX(num_sec_reg) val_tot_clientes
        INTO o_val_tot_clientes
        FROM cra_valid_dev_identif_rtc
       WHERE ano_refer       = i_ano_val
         AND mes_refer       = i_mes_val
         AND cod_empresa     = i_cod_empresa
         AND tip_formulario  = '1';
   END IF;

   IF i_cod_reporte IN ('RCA','RCM','RCT','RCO') THEN
      SELECT MAX(i.num_sec_reg) val_tot_clientes
        INTO o_val_tot_clientes
        FROM cra_valid_dev_identif i
       WHERE i.cod_reporte     = i_cod_reporte
         AND i.ano_refer       = i_ano_val
         AND i.mes_refer       = i_mes_val
         AND i.cod_empresa     = i_cod_empresa
         AND i.dia_refer       = i_dia_refer
         AND i.cod_sec_envio   = i_cod_sec_envio
         AND i.tip_formulario  = '1';
   END IF;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_clientes;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLIENTES_EMPR_DEV;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_ERR_EMPR_DEV
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- -------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el numero total de clientes con controles observados en la Empresa.
-- -------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err  NUMBER(8);

BEGIN
   IF i_cod_reporte = 'RCD' THEN
      SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
        INTO o_val_tot_cli_err
        FROM CRA_DEV_CONTROLES_RCD_X_SEC  "A",
             CRA_CONTROL_HIS_VALIDACION   "B"
       WHERE A.ano_refer    = i_ano_val
         AND A.mes_refer    = i_mes_val
         AND A.cod_empresa  = i_cod_empresa
         AND A.ano_refer    = B.ano_refer
         AND A.mes_refer    = B.mes_refer
         AND B.cod_reporte  = i_cod_reporte
         AND A.cod_control  = B.cod_control
         AND B.tip_control_val NOT IN ('A', 'D');
   END IF;

   IF i_cod_reporte in ('RCA','RCM','RCT','RCO') THEN
      SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
        INTO o_val_tot_cli_err
        FROM CRA_DEV_CONTROLES_X_SEC  "A",
             CRA_CONTROL_HIS_VALIDACION   "B"
       WHERE A.cod_reporte  = i_cod_reporte
         AND A.ano_refer    = i_ano_val
         AND A.mes_refer    = i_mes_val
         AND A.cod_empresa  = i_cod_empresa
         AND A.dia_refer     = i_dia_refer
         AND A.cod_sec_envio = i_cod_sec_envio
         AND A.ano_refer    = B.ano_refer
         AND A.mes_refer    = B.mes_refer
         AND B.cod_reporte  = i_cod_reporte
         AND A.cod_control  = B.cod_control
         AND B.tip_control_val NOT IN ('A', 'D');
   END IF;

   IF i_cod_reporte = 'RTC' THEN
      SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
        INTO o_val_tot_cli_err
        FROM CRA_DEV_CONTROLES_RTC_X_SEC  "A",
             CRA_CONTROL_HIS_VALIDACION   "B"
       WHERE A.ano_refer    = i_ano_val
         AND A.mes_refer    = i_mes_val
         AND A.cod_empresa  = i_cod_empresa
         AND A.ano_refer    = B.ano_refer
         AND A.mes_refer    = B.mes_refer
         AND B.cod_reporte  = i_cod_reporte
         AND A.cod_control  = B.cod_control
         AND B.tip_control_val NOT IN ('A', 'D');
    END IF;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_cli_err;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_ERR_EMPR_DEV;

-----------------------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_OBSERV_DEV
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2)
-- --------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el total del valor concepto Total Deuda de la Empresa
--           con Observaciones. (No incluye Alertas y Cuadre).
-- --------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda_obs  NUMBER(15,2);
--
BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda_obs
     INTO o_val_tot_deuda_obs
     FROM CRA_VALID_DEV_SALDOS_RCD    "A",
          CRA_REL_HIS_CONCEPTO_CUENTA "B"
    WHERE A.ano_refer      = i_ano_val
      AND A.mes_refer      = i_mes_val
      AND A.cod_empresa    = i_cod_empresa
      AND A.tip_formulario = '1'
      AND A.num_sec_reg  IN (SELECT DISTINCT C.num_sec_reg
                               FROM CRA_DEV_CONTROLES_RCD_X_SEC  "C",
                                    CRA_CONTROL_HIS_VALIDACION   "D"
                              WHERE C.ano_refer    = i_ano_val
                                AND C.mes_refer    = i_mes_val
                                AND C.cod_empresa  = i_cod_empresa
--                                AND C.ind_pro_val  = 'VA'
                                AND C.ano_refer    = D.ano_refer
                                AND C.mes_refer    = D.mes_refer
                                AND D.cod_reporte  = 'RCD'
                                AND C.cod_control  = D.cod_control
                                AND D.tip_control_val NOT IN ('A', 'D'))
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_cta      = A.cod_cuenta
      AND B.tip_plan     = 'MF'
      AND B.num_version  = 1
      AND B.cod_concepto = 53;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda_obs;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_OBSERV_DEV;

-----------------------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_DEUDA_TIPO_DEV
        (i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_tip_control   IN VARCHAR2)
-- --------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el total del valor concepto Total Deuda de la Empresa
--           con Observaciones, por tipo de control. (No incluye Alertas y Cuadre).
-- --------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_deuda_obs  NUMBER(15,2);
--
BEGIN
   SELECT SUM(A.val_saldo) val_tot_deuda_obs
     INTO o_val_tot_deuda_obs
     FROM CRA_VALID_DEV_SALDOS_RCD    "A",
          CRA_REL_HIS_CONCEPTO_CUENTA "B"
    WHERE A.ano_refer      = i_ano_val
      AND A.mes_refer      = i_mes_val
      AND A.cod_empresa    = i_cod_empresa
      AND A.tip_formulario = '1'
      AND A.num_sec_reg  IN (SELECT DISTINCT C.num_sec_reg
                               FROM CRA_DEV_CONTROLES_RCD_X_SEC "C",
                                    CRA_CONTROL_HIS_VALIDACION  "D"
                              WHERE C.ano_refer       = i_ano_val
                                AND C.mes_refer       = i_mes_val
                                AND C.cod_empresa     = i_cod_empresa
--                                AND C.ind_pro_val     = 'VA'
                                AND C.ano_refer       = D.ano_refer
                                AND C.mes_refer       = D.mes_refer
                                AND D.cod_reporte     = 'RCD'
                                AND C.cod_control     = D.cod_control
                                AND D.tip_control_val = i_tip_control)
      AND B.ano_refer    = A.ano_refer
      AND B.mes_refer    = A.mes_refer
      AND B.cod_cta      = A.cod_cuenta
      AND B.tip_plan     = 'MF'
      AND B.num_version  = 1
      AND B.cod_concepto = 53;
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_deuda_obs;
   END IF;
--
EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_DEUDA_TIPO_DEV;

----------------------------------------------------------------------

FUNCTION SF_OBT_TOTAL_CLI_ERR_TIPO_DEV
        (i_cod_reporte   IN VARCHAR2,
         i_ano_val       IN VARCHAR2,
         i_mes_val       IN VARCHAR2,
         i_cod_empresa   IN VARCHAR2,
         i_tip_control   IN VARCHAR2,
         i_dia_refer     IN VARCHAR2 default '01',
         i_cod_sec_envio IN VARCHAR2 default '01' )
-- ----------------------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene el numero total de clientes observados con error de Validacion por tipo de control.
-- ----------------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_val_tot_cli_err_tip  NUMBER(8);

BEGIN
   IF i_cod_reporte = 'RCD' THEN
      SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
        INTO o_val_tot_cli_err_tip
        FROM CRA_DEV_CONTROLES_RCD_X_SEC  "A",
             CRA_CONTROL_HIS_VALIDACION   "B"
       WHERE A.ano_refer       = i_ano_val
         AND A.mes_refer       = i_mes_val
         AND A.cod_empresa     = i_cod_empresa
         AND A.ano_refer       = B.ano_refer
         AND A.mes_refer       = B.mes_refer
         AND B.cod_reporte     = 'RCD'
         AND A.cod_control     = B.cod_control
         AND B.tip_control_val = i_tip_control;
   END IF;

   IF i_cod_reporte = 'RTC' THEN
      SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
        INTO o_val_tot_cli_err_tip
        FROM CRA_DEV_CONTROLES_RTC_X_SEC  "A",
             CRA_CONTROL_HIS_VALIDACION   "B"
       WHERE A.ano_refer       = i_ano_val
         AND A.mes_refer       = i_mes_val
         AND A.cod_empresa     = i_cod_empresa
         AND A.ano_refer       = B.ano_refer
         AND A.mes_refer       = B.mes_refer
         AND B.cod_reporte     = 'RTC'
         AND A.cod_control     = B.cod_control
         AND B.tip_control_val = i_tip_control;
   END IF;

   IF i_cod_reporte IN ('RCA','RCM','RCT','RCO') THEN
      SELECT COUNT(DISTINCT A.num_sec_reg) val_tot_cli_err
        INTO o_val_tot_cli_err_tip
        FROM CRA_DEV_CONTROLES_X_SEC  "A",
             CRA_CONTROL_HIS_VALIDACION   "B"
       WHERE A.cod_reporte     = i_cod_reporte
         AND A.ano_refer       = i_ano_val
         AND A.mes_refer       = i_mes_val
         AND A.cod_empresa     = i_cod_empresa
         AND A.dia_refer     = i_dia_refer
         AND A.cod_sec_envio = i_cod_sec_envio
         AND A.ano_refer       = B.ano_refer
         AND A.mes_refer       = B.mes_refer
         AND B.cod_reporte     = i_cod_reporte
         AND A.cod_control     = B.cod_control
         AND B.tip_control_val = i_tip_control;
   END IF;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      RETURN o_val_tot_cli_err_tip;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
        RETURN NULL;
END SF_OBT_TOTAL_CLI_ERR_TIPO_DEV;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_DOCID_NAT
        (i_tip_doc_iden    VARCHAR2,
         i_num_doc_iden    VARCHAR2)
-- ---------------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene codigo SBS de persona natural por numero de documento de identidad
-- ---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_ident   NUMBER(10);

BEGIN
   SELECT MIN(cod_sbs)
     INTO o_cod_sbs_ident
     FROM CRI_PERSONA_NAT
    WHERE tip_docto_ident = i_tip_doc_iden
      AND num_docto_ident = i_num_doc_iden;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (o_cod_sbs_ident);
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_ident);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_ident := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_ident;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_DOCID_NAT;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_DOCID_NAT_N
        (i_tip_doc_iden   IN VARCHAR2,
         i_num_doc_iden   IN VARCHAR2,
         i_num_secuencia  IN NUMBER,
         i_reporte        IN VARCHAR2,
         i_anopro         IN VARCHAR2,
         i_mespro         IN VARCHAR2,
         i_codemp         IN VARCHAR2,
         i_cod_reporte    IN VARCHAR2 DEFAULT 'RCD',
         i_dia_refer      IN VARCHAR2 default '01',
         i_cod_sec_envio  IN VARCHAR2 default '01'
         )
RETURN NUMBER
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    12/04/2005    Oracle 8i
---------------------
--       Parametros
--           i_tip_doc_iden :  Tipo del numero de documento en analisis
--           i_num_doc_iden :  Numero de Doc de Identidad a validar
--           i_num_secuencia :  Numero de secuencia en analisis
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
--           i_anopro   :  Año de referencia.
--           i_mespro   :  Mes de referencia.
--           i_codemp :  Codigo de la Entidad.
---------------------
--       Descripcion
--           Obtiene codigo SBS de persona natural por numero de documento de identidad
--           en caso de existir mas de una coincidencia realiza comparacion de nombres
-- --------------------------------------------------------------------------------------------------------------------
-- MODIFICACIONES:
-- JCFS 2015-09: Se aumentan los nuevos parametros dia_refer y cod_sec_envio, con valores por defecto
-- --------------------------------------------------------------------------------------------------------------------
-- Ejecucion
--  PK_VALIDADOR.SF_BUSCA_CLIENTE_X_DOCID_NAT_N ('1','12345678',2300,'RCD','2005','03','00102');
---------------------
IS
  o_cod_sbs_ident             NUMBER(10);
  ln_count                    NUMBER(2);
  ln_count_coincidencias      NUMBER(2);
  ln_count_coincidencias_ant  NUMBER(2);
  ln_suma_pesos               NUMBER(2);
  ln_suma_pesos_ant           NUMBER(2);
  lv_ape_paterno     cri_persona_nat.ape_paterno%type;
  lv_ape_materno     cri_persona_nat.ape_materno%type;
  lv_ape_casada      cri_persona_nat.ape_casada%type;
  lv_nom_persona     cri_persona_nat.nom_persona%type;
  lv_segundo_nombre  cri_persona_nat.segundo_nombre%type;

-- Cursor para obtener datos del deudor de los maestros de personas
-- Realiza la Busqueda por Tipo y Numero de documento de ID
-- Adicionalmente verifica que no sea Reemplazado.
-- ¿ ¿ ¿ ... ??? Esta pendiente el tema de si compara nombres en esta etapa
-- Verifica que al menos coincida uno de los nombres.

 CURSOR cur_id_per_nat IS
  select t.cod_sbs
        ,t.ape_paterno
        ,t.ape_materno
        ,t.ape_casada
        ,t.nom_persona
        ,t.segundo_nombre
        ,TRIM(t.nombre)  as  nombre
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_ape_paterno   ,'   ') ||' '),0),0,0,1) b1
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_ape_materno   ,'   ') ||' '),0),0,0,1) b2
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_ape_casada    ,'   ') ||' '),0),0,0,1) b3
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_nom_persona   ,'   ') ||' '),0),0,0,1) b4
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_segundo_nombre,'   ') ||' '),0),0,0,1) b5
   from
   (
    SELECT n.cod_sbs
          ,trim(n.ape_paterno)     as ape_paterno
          ,trim(n.ape_materno)     as ape_materno
          ,trim(n.ape_casada)      as ape_casada
          ,trim(n.nom_persona)     as nom_persona
          ,trim(n.segundo_nombre)  as segundo_nombre
          ,' ' || trim(TRIM(trim(n.ape_paterno)  || ' ' || trim(n.ape_materno)) || ' ' || trim(n.ape_casada )) || ' ' ||
                TRIM(trim(n.nom_persona)  || ' ' || trim(n.segundo_nombre)) || ' ' as nombre
          ,p.tip_condicion
      FROM cri_persona p, CRI_PERSONA_NAT N
     WHERE p.cod_sbs = n.cod_sbs
       AND tip_docto_ident = i_tip_doc_iden
       AND num_docto_ident = i_num_doc_iden
       AND not (upper(nvl(n.segundo_nombre,' ')) like '%Y/O%')
   ) t
-- where (t.tip_condicion is null or t.tip_condicion = 'RPZTE')  and
 where (  t.nombre like  '%' || nvl(' ' || lv_ape_paterno    ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_ape_materno    ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_ape_casada     ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_nom_persona    ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_segundo_nombre ||' '   ,'   ') || '%'
       )
   ;
     -- AND VERIFICA NOMBRES?

-----------------------------------------------------------------------
-- Cursor para obtener datos del deudor de los maestros de personas
-- Realiza la Busqueda por Tipo y Numero de documento de ID
-- Se diferencia al cursor anterior debido a que este obtiene
-- el numero de documento excluyendo los ceros

 CURSOR cur_id_per_nat_proc_2 IS
  select t.cod_sbs
        ,t.ape_paterno
        ,t.ape_materno
        ,t.ape_casada
        ,t.nom_persona
        ,t.segundo_nombre
        ,TRIM(t.nombre)  as  nombre
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_ape_paterno   ,'   ') ||' '),0),0,0,1) b1
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_ape_materno   ,'   ') ||' '),0),0,0,1) b2
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_ape_casada    ,'   ') ||' '),0),0,0,1) b3
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_nom_persona   ,'   ') ||' '),0),0,0,1) b4
        ,decode(nvl(instr(t.nombre,' ' || nvl(lv_segundo_nombre,'   ') ||' '),0),0,0,1) b5
   from cri_persona p,
   (
    SELECT /*+ INDEX (n CRI_PERSONA_NAT_02)*/
           n.cod_sbs
          ,trim(n.ape_paterno)     as ape_paterno
          ,trim(n.ape_materno)     as ape_materno
          ,trim(n.ape_casada)      as ape_casada
          ,trim(n.nom_persona)     as nom_persona
          ,trim(n.segundo_nombre)  as segundo_nombre
          ,' ' || trim(TRIM(trim(n.ape_paterno)  || ' ' || trim(n.ape_materno)) || ' ' || trim(n.ape_casada )) || ' ' ||
                TRIM(trim(n.nom_persona)  || ' ' || trim(n.segundo_nombre)) || ' ' as nombre
          , n.tip_docto_ident
          , decode(nvl(test_number(n.num_docto_ident),-1), -1, n.num_docto_ident, test_number(n.num_docto_ident) ) AS num_docto_ident
      FROM CRI_PERSONA_NAT N
     WHERE n.tip_docto_ident = i_tip_doc_iden
       AND n.tip_docto_ident not in ('1')
       AND n.num_docto_ident like '%' || i_num_doc_iden || '%'
       AND not (upper(nvl(n.segundo_nombre,' ')) like '%Y/O%')
   ) t
-- where (p.tip_condicion is null or p.tip_condicion = 'RPZTE')   and
 where p.cod_sbs = t.cod_sbs
   and t.tip_docto_ident = i_tip_doc_iden
   and t.num_docto_ident = decode(nvl(test_number(i_num_doc_iden),-1), -1, i_num_doc_iden, test_number(i_num_doc_iden)
                                  )
   and (  t.nombre like  '%' || nvl(' ' || lv_ape_paterno    ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_ape_materno    ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_ape_casada     ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_nom_persona    ||' '   ,'   ') || '%'
       or t.nombre like  '%' || nvl(' ' || lv_segundo_nombre ||' '   ,'   ') || '%'
       ) ;

  -- OBTIENE Datos reportados en el RCD
  CURSOR cur_id_reportada_rcd IS
  SELECT i.cod_unico_clie,
         i.tip_doc_trib,
         i.num_doc_trib,
         i.tip_doc_iden,
         i.num_doc_iden,
         i.tip_persona,
         trim(i.nom_cliente)    as nom_cliente,
         trim(i.nom_cliente)    as ape_paterno,
         trim(i.ape_materno)    as ape_materno,
         trim(i.ape_casada)     as ape_casada,
         trim(i.primer_nombre)  as primer_nombre,
         trim(i.segundo_nombre) as segundo_nombre,
         i.genero,
         i.estado_civil
    FROM CRA_VALID_IDENTIF_RCD I
   WHERE i.ano_refer      = i_anopro
     AND i.mes_refer      = i_mespro
     AND i.cod_empresa    = i_codemp
     AND i.num_sec_reg    = i_num_secuencia
     AND i.cod_sbs        = 0
     AND i.tip_formulario = '1' ;

  -- OBTIENE Datos reportados en los demás reportes que no son el RCD ('RCA','RCM','RCT','RCO')
  CURSOR cur_id_reportada IS
  SELECT i.cod_unico_clie,
         i.tip_doc_trib,
         i.num_doc_trib,
         i.tip_doc_iden,
         i.num_doc_iden,
         i.tip_persona,
         trim(i.nom_cliente)    as nom_cliente,
         trim(i.nom_cliente)    as ape_paterno,
         trim(i.ape_materno)    as ape_materno,
         trim(i.ape_casada)     as ape_casada,
         trim(i.primer_nombre)  as primer_nombre,
         trim(i.segundo_nombre) as segundo_nombre,
         i.genero,
         i.estado_civil
    FROM CRA_VALID_IDENTIF I
   WHERE i.cod_reporte    = i_cod_reporte
     AND i.ano_refer      = i_anopro
     AND i.mes_refer      = i_mespro
     AND i.cod_empresa    = i_codemp
     AND i.num_sec_reg    = i_num_secuencia
     AND i.cod_sbs        = 0
     AND i.tip_formulario = '1'
     AND i.dia_refer      = i_dia_refer
     AND i.cod_sec_envio  = i_cod_sec_envio ;

BEGIN
   -- Obtiene los datos del Deudor reportado
   IF i_cod_reporte = 'RCD' THEN
      FOR cur_id_rep_rcd IN cur_id_reportada_rcd LOOP
          lv_ape_paterno    := cur_id_rep_rcd.ape_paterno;
          lv_ape_materno    := cur_id_rep_rcd.ape_materno;
          lv_ape_casada     := cur_id_rep_rcd.ape_casada;
          lv_nom_persona    := cur_id_rep_rcd.primer_nombre;
          lv_segundo_nombre := cur_id_rep_rcd.segundo_nombre;
      END LOOP;
   END IF;

   IF i_cod_reporte IN ('RCA','RCM','RCT','RCO') THEN
      FOR cur_id_rep IN cur_id_reportada LOOP
          lv_ape_paterno    := cur_id_rep.ape_paterno;
          lv_ape_materno    := cur_id_rep.ape_materno;
          lv_ape_casada     := cur_id_rep.ape_casada;
          lv_nom_persona    := cur_id_rep.primer_nombre;
          lv_segundo_nombre := cur_id_rep.segundo_nombre;
      END LOOP;
   END IF;

   -- Inicializa variables para el nuevo calculo
    o_cod_sbs_ident            := 0;
    ln_count                   := 0;
    ln_count_coincidencias     := 0;
    ln_count_coincidencias_ant := 0;
    ln_suma_pesos              := 0;
    ln_suma_pesos_ant          := 0;

   -- Obtiene la lista de los deudores por Tipo y Numero Doc Identidad
   -- Adicionalmente en este cursor realiza un nuevo calculo
   --  encontro + de un registro ==>  Valida el mas aproximado
   --  cambio realizado al programa tradicional

   FOR cur_id IN cur_id_per_nat LOOP
       ln_count := ln_count + 1;

       -- Cuenta el numero de coincidencias encontradas en los nombres
       ln_count_coincidencias := cur_id.b1 + cur_id.b2 + cur_id.b3 + cur_id.b4 + cur_id.b5 ;

       -- Aplica logica booleana, para ello se ha establecido pesos a cada valor encontrado,
       -- esta prioridad se establece en la logica de busqueda
       ln_suma_pesos     :=  (16)*(cur_id.b1) +
                             ( 8)*(cur_id.b2) +
                             ( 4)*(cur_id.b3) +
                             ( 2)*(cur_id.b4) +
                             ( 1)*(cur_id.b5) ;

       ----------------------------------------------------------------------------
       -- obtiene el codigo sbs
       -- para el caso que encunetra mas de un registro prevalece el que tiene mayor incidencias

       IF ln_suma_pesos > 3 THEN
          -- Al obtener un peso mayor a 3 asegura que las coincidencias no sean solamente por nombres
          -------------       -------------------
          -- ESTA LOGICA SE PUEDE OPTIMIZAR OTORGANDO REGLAS DE DECISION
          -- ENTRE EL NUMERO DE COINCIDENCIAS Y LOS PESOS ESTABLECIDOS
          -------------       -------------------
          IF (ln_count_coincidencias > ln_count_coincidencias_ant) OR
             (ln_count_coincidencias = ln_count_coincidencias_ant  AND
                ln_suma_pesos > ln_suma_pesos_ant)                 THEN
               -- Si las coincidencias son iguales, asume el de mayor peso
               o_cod_sbs_ident := cur_id.cod_sbs;
          END IF;
       END IF;
       ----------------------------------------------------------------------------
       -- obtiene el codigo sbs
       -- para el caso que encunetra mas de un registro prevalece el que tiene mayor peso
       ln_count_coincidencias_ant := ln_count_coincidencias;
       ln_suma_pesos_ant          := ln_suma_pesos ;
   END LOOP;

   ----------------------------------------------------------
   -------  o_cod_sbs_ident = 0 NO SE ASIGNO NINGUN CODIGO
   -------    REALIZAR NUEVA BUSQUEDA
   ----------------------------------------------------------
   IF nvl(o_cod_sbs_ident,0) = 0 THEN
       -- Inicializa variables para el nuevo calculo
       ln_count                   := 0;
       ln_count_coincidencias     := 0;
       ln_count_coincidencias_ant := 0;
       ln_suma_pesos              := 0;
       ln_suma_pesos_ant          := 0;

      -- Obtiene la lista de los deudores por Tipo y Numero Doc Identidad
      -- Adicionalmente en este cursor realiza un nuevo calculo
      --  encontro + de un registro ==>  Valida el mas aproximado
      --  cambio realizado al programa tradicional

      FOR cur_id_proc_2 IN cur_id_per_nat_proc_2 LOOP
          ln_count := ln_count + 1;

          -- Cuenta el numero de coincidencias encontradas en los nombres
          ln_count_coincidencias     := cur_id_proc_2.b1 +
                                        cur_id_proc_2.b2 +
                                        cur_id_proc_2.b3 +
                                        cur_id_proc_2.b4 +
                                        cur_id_proc_2.b5 ;

          -- Aplica logica booleana, para ello se ha establecido
          -- pesos a cada valor encontrado, esta prioridad se establece en
          -- la logica de busqueda

          ln_suma_pesos     :=  (16)*(cur_id_proc_2.b1) +
                                ( 8)*(cur_id_proc_2.b2) +
                                ( 4)*(cur_id_proc_2.b3) +
                                ( 2)*(cur_id_proc_2.b4) +
                                ( 1)*(cur_id_proc_2.b5) ;

          ----------------------------------------------------------------------------
          -- obtiene el codigo sbs
          -- para el caso que encunetra mas de un registro prevalece el que tiene mayor incidencias

          IF ln_suma_pesos > 3 THEN
             -- Al obtener un peso mayor a 3 asegura que las coincidencias no sean solamente por nombres
             -------------       -------------------
             -- ESTA LOGICA SE PUEDE OPTIMIZAR OTORGANDO REGLAS DE DECISION
             -- ENTRE EL NUMERO DE COINCIDENCIAS Y LOS PESOS ESTABLECIDOS
             -------------       -------------------
             IF (ln_count_coincidencias > ln_count_coincidencias_ant) OR
                (ln_count_coincidencias = ln_count_coincidencias_ant  AND
                   ln_suma_pesos > ln_suma_pesos_ant)                 THEN
                  -- Si las coincidencias son iguales, asume el de mayor peso
                  o_cod_sbs_ident := cur_id_proc_2.cod_sbs;
             END IF;
          END IF;
          ----------------------------------------------------------------------------
          -- obtiene el codigo sbs
          -- para el caso que encunetra mas de un registro prevalece el que tiene mayor peso
          ln_count_coincidencias_ant := ln_count_coincidencias;
          ln_suma_pesos_ant          := ln_suma_pesos ;
      END LOOP;
   END IF;
   ----------------------------------------------------------

   --  encontro + de un registro ==>  Valida el mas aproximado
   --  cambio realizado al programa tradicional

   --  no encontro ningun registro ==>  retorna NULO
   IF (ln_count <= 0) OR (nvl(o_cod_sbs_ident,0) = 0) THEN
      RETURN NULL;
   END IF;

   --  encontro un registro o una aproximacion ==>  Valida si es reeemplazo
      n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (o_cod_sbs_ident);
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_ident);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_ident := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_ident;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_DOCID_NAT_N;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_DOCID_MAN
        (i_tip_doc_iden    VARCHAR2,
         i_num_doc_iden    VARCHAR2)
-- ---------------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene codigo SBS de manconumos por numero de documento de identidad
-- ---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_ident   NUMBER(10);

BEGIN
   SELECT MIN(cod_sbs)
     INTO o_cod_sbs_ident
     FROM CRI_PERSONA_NOID
    WHERE tip_docto_ident = i_tip_doc_iden
      AND num_docto_ident = i_num_doc_iden;
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (o_cod_sbs_ident);
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_ident);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_ident := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_ident;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_DOCID_MAN;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_NUNICO
        (i_cod_unico    VARCHAR2,
         i_cod_empresa  VARCHAR2)
-- ---------------------------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene codigo SBS de persona por numero unico de la empresa informante.
-- ---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_unico   NUMBER(10);
--
BEGIN
   SELECT MIN(cod_sbs)
     INTO o_cod_sbs_unico
     FROM CRI_DEUDOR_XENT
    WHERE cod_unico_entidad = i_cod_unico
      AND cod_ent_vig       = i_cod_empresa;
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (o_cod_sbs_unico);
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_unico);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_unico := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_unico;
   END IF;
--
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_NUNICO;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_NUNICO_TIP
        (i_cod_unico    VARCHAR2,
         i_cod_empresa  VARCHAR2,
         i_tip_persona  VARCHAR2)
-- ---------------------------------------------------------------------------------------------
-- Autor   : Francisco Vite Shelton - Julio 2004
-- Objetivo: Obtiene codigo SBS de persona por numero unico de la empresa informante.
--           establece como criterio adicional el tipo de persona
--           Se establecio este nuevo parametro para certificar que el codigo SBS
--           corresponda al tipo de persona reportado
-- ---------------------------------------------------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_unico   NUMBER(10);
BEGIN
    -- realiza la busqueda en el maestro de Naturales
    IF i_tip_persona = '1' THEN
        SELECT Min(n.cod_sbs)
          INTO o_cod_sbs_unico
          FROM cri_persona_nat n
             , cri_persona p
         WHERE n.cod_sbs = p.cod_sbs
           AND n.cod_sbs in  ( SELECT cod_sbs
                                 FROM CRI_DEUDOR_XENT
                                WHERE cod_ent_vig  = i_cod_empresa
                                  AND cod_unico_entidad = i_cod_unico
                              );
    ELSE
        -- realiza la busqueda en el maestro de Juridicos
        IF i_tip_persona = '2' THEN
            SELECT Min(j.cod_sbs)
              INTO o_cod_sbs_unico
              FROM cri_persona_jur j
                 , cri_persona p
              WHERE j.cod_sbs = p.cod_sbs
                AND j.cod_sbs in  ( SELECT cod_sbs
                                      FROM CRI_DEUDOR_XENT
                                     WHERE cod_ent_vig  = i_cod_empresa
                                       AND cod_unico_entidad = i_cod_unico
                                   );
        ELSE
           -- realiza la busqueda en el maestro de Mancomunos
           IF i_tip_persona = '3' THEN
                SELECT Min(m.cod_sbs)
                  INTO o_cod_sbs_unico
                  FROM cri_persona_noid m
                     , cri_persona p
                 WHERE m.cod_sbs = p.cod_sbs
                   AND m.cod_sbs in  ( SELECT cod_sbs
                                         FROM CRI_DEUDOR_XENT
                                        WHERE cod_ent_vig  = i_cod_empresa
                                          AND cod_unico_entidad = i_cod_unico
                                      );
           END IF;
        END IF;
    END IF;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (o_cod_sbs_unico);
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_unico);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_unico := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_unico;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_NUNICO_TIP;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_SIGLA_JUR
        (i_sigla    VARCHAR2)
-- -----------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene codigo SBS de Persona Juridica por Sigla.
-- -----------------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_siglas   NUMBER(10);

BEGIN
   SELECT MIN(cod_sbs)
     INTO o_cod_sbs_siglas
     FROM CRI_PERSONA_JUR
    WHERE des_siglas = i_sigla;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (o_cod_sbs_siglas);
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_siglas);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_siglas := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_siglas;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_SIGLA_JUR;

----------------------------------------------------------------------
FUNCTION SF_BUSCA_CLIENTE_X_SIGLA_MAN
        (i_sigla    VARCHAR2)
-- ----------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene codigo SBS de Mancomunos por Sigla.
-- ----------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_siglas   NUMBER(10);
--
BEGIN
   SELECT MIN(cod_sbs)
     INTO o_cod_sbs_siglas
     FROM CRI_PERSONA_NOID
    WHERE des_siglas = i_sigla;
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      n_tip_condicion := SF_VERIFICA_REEMPLAZO_CODSBS (o_cod_sbs_siglas);
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_siglas);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_siglas := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_siglas;
   END IF;
--
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_SIGLA_MAN;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_RUC_8
        (i_ruc_8        VARCHAR2,
         i_tip_persona  VARCHAR2)
-- -------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene codigo SBS de Persona por RUC de 8 digitos.
-- -------------------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_ruc   NUMBER(10);
--
BEGIN
   SELECT MIN(p.cod_sbs),
          p.tip_condicion
     INTO o_cod_sbs_ruc,
          n_tip_condicion
     FROM CRI_PERSONA p
    WHERE p.num_ruc = i_ruc_8
      AND (p.tip_condicion <> 'RPZDO' OR p.tip_condicion IS NULL)
      AND p.tip_persona = i_tip_persona
 GROUP BY tip_condicion;
--
   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_ruc);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_ruc := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_ruc;
   END IF;
--
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_RUC_8;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_RUC_11
        (i_ruc_11    VARCHAR2,
         i_tip_persona  VARCHAR2 )
-- -------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Setiembre 2002
-- Objetivo: Obtiene codigo SBS de Persona por RUC de 11 digitos.
-- -------------------------------------------------------------
RETURN NUMBER IS
  o_cod_sbs_ruc   NUMBER(10);

BEGIN
   SELECT MIN(p.cod_sbs)
     INTO o_cod_sbs_ruc
     FROM CRI_PERSONA p
    WHERE p.num_ruc11 = i_ruc_11
      AND (p.tip_condicion <> 'RPZDO' OR p.tip_condicion IS NULL)
      AND p.tip_persona = i_tip_persona;

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      SELECT p.tip_condicion
        INTO n_tip_condicion
        FROM CRI_PERSONA p
       WHERE p.cod_sbs = o_cod_sbs_ruc
         AND (p.tip_condicion <> 'RPZDO' OR p.tip_condicion IS NULL)
         AND p.tip_persona = i_tip_persona;

      IF n_tip_condicion = 'RPZDO' THEN
         n_cod_sbs_ult_rplzte := SF_OBT_CODSBS_REEMPLAZANTE (o_cod_sbs_ruc);
         IF n_cod_sbs_ult_rplzte IS NOT NULL THEN
            IF n_cod_sbs_ult_rplzte > 0 THEN
               o_cod_sbs_ruc := n_cod_sbs_ult_rplzte;
            END IF;
         END IF;
      END IF;
      RETURN o_cod_sbs_ruc;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_RUC_11;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_NOMBRE_JUR
        (i_nombres       IN VARCHAR2)
-- ---------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Noviembre 2002
-- Objetivo: Verifica si existe nombre en maestro de personas (Juridico).
-- ---------------------------------------------------------------------
RETURN VARCHAR2 IS
  o_coinc_nombre      VARCHAR2(1);
  n_nom_razon_social  VARCHAR2(80);
BEGIN
   SELECT MIN(nom_razon_social)
     INTO n_nom_razon_social
     FROM CRI_PERSONA_JUR "A",
          CRI_PERSONA     "B"
    WHERE A.nom_razon_social = i_nombres
      AND B.cod_sbs          = A.cod_sbs
      AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      IF n_nom_razon_social IS NULL THEN
         o_coinc_nombre := NULL;
      ELSE
         o_coinc_nombre := 'S';
      END IF;
      RETURN o_coinc_nombre;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_NOMBRE_JUR;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_NOMBRE_MAN
         (i_nombres  VARCHAR2)
-- ---------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Noviembre 2002
-- Objetivo: Verifica si existe nombre en maestro de personas (Juridico).
-- ---------------------------------------------------------------------
RETURN VARCHAR2 IS
  o_coinc_nombre      VARCHAR2(1);
  n_nom_razon_social  VARCHAR2(80);

BEGIN
   SELECT MIN(nom_razon_social)
     INTO n_nom_razon_social
     FROM CRI_PERSONA_NOID "A",
          CRI_PERSONA      "B"
    WHERE A.nom_razon_social = i_nombres
      AND B.cod_sbs          = A.cod_sbs
      AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      IF n_nom_razon_social IS NULL THEN
         o_coinc_nombre := NULL;
      ELSE
         o_coinc_nombre := 'S';
      END IF;
      RETURN o_coinc_nombre;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_NOMBRE_MAN;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENTE_X_NOMBRE_NAT
         (i_nombres  VARCHAR2)
-- ---------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Noviembre 2002
-- Objetivo: Verifica si existe nombre en maestro de personas (Natural).
-- ---------------------------------------------------------------------
RETURN VARCHAR2 IS
  o_coinc_nombre      VARCHAR2(1);
  n_nom_razon_social  VARCHAR2(80);

BEGIN
   SELECT MIN(A.ape_paterno||' '||A.ape_materno||' '||A.nom_persona)
     INTO n_nom_razon_social
     FROM CRI_PERSONA_NAT "A",
          CRI_PERSONA     "B"
    WHERE (A.ape_paterno||' '||A.ape_materno||' '||A.nom_persona||' '||A.segundo_nombre = i_nombres
       OR A.ape_paterno||' '||A.ape_materno||' '||A.ape_casada||' '||A.nom_persona||' '||A.segundo_nombre = i_nombres)
      AND A.ape_paterno LIKE SUBSTR(i_nombres, 1, instr(i_nombres,' ',1) - 1)||'%'
      AND B.cod_sbs          = A.cod_sbs
      AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

   IF SQL%Rowcount = 0 THEN
      RETURN NULL;
   ELSE
      IF n_nom_razon_social IS NULL THEN
         o_coinc_nombre := NULL;
      ELSE
         o_coinc_nombre := 'S';
      END IF;
      RETURN o_coinc_nombre;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENTE_X_NOMBRE_NAT;

----------------------------------------------------------------------

FUNCTION SF_BUSCA_CLIENT_X_NOM_NAT_808
         (pv_nombres       VARCHAR2,
          pv_ape_pat       VARCHAR2,
          pv_ape_mat       VARCHAR2,
          pv_ape_casada    VARCHAR2,
          pv_nom_pri       VARCHAR2,
          pv_nom_seg       VARCHAR2,
          pv_sexo          VARCHAR2,
          pv_estado_civil  VARCHAR2)
-- ---------------------------------------------------------------------
-- Autor   : Francisco Vite Shelton - Mayo 2004
-- Objetivo: Verifica si existe nombre en maestro de personas (Natural).
-- ---------------------------------------------------------------------
RETURN VARCHAR2 IS
  o_coinc_nombre      VARCHAR2(1);
  n_nom_razon_social  VARCHAR2(80);
  ln_validacion  NUMBER(1);
  ls_nombres    VARCHAR2(120);
  ln_num_reg    NUMBER(5);

BEGIN
   ln_num_reg := 0;

   ln_validacion := SF_DETERMINA_APELLIDO_CASADA( pv_sexo, pv_estado_civil);

   ls_nombres := rtrim(pv_nom_pri || ' ' || pv_nom_seg);
   /*--
   1 : debe reportar apellido casada
   0: no debe reportar ape casada
   -1: error
   -*/

   IF ln_validacion = 1 THEN
        -- es una persona casada
        SELECT MIN(A.ape_paterno||' '||A.ape_materno||' '||A.nom_persona)
          INTO n_nom_razon_social
          FROM CRI_PERSONA_NAT "A",
               CRI_PERSONA     "B"
--         WHERE A.ape_paterno||' '||A.ape_materno||' '|| A.ape_casada ||' '||A.nom_persona ||' '|| A.segundo_nombre = pv_nombres
       WHERE A.ape_paterno = pv_ape_pat
         AND A.ape_materno = pv_ape_mat
         AND A.APE_CASADA  = pv_ape_casada
         AND rtrim(A.nom_persona ||' '|| A.segundo_nombre) = ls_nombres
         AND A.ape_paterno LIKE SUBSTR(pv_nombres, 1, instr(pv_nombres,' ',1) - 1)||'%'
         AND B.cod_sbs          = A.cod_sbs
         AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

         ln_num_reg := nvl(SQL%Rowcount,0);
   END IF;

   IF ln_validacion = 0 OR (ln_validacion = 1 AND ln_num_reg = 0 )THEN
      SELECT MIN(A.ape_paterno||' '||A.ape_materno||' '||A.nom_persona||' '|| A.segundo_nombre)
        INTO n_nom_razon_social
        FROM CRI_PERSONA_NAT "A",
             CRI_PERSONA     "B"
--       WHERE A.ape_paterno||' '||A.ape_materno||' '||A.nom_persona ||' '|| A.segundo_nombre = pv_nombres
       WHERE A.ape_paterno = pv_ape_pat
         AND A.ape_materno = pv_ape_mat
         AND rtrim(A.nom_persona ||' '|| A.segundo_nombre) = ls_nombres
         AND A.ape_paterno LIKE SUBSTR(pv_nombres, 1, instr(pv_nombres,' ',1) - 1)||'%'
         AND B.cod_sbs          = A.cod_sbs
         AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

         ln_num_reg := nvl(SQL%Rowcount,0);
   END IF;

--   IF SQL%Rowcount = 0 THEN
   IF ln_num_reg = 0 THEN
      RETURN NULL;
   ELSE
      IF n_nom_razon_social IS NULL THEN
         o_coinc_nombre := NULL;
      ELSE
         o_coinc_nombre := 'S';
      END IF;
      RETURN o_coinc_nombre;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
   WHEN OTHERS THEN
        RETURN NULL;
END SF_BUSCA_CLIENT_X_NOM_NAT_808;

----------------------------------------------------------------------

FUNCTION SF_CALIF_SEC_VALID_IDENTIF_RCA
        (pv_cod_reporte  VARCHAR2,
         PV_ANO      VARCHAR2,
         PV_MES      VARCHAR2,
         PV_EMPRESA  VARCHAR2,
         PN_CODSBS    NUMBER,
         pv_dia_refer     IN VARCHAR2 default '01',
         pv_cod_sec_envio IN VARCHAR2 default '01' )
-- ---------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Noviembre 2002
-- ---------------------------------------------------------------------
RETURN VARCHAR2 IS
  PV_CLASIF_CLIE  VARCHAR2(320);
BEGIN
  PV_CLASIF_CLIE := PK_VALIDADOR_RCA.SF_CALIF_SEC_VALID_IDENTIF_RCA ( pv_cod_reporte, PV_ANO, PV_MES, PV_EMPRESA, PN_CODSBS, pv_dia_refer, pv_cod_sec_envio );
  RETURN PV_CLASIF_CLIE;
EXCEPTION
   WHEN OTHERS THEN
        PV_CLASIF_CLIE:= '';
END SF_CALIF_SEC_VALID_IDENTIF_RCA;

----------------------------------------------------------------------

FUNCTION SF_CALIF_SEC_VALID_IDENTIF
        (PV_ANO      VARCHAR2,
         PV_MES      VARCHAR2,
         PV_EMPRESA  VARCHAR2,
         PN_CODSBS    NUMBER)
-- ---------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M.
-- Fecha   : 02 Noviembre 2002
-- ---------------------------------------------------------------------
RETURN VARCHAR2 IS

CURSOR CUR_SEC IS
SELECT tip_clasif_clie
  FROM CRA_VALID_IDENTIF_RCD
 WHERE ano_refer      = PV_ANO
   AND mes_refer      = PV_MES
   AND cod_empresa    = PV_EMPRESA
   AND cod_sbs        = PN_CODSBS
   AND tip_formulario = '1';

  PV_CLASIF_CLIE  VARCHAR2(320);
  n_cont          NUMBER(10);

BEGIN
  n_cont := 0;
  PV_CLASIF_CLIE := '';
  FOR A IN cur_sec LOOP
        IF n_cont = 0 THEN
           PV_CLASIF_CLIE := A.tip_clasif_clie;
           n_cont := 1;
        ELSE
           IF A.tip_clasif_clie <> PV_CLASIF_CLIE THEN
              PV_CLASIF_CLIE := '*';
           END IF;
        END IF;
  END LOOP;
  RETURN LTRIM(PV_CLASIF_CLIE);

EXCEPTION
   WHEN OTHERS THEN
        PV_CLASIF_CLIE:= '';
END SF_CALIF_SEC_VALID_IDENTIF;

----------------------------------------------------------------------

FUNCTION SF_CALIF_SEC_VALID_IDENTIF_RTC
        (PV_ANO      VARCHAR2,
         PV_MES      VARCHAR2,
         PV_EMPRESA  VARCHAR2,
         PN_CODSBS    NUMBER)
-- ---------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2004
-- Objetivo: Obtiene Calificaciones de secuencias RTC de Codigo SBS reportado
-- ---------------------------------------------------------------------
RETURN VARCHAR2 IS

CURSOR CUR_SEC IS
SELECT tip_clasif_clie
  FROM CRA_VALID_IDENTIF_RTC
 WHERE ano_refer      = PV_ANO
   AND mes_refer      = PV_MES
   AND cod_empresa    = PV_EMPRESA
   AND cod_sbs        = PN_CODSBS
   AND tip_formulario = '1';

  PV_CLASIF_CLIE  VARCHAR2(320);
  n_cont          NUMBER(10);

BEGIN
   n_cont := 0;
   PV_CLASIF_CLIE := '';
   FOR A IN cur_sec LOOP
      IF n_cont = 0 THEN
         PV_CLASIF_CLIE := A.tip_clasif_clie;
         n_cont := 1;
      ELSE
         IF A.tip_clasif_clie <> PV_CLASIF_CLIE THEN
            PV_CLASIF_CLIE := '*';
         END IF;
      END IF;
   END LOOP;
   RETURN LTRIM(PV_CLASIF_CLIE);

EXCEPTION
   WHEN OTHERS THEN
        PV_CLASIF_CLIE:= '';
END SF_CALIF_SEC_VALID_IDENTIF_RTC;

----------------------------------------------------------------------

FUNCTION SF_SEC_VALID_IDENTIF_RCA
         (pv_cod_reporte  VARCHAR2,
          PV_ANO          VARCHAR2,
          PV_MES          VARCHAR2,
          PV_EMPRESA      VARCHAR2,
          PN_CODSBS       NUMBER,
          pv_dia_refer     IN VARCHAR2 default '01',
          pv_cod_sec_envio IN VARCHAR2 default '01' )
-- ----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Noviembre 2002
-- Objetivo: Obtiene Numeros de secuencias RCD de Codigo SBS reportado
-- ----------------------------------------------------------------------------
RETURN VARCHAR2 IS
  PV_SEC VARCHAR2(520);
BEGIN
   PV_SEC := PK_VALIDADOR_RCA.SF_SEC_VALID_IDENTIF_RCA ( pv_cod_reporte, PV_ANO, PV_MES, PV_EMPRESA, PN_CODSBS, pv_dia_refer, pv_cod_sec_envio );
   RETURN LTRIM(PV_SEC)||'-';
EXCEPTION
   WHEN OTHERS THEN
      PV_SEC:= '';
END;

----------------------------------------------------------------------

FUNCTION SF_SEC_VALID_IDENTIF_RCD
         (PV_ANO       VARCHAR2,
          PV_MES       VARCHAR2,
          PV_EMPRESA   VARCHAR2,
          PN_CODSBS     NUMBER)
-- ----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Noviembre 2002
-- Objetivo: Obtiene Numeros de secuencias RCD de Codigo SBS reportado
-- ----------------------------------------------------------------------------
RETURN VARCHAR2 IS

CURSOR CUR_SEC IS
SELECT NUM_SEC_REG
  FROM CRA_VALID_IDENTIF_RCD
 WHERE ano_refer   = PV_ANO
   AND mes_refer   = PV_MES
   AND cod_empresa = PV_EMPRESA
   AND cod_sbs     = PN_CODSBS
   AND tip_formulario = '1';

  PV_SEC   VARCHAR2(520);
  n_cont   NUMBER(10);

BEGIN
  n_cont := 0;
  PV_SEC := '';
  FOR cur IN CUR_SEC LOOP
        IF n_cont = 0 THEN
           PV_SEC := TO_CHAR(cur.NUM_SEC_REG);
           n_cont := 1;
        ELSE
           PV_SEC:= PV_SEC||'-'||TO_CHAR(cur.NUM_SEC_REG);
        END IF;
        IF LENGTH(PV_SEC) > 510 THEN
           GOTO fin_cursor;
        END IF;
  END LOOP;
  <<fin_cursor>>
  RETURN LTRIM(PV_SEC)||'-';

EXCEPTION
   WHEN OTHERS THEN
        PV_SEC:= '';
END;

----------------------------------------------------------------------

FUNCTION SF_SEC_VALID_IDENTIF_RTC
         (PV_ANO       VARCHAR2,
          PV_MES       VARCHAR2,
          PV_EMPRESA   VARCHAR2,
          PN_CODSBS     NUMBER)
-- ----------------------------------------------------------------------------
-- Autor   : Jaime Lopez-Torres M. - Enero 2004
-- Objetivo: Obtiene Numeros de secuencias RTC de Codigo SBS reportado
-- ----------------------------------------------------------------------------
RETURN VARCHAR2 IS

CURSOR CUR_SEC IS
SELECT NUM_SEC_REG
  FROM CRA_VALID_IDENTIF_RTC
 WHERE ano_refer   = PV_ANO
   AND mes_refer   = PV_MES
   AND cod_empresa = PV_EMPRESA
   AND cod_sbs     = PN_CODSBS
   AND tip_formulario = '1';

  PV_SEC   VARCHAR2(520);
  n_cont   NUMBER(10);

BEGIN
  n_cont := 0;
  PV_SEC := '';
  FOR cur IN CUR_SEC LOOP
        IF n_cont = 0 THEN
           PV_SEC := TO_CHAR(cur.NUM_SEC_REG);
           n_cont := 1;
        ELSE
           PV_SEC:= PV_SEC||'-'||TO_CHAR(cur.NUM_SEC_REG);
        END IF;
        IF LENGTH(PV_SEC) > 510 THEN
           GOTO fin_cursor;
        END IF;
  END LOOP;
  <<fin_cursor>>
  RETURN LTRIM(PV_SEC)||'-';

EXCEPTION
   WHEN OTHERS THEN
        PV_SEC:= '';
END;

----------------------------------------------------------------------

FUNCTION SF_DETERMINA_CODSBS_SANCIONADO
        (i_codsbs  IN NUMBER)
-- -------------------------------------------------------------------
-- Autor : Jaime Lopez-Torres M. - Febrero 2003
-- Motivo: Determina el Codigo SBS que fue sancionado.
-- -------------------------------------------------------------------
RETURN VARCHAR2 IS
   o_existe_codigo      VARCHAR2(01);
   n_codsbs_encontrado  NUMBER(10);

BEGIN
  SELECT A.cod_sbs
    INTO n_codsbs_encontrado
    FROM CRA_CTAS_ANUL_Y_RECTIF  "A",
         CRA_CLIENTE_SANCION_RTC "B"
   WHERE A.cod_sbs         = i_codsbs
     AND A.tip_reporte     = 'CC'
     AND A.tip_motivo_anul = '1'
     AND B.cod_sbs         = A.cod_sbs
     AND B.tip_reporte     = A.tip_reporte
     AND B.ano_refer       = A.ano_refer
     AND B.mes_refer       = A.mes_refer
     AND B.ind_sancion     = 'S';

  IF SQL%ROWCOUNT = 0 THEN
     o_existe_codigo := 'N';
  ELSE
     o_existe_codigo := 'S';
  END IF;
  RETURN o_existe_codigo;

EXCEPTION
  WHEN OTHERS THEN
       o_existe_codigo := 'N';
       RETURN o_existe_codigo;

END SF_DETERMINA_CODSBS_SANCIONADO;

----------------------------------------------------------------------

FUNCTION SF_DETERMINA_APELLIDO_CASADA
           (pv_sexo             IN VARCHAR2,
            pv_estado_civil     IN VARCHAR2)
-- -------------------------------------------------------------------
-- Autor : Francisco Vite Shelton - Mayo 2004
-- Motivo: 808 - Determina si la persona natural debe reportar apellido casada
-- -------------------------------------------------------------------
-- Retorna un valor numerico
--    0 : No es persona que deba reportar apellido casada
--    1 : Persona puede reportar apellido casada
--   -1 : Error
-- -------------------------------------------------------------------
--  Ejemplo
--      ln_validacion  NUMBER(1);
--      ln_validacion :=   SF_DETERMINA_APELLIDO_CASADA( sexo, estado_civil);
-- -------------------------------------------------------------------
RETURN NUMBER IS
   ln_return  NUMBER(1);

BEGIN
  ln_return:= 0;
--  IF nvl(pv_sexo,'') = 'F' AND  nvl(pv_estado_civil,'') in ('C','V','2','4') THEN
  IF nvl(pv_sexo,'') = 'F' AND  nvl(pv_estado_civil,'') in ('C','V') THEN
                  -- Valida apellido casada                  -- OK
     ln_return:= 1;
  END IF;

  RETURN ln_return;

EXCEPTION
  WHEN OTHERS THEN
       ln_return := -1;
       RETURN ln_return;
END SF_DETERMINA_APELLIDO_CASADA;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_57
        ( i_tip_doc_trib    IN VARCHAR2,
          i_num_doc_trib    IN VARCHAR2,
          i_tip_persona     IN VARCHAR2,
          i_cod_sbs_validar IN NUMBER,
          i_reporte  IN VARCHAR2
        )
RETURN NUMBER IS
  o_cod_sbs_ident   NUMBER(10);
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    07/12/2005    Oracle 8i
---------------------
--       Parametros
--           i_tip_doc_trib :  Tipo del numero de RUC
--           i_num_doc_trib :  Numero de RUC a validar
--           i_tip_persona  :  Tipo de persona
--           i_cod_sbs_validar :  CODSBS que se validara
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Compara codigo SBS del maestro de personas por numero de RUC
--           en caso de existir mas de una coincidencia realiza comparacion de registro ....
---------------------
--       Retorna cod_sbs
--                 -1   :  Error --> Activar control
--                 0   :   Cero registros --> No Activar control
--                 >0   :   Registro Encontrado --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_57 ('1','12345678','2',2300,'RCD');
---------------------
  li_i integer;
  li_resultado integer;
  ln_cod_sbs        cri_persona.cod_sbs%type;
  ln_cod_sbs_enc    cri_persona.cod_sbs%type;
  lv_tip_doc_trib   varchar2(1);
  lv_num_ruc_11     cri_persona.num_ruc11%type;
  lv_num_ruc_8      cri_persona.num_ruc11%type;
  lv_tip_condicion  cri_persona.tip_condicion%type;
  lv_tip_persona    cri_persona.tip_persona%type;

  ------------------
-- Cursor donde se obtiene el resultado de la busqueda que se realiza por tipo y numero de RUC.
-- Los diferentes criterios que se onbtienen en la busqueda estan en el campo 'Clasificacion' el cual se describe:
--
-- Clasificacion:    4 --> El Codsbs es el asignado para el numero de RUC,
--                         Adicionalmente tiene el mismo tipo de persona.Dato encontrado es correcto => Exit
--                   2  --> El Codsbs no es el asignado para el numero de RUC buscado,
--                         pero tienen el mismo tipo de persona. => ¿¡?
--                   1  --> El Codsbs es el asignado para el numero de RUC buscado,
--                         pero presenta un tipo de persona diferente. => ¿¡?
--                   0  --> El Codsbs no es el asignado para el numero de RUC buscado,
--                         asi mismo presentan diferentes tipo de persona. => ¿¡?
cursor cur_busca_ruc is
select decode( cod_sbs, ln_cod_sbs, decode(t.tip_persona, lv_tip_persona, 4, 1),
--                 ,decode(t.tip_persona,lv_tip_persona,2,0)) as clasificacion
               decode( nvl(sf_obt_codsbs_reemplazante(t.cod_sbs),0), ln_cod_sbs,
                       decode(t.tip_persona, lv_tip_persona, 4, 1),
                       decode(t.tip_persona, lv_tip_persona, 2, 0) ) ) as clasificacion
      ,t.Tip_Persona
      ,t.cod_sbs
      ,t.tip_condicion
      ,t.Nombre
from( SELECT A.Tip_Persona, A.cod_sbs, A.tip_condicion,
             N.Ape_Paterno ||' ' || N.ape_materno  ||' ' || N.Ape_Casada ||' ' ||  N.Nom_Persona  ||' ' || N.Segundo_Nombre as nombre
        FROM CRI_PERSONA A, CRI_PERSONA_NAT N
       WHERE A.num_ruc11 = lv_num_ruc_11 AND N.cod_sbs = A.cod_sbs AND A.Tip_Persona = lv_tip_persona
       UNION
      SELECT A.Tip_Persona, A.cod_sbs, A.tip_condicion,
             J.NOM_RAZON_SOCIAL
        FROM CRI_PERSONA A, CRI_PERSONA_JUR J
       WHERE A.num_ruc11 = lv_num_ruc_11 AND J.cod_sbs = A.cod_sbs AND A.Tip_Persona = lv_tip_persona
       UNION
      SELECT A.Tip_Persona, A.cod_sbs, A.tip_condicion,
             M.NOM_RAZON_SOCIAL
        FROM CRI_PERSONA A, CRI_PERSONA_NOID M
       WHERE A.num_ruc11 = lv_num_ruc_11 AND M.cod_sbs = A.cod_sbs AND A.Tip_Persona = lv_tip_persona
    ) t
order by 1 desc;

-- FVSH 2005 12 20: BUSCA POR RUC DE 8 DIGITOS
cursor cur_busca_ruc_8 is
select decode( cod_sbs, ln_cod_sbs, decode(t.tip_persona, lv_tip_persona, 4, 1),
--                 ,decode(t.tip_persona,lv_tip_persona,2,0)) as clasificacion
               decode( nvl(sf_obt_codsbs_reemplazante(t.cod_sbs), 0), ln_cod_sbs,
                       decode(t.tip_persona, lv_tip_persona, 4, 1),
                       decode(t.tip_persona, lv_tip_persona, 2, 0) ) ) as clasificacion
      ,t.Tip_Persona
      ,t.cod_sbs
      ,t.tip_condicion
      ,t.Nombre
from( SELECT A.Tip_Persona, A.cod_sbs, A.tip_condicion,
             N.Ape_Paterno ||' ' || N.ape_materno  ||' ' || N.Ape_Casada ||' ' ||  N.Nom_Persona  ||' ' || N.Segundo_Nombre as nombre
        FROM CRI_PERSONA A, CRI_PERSONA_NAT N
       WHERE A.num_ruc = lv_num_ruc_8 AND N.cod_sbs = A.cod_sbs AND A.Tip_Persona = lv_tip_persona
       UNION
      SELECT A.Tip_Persona,A.cod_sbs, A.tip_condicion,
             J.NOM_RAZON_SOCIAL
        FROM CRI_PERSONA A, CRI_PERSONA_JUR J
       WHERE A.num_ruc = lv_num_ruc_8 AND J.cod_sbs = A.cod_sbs AND A.Tip_Persona = lv_tip_persona
       UNION
      SELECT A.Tip_Persona, A.cod_sbs, A.tip_condicion,
             M.NOM_RAZON_SOCIAL
        FROM CRI_PERSONA A, CRI_PERSONA_NOID M
       WHERE A.num_ruc = lv_num_ruc_8 AND M.cod_sbs = A.cod_sbs AND A.Tip_Persona = lv_tip_persona
    ) t
order by 1 desc;

BEGIN
  ln_cod_sbs      := i_cod_sbs_validar;
  ln_cod_sbs_enc  := 0;
  lv_tip_doc_trib := i_tip_doc_trib;
  lv_num_ruc_11   := i_num_doc_trib;
  lv_tip_persona  := i_tip_persona;
  li_resultado    := 0;

  BEGIN
    IF lv_tip_doc_trib = '3' THEN
       -- BUSCA POR RUC DE 11 DIGITOS
       FOR cur_57 in cur_busca_ruc LOOP
          lv_tip_condicion := cur_57.tip_condicion;
          li_i             := cur_57.clasificacion;
          ln_cod_sbs_enc   := cur_57.cod_sbs;

          IF cur_57.clasificacion = 4 THEN
             -- Registro Valido
              li_resultado := 1;
              Exit;
          ELSE
             IF cur_57.clasificacion = 2 THEN
                -- Registro observado
                li_resultado := -1;
                Exit;
             ELSE
                --- ESTOS DOS ULTIMOS RESULTADOS NO SON POSIBLES
                -- SE DEJA LA LOGICA PARA CUANDO SE REALICE COMPARACION CON SUNAT
                  IF cur_57.clasificacion = 1 THEN
                     -- Registro no es posible
                     li_resultado := -1;
                     Exit;
                  ELSE
                     -- Registro no es posible
                     li_resultado := -1;
                     Exit;
                  END IF;
             END IF;
          END IF;
       END LOOP;
    ELSE
        -- BUSCA POR RUC DE 8 DIGITOS
       lv_num_ruc_8    := i_num_doc_trib;

       FOR cur_57_ruc8 in cur_busca_ruc_8 LOOP
          lv_tip_condicion := cur_57_ruc8.tip_condicion;
          li_i             := cur_57_ruc8.clasificacion;
          ln_cod_sbs_enc   := cur_57_ruc8.cod_sbs;

          IF cur_57_ruc8.clasificacion = 4 THEN
             -- Registro Valido
              li_resultado := 1;
              Exit;
          ELSE
             IF cur_57_ruc8.clasificacion = 2 THEN
                -- Registro observado
                li_resultado := -1;
                Exit;
             ELSE
                -- ESTOS DOS ULTIMOS RESULTADOS NO SON POSIBLES
                -- SE DEJA LA LOGICA PARA CUANDO SE REALICE COMPARACION CON SUNAT
                  IF cur_57_ruc8.clasificacion = 1 THEN
                     -- Registro no es posible
                     li_resultado := -1;
                     Exit;
                  ELSE
                     -- Registro no es posible
                     li_resultado := -1;
                     Exit;
                  END IF;
             END IF;
          END IF;
       END LOOP;
    END IF;

  EXCEPTION
     WHEN NO_DATA_FOUND THEN
        li_resultado := 0;
  END ;
  o_cod_sbs_ident := ln_cod_sbs_enc;

  IF li_resultado in (0,1) THEN
     RETURN o_cod_sbs_ident;
  ELSE
     Return li_resultado;
  END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN 0;
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_57;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_71
        (i_tip_doc_iden    IN VARCHAR2,
         i_num_doc_iden    IN VARCHAR2,
         i_cod_sbs_validar IN NUMBER,
         i_reporte  IN VARCHAR2
         )
RETURN NUMBER IS
  o_cod_sbs_ident   NUMBER(10);

---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    07/12/2005    Oracle 8i
---------------------
--       Parametros
--           i_tip_doc_iden :  Tipo del numero de documento en analisis
--           i_num_doc_iden :  Numero de Doc de Identidad a validar
--           i_cod_sbs_validar :  CODSBS que se validara
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
--
---------------------
--       Descripcion
--           Compara codigo SBS de persona natural por numero de documento de identidad
--           en caso de existir mas de una coincidencia realiza comparacion de registro RENIEC
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :   Cero registros --> No Activar control
--                 1   :   Registro Encontrado --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_71 ('1','12345678',2300,'RCD');
---------------------

  li_i integer;
  li_resultado integer;
  li_tipo_dato integer;
  ln_num_reg   integer;

  ln_cod_sbs        cri_persona.cod_sbs%type;
  ln_cod_sbs_enc    cri_persona.cod_sbs%type;
  lv_tip_doc_id     cri_persona_nat.tip_docto_ident%type;
  lv_num_doc_id     cri_persona_nat.num_docto_ident%type;
  lv_num_doc_id_aux cri_persona_nat.num_docto_ident%type;
  lv_tip_condicion  cri_persona.tip_condicion%type;

-- Cursor donde se obtiene el resultado de la busqueda que se realiza
-- por tipo y numero de documento. Los diferentes criterios que se onbtienen en
-- la busqueda estan en el campo 'Clasificacion' el cual se describe:
--
-- Clasificacion:    4 --> El Codsbs es el asignado para el numero documento,
--                         adicionalmente ha sido verificado en Reniec. Dato encontrado es correcto => Exit
--                   2  --> El Codsbs no es el asignado para el numero documento buscado,
--                         pero este documento ha sido verificado en Reniec. => ¿¡?
--                   1  --> El Codsbs es el asignado para el numero documento buscado,
--                         pero este documento no ha sido verificado en Reniec. => ¿¡?
--                   0  --> El Codsbs no es el asignado para el numero documento buscado,
--                         asi mismo este documento no ha sido verificado en Reniec. => ¿¡?

-- JCFS 16/11/2009: Se agrega condición para el valor 'N'
cursor cur_busca_doc_id is
select decode ( cod_sbs, ln_cod_sbs
                        ,decode(tip_reg_mv,'R',4,'P',4,'E',4,'N',4,1)
                        ,decode(tip_reg_mv,'R',2,'P',2,'E',2,'N',2,0)) as clasificacion
      ,t.cod_sbs
      ,t.ape_paterno, t.ape_materno ,t.ape_casada
      ,t.nom_persona, t.segundo_nombre
      ,t.tip_reg_mv, t.tip_condicion
  from(
        SELECT a.cod_sbs, a.ape_paterno, a.ape_materno, a.ape_casada,
               a.nom_persona, a.segundo_nombre, b.tip_reg_mv, b.tip_condicion
          FROM CRI_PERSONA_NAT "A",
               CRI_PERSONA     "B"
         WHERE A.tip_docto_ident = lv_tip_doc_id
           AND A.num_docto_ident = lv_num_doc_id --'00019982'--'00008856'--'00002251'--
           AND B.cod_sbs       = A.cod_sbs
           AND NVL(B.Tip_Condicion,' ') <> 'RPZDO'   -- nuevo filtro añadido el 04/05/2009
           AND nvl(B.TIP_REG_MV, ' ') <> 'I'         -- JCFS: Nuevo filtro añadido el 16/10/2009
       ) t
order by 1 desc;

--------------------------------
-- FVSH  2005 12 20
-- Busca Deudores para los Documentos diferentes a DNI
-- JCFS 16/11/2009: Se agrega condición para el valor 'N'
-- JCFS 15/04/2010: Se filtra a los Reemplazados y a los Inactivos
cursor cur_busca_doc_id_aux is
SELECT decode ( f.cod_sbs, ln_cod_sbs,
                decode(p.tip_reg_mv,'R',4,'P',4,'E',4,'N',4,1),
                decode(p.tip_reg_mv,'R',2,'P',2,'E',2,'N',2,0)) as clasificacion
      ,f.cod_sbs
      ,f.ape_paterno, f.ape_materno, f.ape_casada
      ,f.nom_persona, f.segundo_nombre
      ,p.tip_reg_mv, p.tip_condicion
FROM cri_persona p ,
(
select t.cod_sbs, t.ape_paterno, t.ape_materno, t.ape_casada, t.nom_persona, t.segundo_nombre
  from
  ( SELECT /*+ INDEX (n CRI_PERSONA_NAT_02)*/
           n.cod_sbs
          ,trim(n.ape_paterno)     as ape_paterno
          ,trim(n.ape_materno)     as ape_materno
          ,trim(n.ape_casada)      as ape_casada
          ,trim(n.nom_persona)     as nom_persona
          ,trim(n.segundo_nombre)  as segundo_nombre
          ,' ' || trim(TRIM(trim(n.ape_paterno)  || ' ' ||
                     trim(n.ape_materno)) || ' ' ||
                     trim(n.ape_casada )) || ' ' ||
                TRIM(trim(n.nom_persona)  || ' ' ||
                     trim(n.segundo_nombre)) || ' ' as nombre
          , n.tip_docto_ident
          , decode(nvl(test_number(n.num_docto_ident),-1)
                  ,-1,n.num_docto_ident
                  ,test_number(n.num_docto_ident)
                  )
                  as num_docto_ident
      FROM CRI_PERSONA_NAT N,
           CRI_PERSONA P                         -- JCFS: Join añadido el 15/04/2010
     WHERE n.tip_docto_ident = lv_tip_doc_id
       AND n.num_docto_ident like '%' || lv_num_doc_id_aux --|| '%'
       AND N.cod_sbs = P.cod_sbs
       AND nvl(P.Tip_Condicion,' ') <> 'RPZDO'   -- JCFS: Nuevo filtro añadido el 15/04/2010
       AND nvl(P.TIP_REG_MV, ' ') <> 'I'         -- JCFS: Nuevo filtro añadido el 15/04/2010
       ) t
 where t.tip_docto_ident = lv_tip_doc_id
   and t.num_docto_ident = lv_num_doc_id_aux
   and  not (upper(nvl(t.segundo_nombre,' ')) like '%Y/O%')
) F
WHERE  p.cod_sbs = f.cod_sbs
order by 1 desc ;

-- Cursor donde se obtiene el resultado de la busqueda que se realiza
-- para los codigos SBS Asociados (RPZDOS, RPZTE). Los diferentes criterios que se onbtienen en
-- la busqueda estan en el campo 'Clasificacion' el cual se describe:
--
-- Clasificacion:    4 --> El numero documento asociado al cod_sbs ha sido verificado en Reniec.
--                   3  --> El numero documento asociado al cod_sbs ha sido verificado maestro Policia.
--                   2  --> El numero documento asociado al cod_sbs ha sido verificado por una entidad.
--                   0  --> El documento de identidad no ha sido verificado con algun referente.

cursor cur_busca_codsbs_asociado is
    select decode(tip_reg_mv,'R',4,'P',3,'E',2,0) as clasif_reg_mov
           ,decode ( cod_sbs, ln_cod_sbs
                            ,decode(tip_reg_mv,'R',4,'P',4,1)
                            ,decode(tip_reg_mv,'R',2,'P',2,0)) as clasificacion
           ,decode ( rpzte, ln_cod_sbs
                            ,decode(tip_reg_mv,'R',4,'P',4,1)
                            ,decode(tip_reg_mv,'R',2,'P',2,0)) as clasificacion_rpzte
          ,t.rpzte
          ,t.cod_sbs
          ,t.tip_reg_mv
          ,t.tip_condicion
      from( SELECT b.cod_sbs
                  ,nvl(SF_OBT_CODSBS_REEMPLAZANTE(b.cod_sbs),b.cod_sbs) rpzte
                  ,b.tip_reg_mv
                  ,b.tip_condicion
              FROM CRI_PERSONA B
             WHERE B.COD_SBS in
                   ( SELECT r.cod_sbs_remplazado as cod_sbs
                       FROM cri_reemplazo r
                      START WITH r.cod_sbs_ult_rplzte = nvl(sf_obt_codsbs_reemplazante(ln_cod_sbs),ln_cod_sbs)
                      CONNECT BY PRIOR r.cod_sbs_ult_rplzte = r.cod_sbs_remplazado
                      UNION
                      select nvl(sf_obt_codsbs_reemplazante(ln_cod_sbs),ln_cod_sbs) as cod_sbs from dual
                   )
           ) t
    order by 1 desc;

BEGIN
   ln_cod_sbs    := i_cod_sbs_validar;
   ln_cod_sbs_enc:= 0;
   lv_tip_doc_id := i_tip_doc_iden;
   lv_num_doc_id := i_num_doc_iden;
   li_resultado  := 0;

   BEGIN
--    IF lv_tip_doc_id =  '1' THEN
     -- Para los DNI
      FOR cur_71 in cur_busca_doc_id LOOP
         lv_tip_condicion := cur_71.tip_condicion;
         li_i             := cur_71.clasificacion;
         ln_cod_sbs_enc   := cur_71.cod_sbs;

         IF cur_71.clasificacion = 4 THEN  -- Registro Valido
            li_resultado := 1;
            Exit;
         ELSE
             IF cur_71.clasificacion = 2 THEN  -- Registro observado
                li_resultado := -1;
                Exit;
             ELSE
                IF cur_71.clasificacion = 1 THEN  -- Registro Valido
                   li_resultado := 1;
                   Exit;
                ELSE  -- Registro observado
                   li_resultado := -1;
                   Exit;
                END IF;
             END IF;
           END IF;
--         i:= i;
       END LOOP;

--    ELSE
    IF li_resultado <> 1 THEN
       IF lv_tip_doc_id <> '1' THEN
           -- Cuando no wencuentre un resultado valido y
           -- se trata de documentos diferentes a DNI realiza
           -- Busqueda especial
    --       Select decode(nvl(test_number(lv_num_doc_id),-1)
    --                                         ,-1 , lv_num_doc_id
    --                                         ,test_number(lv_num_doc_id)
    --                                       )
    --         into lv_num_doc_id_aux
    --         from dual ;

           Select decode( nvl(test_number(lv_num_doc_id),-1), -1 , -1, 1)
             into li_tipo_dato
             from dual ;

               IF li_tipo_dato = 1 THEN
                  lv_num_doc_id_aux := test_number(lv_num_doc_id);
               ELSE
                  lv_num_doc_id_aux := lv_num_doc_id;
               END IF;

          FOR cur_71_aux in cur_busca_doc_id_aux LOOP
               lv_tip_condicion := cur_71_aux.tip_condicion;
               li_i             := cur_71_aux.clasificacion;
               ln_cod_sbs_enc   := cur_71_aux.cod_sbs;

               IF cur_71_aux.clasificacion = 4 THEN  -- Registro Valido
                  li_resultado := 1;
                  Exit;
               ELSE
                 IF cur_71_aux.clasificacion = 2 THEN  -- Registro observado
                    li_resultado := -1;
                    Exit;
                 ELSE
                    IF cur_71_aux.clasificacion = 1 THEN  -- Registro Valido
                       li_resultado := 1;
                       Exit;
                    ELSE  -- Registro observado
                       li_resultado := -1;
                       Exit;
                    END IF;
                 END IF;
               END IF;
    --         i:= i;
           END LOOP;
     END IF;

    ---------------------------
     IF li_resultado <> 1 THEN
        -- Verifica cod_sbs Reemplazados y Reemplazantes.
        select nvl(p.tip_condicion,'')
          into lv_tip_condicion
          from cri_persona p
         where p.cod_sbs = i_cod_sbs_validar;

         IF lv_tip_condicion in ('RPZDO','RPZTE') THEN
             FOR cur_codsbs_asoc in cur_busca_codsbs_asociado LOOP
                 IF cur_codsbs_asoc.clasif_reg_mov > 0 THEN
                    -- Registro Valido
                    --Documento ha sido validado con algun referente
                    li_resultado := 1;
                    Exit;
                 ELSE
                    -- Verifica si el documento de identidad existe en el maestro naturales
                     select nvl(count(*),0) as num_reg
                       into ln_num_reg
                       from cri_persona_nat n
                      where n.tip_docto_ident = i_tip_doc_iden
                        and n.num_docto_ident = i_num_doc_iden;

                        li_resultado := -1;

                        IF ln_num_reg = 0 THEN
                           li_resultado := 0;
                        END IF;
                 END IF;
        --         i:= i;
             END LOOP;
         END IF;
      END IF;
  END IF;

  EXCEPTION
     WHEN NO_DATA_FOUND THEN
        li_resultado:= 0;
  END;

  o_cod_sbs_ident := ln_cod_sbs_enc;

  IF li_resultado in (0,1) THEN
     RETURN o_cod_sbs_ident;
  ELSE
     Return li_resultado;
  END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN 0;
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_71;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_71_FFAA_PP
        (i_tip_doc_iden    IN VARCHAR2,
         i_num_doc_iden    IN VARCHAR2,
         i_cod_sbs_validar IN NUMBER,
         i_nombre_completo IN VARCHAR2,
         i_reporte  IN VARCHAR2
         )
RETURN NUMBER IS
  o_cod_sbs_ident   NUMBER(10);

---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    07/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tip_doc_iden :  Tipo del numero de documento en analisis
--           i_num_doc_iden :  Numero de Doc de Identidad a validar
--           i_cod_sbs_validar :  CODSBS que se validara
--           i_nombre_completo : Nombre de la persona que usara para validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
--
---------------------
--       Descripcion
--           Compara codigo SBS de persona natural por numero de documento de identidad
--           Se usa como fuente de informacion los comparativos enviados por las entidades
--           en caso de existir mas de una coincidencia realiza comparacion de registro RENIEC
--           ( este ultimo criterio debe considerarse mas adelante)
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 1   :   Registro Encontrado --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_71_FFAA_PP ('1','12345678',2300,'FRANCISCOVITESHELTON','RCD');
---------------------

  li_resultado integer;
  ln_cod_sbs        cri_persona.cod_sbs%type;
  ln_cod_sbs_enc    cri_persona.cod_sbs%type;
  lv_tip_doc_id     cri_persona_nat.tip_docto_ident%type;
  lv_num_doc_id     cri_persona_nat.num_docto_ident%type;
  lv_nom_persona    VARCHAR2(300);

-- Cursor donde se obtiene el resultado de la busqueda que se realiza
-- por tipo y numero de documento. Incluye comparacion de nombres
cursor cur_busca_doc_id_nom_FFAA_PP is
select nvl(count(1),0)  num_reg
from
   ( select d.cod_ent_vig, d.cod_sbs, d.tip_doc_3_4, d.num_doc_3_4, d.tip_doc_id, d.num_doc_id,
            d.ape_paterno || d.ape_materno ||d.primer_nombre as nom_rep
       from cri_deu_ent_doc_id d
      where d.tip_doc_id = lv_tip_doc_id
        and d.num_doc_id = lv_num_doc_id
        and d.cod_sbs    = ln_cod_sbs
   ) Z
where z.nom_rep = lv_nom_persona
order by 1 desc;

-- Cursor donde se obtiene el resultado de la busqueda que se realiza
-- por tipo y numero de documento para FFAA, FFPP. Incluye comparacion de nombres
cursor cur_bus_tip_3_4_id_nom_FFAA_PP is
select nvl(count(*),0)  num_reg
from
   ( select d.cod_ent_vig, d.cod_sbs, d.tip_doc_3_4, d.num_doc_3_4, d.tip_doc_id, d.num_doc_id,
            d.ape_paterno || d.ape_materno ||d.primer_nombre  as nom_rep
       from cri_deu_ent_doc_id d
      where d.tip_doc_3_4 = lv_tip_doc_id
        and d.num_doc_3_4 = lv_num_doc_id
        and d.cod_sbs    = ln_cod_sbs
    ) Z
where z.nom_rep = lv_nom_persona
order by 1 desc;

-- Cursor donde se obtiene el resultado de la busqueda que se realiza
-- numero de documento de la PPNN. Inclye copracion de nombres
cursor cur_busca_doc_id_nom_PP_NN is
select nvl(count(*),0)  num_reg
from
   ( select p.cod_sbs, p.cip, p.tip_docto_ident, p.num_docto_ident,
            p.ape_paterno || p.ape_materno ||p.nom_persona as nom_rep
       from sisrev.cri_pnp p
      where p.cip = lv_num_doc_id
        and p.cod_sbs    = ln_cod_sbs
    ) Z
where z.nom_rep = lv_nom_persona
order by 1 desc  ;

BEGIN
  ln_cod_sbs    := i_cod_sbs_validar;
  ln_cod_sbs_enc:= 0;
  lv_tip_doc_id := i_tip_doc_iden;
  lv_num_doc_id := i_num_doc_iden;
  lv_nom_persona:= i_nombre_completo;
  li_resultado  := -1;

  BEGIN
    IF lv_tip_doc_id = '1' THEN
       FOR cur_71_FFAA_PP in cur_busca_doc_id_nom_FFAA_PP LOOP
           IF cur_71_FFAA_PP.num_reg > 0 THEN
              ln_cod_sbs_enc:= ln_cod_sbs;
              li_resultado := 1;
              Exit;
           END IF;
       END LOOP;
    ELSE
      -- Solo Tipo doc Id 3 y 4.
       FOR cur_71_FF_AA_PP in cur_bus_tip_3_4_id_nom_FFAA_PP LOOP
           IF cur_71_FF_AA_PP.num_reg > 0 THEN
              ln_cod_sbs_enc:= ln_cod_sbs;
              li_resultado := 1;
              Exit;
           END IF;
       END LOOP;

       --- ACTUALIZACION CON EL MAESTRO CRI_PNP
      IF li_resultado <> 1 AND lv_tip_doc_id = '3' THEN
         FOR cur_71_PP_NN in cur_busca_doc_id_nom_PP_NN LOOP
             IF cur_71_PP_NN.num_reg > 0 THEN
                ln_cod_sbs_enc:= ln_cod_sbs;
                li_resultado := 1;
                Exit;
             END IF;
         END LOOP;
      END IF;
    END IF;

  EXCEPTION
     WHEN NO_DATA_FOUND THEN
        li_resultado:= -1;
  END;

  o_cod_sbs_ident := ln_cod_sbs_enc;

  IF li_resultado = 1 THEN
     RETURN o_cod_sbs_ident;
  ELSE
     Return li_resultado;
  END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN -1;
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_71_FFAA_PP;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_195
        (i_num_sec    IN VARCHAR2,
         i_reporte    IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_num_sec :  Numero de Secuencia a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
--
---------------------
--       Descripcion
--           Realiza una consistencia del numero de secuencia
--
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :   Validacion OK --> No Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_195 ('00000001','RCM');
---------------------

  li_resultado integer;

BEGIN
  li_resultado  := 1;

  IF i_num_sec IS NULL THEN
     li_resultado:= -1;
  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_195;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_10
        (i_tipo_formulario    IN VARCHAR2,
         i_reporte            IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tipo_formulario :  Tipo de Formulario a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
--
---------------------
--       Descripcion
--           Realiza una consistencia del Tipo de Formulario
--
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_10 ('01','RCM');
---------------------

  li_resultado integer;

BEGIN
  li_resultado  := 0;

  IF i_reporte in ('RCD','RTC','RCT') THEN
     li_resultado  := 1;

     IF i_tipo_formulario IS NULL    OR
        i_tipo_formulario NOT IN ('1', '2') THEN
        li_resultado:= -1;
     END IF;
  ELSE
    IF i_reporte in ('RCA','RCM','RCO') THEN
       li_resultado  := 1;

       IF i_reporte = 'RCA' THEN
          IF i_tipo_formulario IS NULL    OR
             i_tipo_formulario NOT IN ('1') THEN
             li_resultado:= -1;
          END IF;
       ELSE
          IF i_tipo_formulario IS NULL    OR
             i_tipo_formulario NOT IN ('1') THEN
             li_resultado:= -1;
          END IF;
       END IF;
    END IF;

  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_10;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_11
        (i_tipo_informacion    IN VARCHAR2,
         i_reporte            IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    06/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tipo_informacion :  Tipo de Informacion a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
--
---------------------
--       Descripcion
--           Realiza una consistencia del Tipo de Informacion
--
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_11 ('01','RCM');
---------------------

li_resultado integer;

BEGIN
  li_resultado  := 0;

  IF i_reporte in ('RCD','RTC','RCT') THEN
     li_resultado  := 1;

     IF i_tipo_informacion IS NULL    OR
        i_tipo_informacion NOT IN ('1', '2') THEN
        li_resultado:= -1;
     END IF;
  ELSE
    IF i_reporte in ('RCA','RCM','RCO') THEN
       li_resultado  := 1;

       IF i_reporte = 'RCA' THEN
          IF i_tipo_informacion IS NULL    OR
             i_tipo_informacion NOT IN ('4', '5') THEN
             li_resultado:= -1;
          END IF;
       ELSIF i_reporte = 'RCM' THEN
          IF i_tipo_informacion IS NULL    OR
             i_tipo_informacion NOT IN ('3') THEN
             li_resultado:= -1;
          END IF;
       ELSIF i_reporte = 'RCO' THEN
          IF i_tipo_informacion IS NULL    OR
             i_tipo_informacion NOT IN ('0', '3') THEN
             li_resultado:= -1;
          END IF;
       ELSE
          IF i_tipo_informacion IS NULL    OR
             i_tipo_informacion NOT IN ('0') THEN
             li_resultado:= -1;
          END IF;
       END IF;
    END IF;
  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_11;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_87
        (i_tipo_residencia    IN VARCHAR2,
         i_reporte            IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 07/06/2006
-- Descripción: Realiza una consistencia del Tipo de Residencia
----------------------------------------------------------------
-- Parámetros:
--           i_tipo_residencia :  Tipo de Residencia a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_87 ('1','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  Se valida los Nuevos Valores según la Res. 11356
----------------------------------------------------------------
  li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     -- JCFS 05/05/2010: Se modifica los Valores validos según la Res. 11356
     IF (i_tipo_residencia IS NULL)    OR
--        (i_tipo_residencia NOT IN ('0','1', '2')) THEN
        (i_tipo_residencia NOT IN ('1', '2', '3', '4')) THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_87;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_88
        (i_clasificacion_deudor    IN VARCHAR2,
         i_reporte            IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    08/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_clasificacion_deudor :  Tipo de Clasificacion a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Realiza una consistencia del Tipo de Clasificacion
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_88 ('1','RCM');
---------------------
  li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     IF (i_clasificacion_deudor IS NULL)    OR
        (i_clasificacion_deudor NOT IN ('0', '1', '2', '3', '4', '8')) THEN
        li_resultado:= -1;
     END IF;

--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_88;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_89
        (i_tipo_persona    IN VARCHAR2,
         i_reporte            IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 08/06/2006
-- Descripción: Realiza una consistencia del Tipo de persona
----------------------------------------------------------------
-- Parámetros:
--           i_tipo_persona :  Tipo de persona a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_89 ('1','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  Se valida los Nuevos Valores según la Res. 11356
----------------------------------------------------------------
  li_resultado integer;

BEGIN
  li_resultado  := 0;

  IF i_reporte in ('RCD','RTC','RCT') THEN
     li_resultado  := 1;

     -- JCFS 05/05/2010: Se agrega el valor 4
     IF (i_tipo_persona NOT IN ('1', '2', '3', '4')) OR
        (i_tipo_persona  = '') or (NVL(i_tipo_persona, 'A')  = 'A') THEN
        li_resultado:= -1;
     END IF;

  END IF;

  IF i_reporte in ('RCA','RCM','RCO') THEN
     li_resultado  := 1;

     -- JCFS 05/05/2010: Se agrega el valor 4
     IF (i_tipo_persona NOT IN ('1', '2', '4')) OR
        (i_tipo_persona  = ' ') THEN
        li_resultado:= -1;
     END IF;

  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_89;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_90
        (i_ind_accionista    IN VARCHAR2,
         i_reporte            IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    08/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_ind_accionista :  indicador de accionista a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Realiza una consistencia del Tipo de accionista
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_90 ('1','RCM');
---------------------
  li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     IF (i_ind_accionista NOT IN ('0', '1', '2')) THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_90;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_25
        (i_tipo_magnitud    IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 08/06/2006
-- Descripción: Realiza una consistencia del Tipo de magnitud
----------------------------------------------------------------
-- Parámetros:
--           i_tipo_magnitud :  Tipo de magnitud a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_25 ('1','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  Se valida los Nuevos Valores según la Res. 11356
----------------------------------------------------------------
  li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     -- JCFS 05/05/2010: Se modifica los Valores validos según la Res. 11356
--     IF (i_tipo_magnitud NOT IN (' ', '0', '1', '2', '3', '4', '5')) THEN
     IF (i_tipo_magnitud NOT IN (' ', '0', '1', '5', '6', '7', '8')) THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_25;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_55
        (i_tipo_persona     IN VARCHAR2,
         i_tipo_magnitud    IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 09/06/2006
-- Descripción: Realiza una consistencia del Tipo de persona con el tipo magnitud
----------------------------------------------------------------
-- Parámetros:
--           i_tipo_persona  :  Tipo de persona a validar
--           i_tipo_magnitud :  Tipo de magnitud a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_55 ('2','1','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  Se valida los Nuevos Valores según la Res. 11356
----------------------------------------------------------------
  li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     -- JCFS 05/05/2010: Se modifica los Valores validos según la Res. 11356
--     IF i_tipo_persona = '2' AND i_tipo_magnitud NOT IN (' ','1', '2', '3', '4') THEN
     IF i_tipo_persona IN ('2', '4') AND i_tipo_magnitud NOT IN (' ', '1', '6', '7', '8') THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_55;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_91
        (i_tipo_persona     IN VARCHAR2,
         i_tipo_magnitud    IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 09/06/2006
-- Descripción: Realiza una consistencia del Tipo de persona con el tipo magnitud
----------------------------------------------------------------
-- Parámetros:
--           i_tipo_persona  :  Tipo de persona a validar
--           i_tipo_magnitud :  Tipo de magnitud a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_55 ('2','1','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
--
----------------------------------------------------------------
  li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     IF i_tipo_persona IN ('1','3') AND i_tipo_magnitud NOT IN ('0', '5') THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_91;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_52
        (i_tipo_doc_trib    IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    09/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tipo_doc_trib :  Tipo de doc tributario a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Realiza una consistencia del Tipo de documento tributario
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_52 ('1','RCM');
---------------------

  li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     IF i_tipo_doc_trib NOT IN (' ', '0', '2','3') THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_52;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_221
        ( i_tipo_persona  IN VARCHAR2, i_desc_deudor IN VARCHAR2, i_reporte IN VARCHAR2 )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    09/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tipo_persona :  Tipo de persona a validar
--           i_desc_deudor :  Descripcion del deudor a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Realiza una consistencia de la longitud del registro reportado
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_221 ('1','xxxxxxx','RCM');
---------------------

li_resultado integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     IF i_tipo_persona IN ('2','3') THEN
        IF nvl(length(trim(i_desc_deudor)),0) > 120 THEN
           li_resultado:= -1;
        END IF;
     ELSE
        IF i_tipo_persona = '1' THEN
           IF nvl(length(trim(i_desc_deudor)),0) > 180 THEN
              li_resultado:= -1;
           END IF;
        END IF;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_221;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_36
        (i_cod_ofic     IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    09/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_cod_ofic :  Codigo de oficina a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Realiza una consistencia del codigo de oficina
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_36 ('001','RCM');
---------------------

  li_resultado Integer;
  ln_cod_ofi   NUMBER(8);

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
     li_resultado  := 1;

     ln_cod_ofi := Test_Number(i_cod_ofic);

     IF ln_cod_ofi IS NULL THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_36;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_37
        (i_ubigeo_ofic     IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    09/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_ubigeo_ofic :  Ubigeo de oficina a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
--
---------------------
--       Descripcion
--           Realiza una consistencia del ubigeo de oficina
--
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_37 ('010101','RCM');
---------------------
li_resultado Integer;
ln_ubigeo_ofi   NUMBER(8);

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

     ln_ubigeo_ofi := Test_Number(i_ubigeo_ofic);

     IF ln_ubigeo_ofi IS NULL THEN
        li_resultado:= -1;
     END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_37;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_186
        (i_saldo        IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 09/06/2006
-- Descripción: Realiza una consistencia del saldo reportado
----------------------------------------------------------------
-- Parámetros:
--           i_saldo :  Saldo a validar
--           i_reporte :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_186 ('000000010101','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ----------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  -------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  La longitud de los Saldos aumenta a 18 caracteres
----------------------------------------------------------------
li_resultado         Integer;
ln_saldo             NUMBER(18,2);  -- JCFS 05/05/2010: Aumenta de (15,2) a (18,2)
n_verifica_saldo     NUMBER(01);
n_saldo_no_numerico  NUMBER(01);
n_comas              NUMBER(01);
n_puntos             NUMBER(01);
n_signos             NUMBER(01);
n_loop               NUMBER(02);

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

-- 186 Saldo de la cuenta no es numerico o tiene signo y/o punto decimal
         ln_saldo := Test_Number(i_saldo ) / 100;
         n_saldo_no_numerico := 0;
         IF ln_saldo IS NULL THEN
            n_saldo_no_numerico := 1;
         END IF;

         n_loop   := 1;
         n_comas  := 0;
         FOR n_loop in 1..18 LOOP   -- JCFS 05/05/2010: Aumenta el Loop de 15 a 18
             IF Substr(i_saldo, n_loop, 1) = ',' THEN
                n_comas := n_comas + 1;
             END IF;
         END LOOP;

         n_loop   := 1;
         n_puntos := 0;
         FOR n_loop in 1..18 LOOP   -- JCFS 05/05/2010: Aumenta el Loop de 15 a 18
             IF Substr(i_saldo, n_loop, 1) = '.' THEN
                n_puntos := n_puntos + 1;
             END IF;
         END LOOP;

         n_loop   := 1;
         n_signos := 0;
         FOR n_loop in 1..18 LOOP   -- JCFS 05/05/2010: Aumenta el Loop de 15 a 18
             IF Substr(i_saldo, n_loop, 1) = '-' THEN
                n_signos := n_signos + 1;
             END IF;
         END LOOP;

         n_verifica_saldo := n_saldo_no_numerico + n_comas + n_puntos + n_signos;
         IF n_verifica_saldo > 0 THEN
            li_resultado := -1;
         END IF;
  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_186;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_77
        (i_cod_ciiu     IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    13/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_cod_ciiu  :  Código de CIIU a validar
--           i_reporte   :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el codigo CIIU con nuestro maestro de CIIU
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_77 ('0101','RCM');
---------------------
li_resultado      Integer;
lv_cod_act_econ   cra_actividad_econ.cod_actividad_econ%type;

BEGIN
   lv_cod_act_econ:= '';

-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;
     /*- FVSH:  2004-08-19
         Se actualixa el control de CIIU para permitir solo codigos con 4 digitos, para ello
         se agrega como condicon adicional el tipo de nivel en la tabla de los CIIU.

         Validacion anterior:
         SELECT cod_actividad_econ INTO n_cod_act_eco
         FROM CRA_ACTIVIDAD_ECON
         WHERE cod_actividad_econ = cur.cod_ciiu3;
     -*/
   SELECT cod_actividad_econ INTO lv_cod_act_econ
     FROM CRA_ACTIVIDAD_ECON
    WHERE cod_actividad_econ = i_cod_ciiu AND tip_nivel = 'L' ;

   IF SQL%ROWCOUNT = 0 THEN
      li_resultado:= -1;
   END IF;
-- END IF;
   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
      RETURN -1;

END SF_VALIDA_CONTROL_77;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_50
        (i_cod_ciiu_mae     IN VARCHAR2,
         i_cod_ciiu_rep     IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    13/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_cod_ciiu_mae  :  Código de CIIU del maestro a validar
--           i_cod_ciiu_rep  :  Código de CIIU Reportado a validar
--           i_reporte   :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el codigo CIIU con el obtenido en nuestro maestro de personas
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_50 ('0101','0211','RCM');
---------------------
li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF (i_cod_ciiu_mae IS NOT NULL) AND i_cod_ciiu_mae > ' ' THEN
      IF i_cod_ciiu_rep  <> i_cod_ciiu_mae THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_50;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_75
        (i_cod_sbs      IN NUMBER,
         i_cod_sunarp   IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    13/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_cod_sbs    :  Código SBS a validar
--           i_cod_sunarp :  Código de SUNARP Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el codigo SBS reportado tomando como argumento el codigo SUNARP
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_75 (101,'0211','RCM');
---------------------
  li_resultado      Integer;
  ln_cod_sbs_sunarp  cri_persona_jur.cod_sbs%type;

BEGIN
  li_resultado  := 0;

--  IF i_reporte in ('RCD','RTC') THEN
     li_resultado  := 1;

     ln_cod_sbs_sunarp := 0;
     BEGIN
        SELECT A.cod_sbs
          INTO ln_cod_sbs_sunarp
          FROM CRI_PERSONA_JUR "A", CRI_PERSONA     "B"
         WHERE A.cod_onrp       = i_cod_sunarp
           AND B.cod_sbs        = A.cod_sbs
           AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

         IF SQL%Rowcount <> 0 THEN
            IF i_cod_sbs <> ln_cod_sbs_sunarp AND ln_cod_sbs_sunarp > 0 THEN
               li_resultado  := -1;
            END IF;
         END IF;

      EXCEPTION
         WHEN OTHERS THEN
             li_resultado  := 0;
      END;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_75;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_74
        ( i_tip_persona IN NUMBER,
          i_cod_sunarp  IN VARCHAR2,
          i_reporte     IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 13/06/2006
-- Descripción: Valida duplicados tomando como argumento el codigo SUNARP y tipo persona
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona:  Tipo de persona a validar
--           i_cod_sunarp :  Código de SUNARP Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_74 ('1','0211','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ----------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  -------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  Se agrega el Tipo de Persona 4 (además del Tipo 2)
----------------------------------------------------------------
li_resultado      Integer;
ln_cod_sunarp_dup NUMBER(3);

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF (i_cod_sunarp IS NOT NULL) AND i_cod_sunarp > ' ' THEN
      -- JCFS 18/05/2010: Se agrega el Tipo de Persona 4
      IF i_tip_persona IN ('2', '4') THEN
         ln_cod_sunarp_dup := 0;

         SELECT count(1) INTO ln_cod_sunarp_dup
           FROM CRI_PERSONA_JUR A, CRI_PERSONA B
          WHERE A.cod_onrp = i_cod_sunarp AND B.cod_sbs = A.cod_sbs AND
                (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

         IF SQL%Rowcount <> 0 THEN
            IF ln_cod_sunarp_dup > 1 THEN
               li_resultado := -1;
            END IF;
         END IF;
      END IF;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;

END SF_VALIDA_CONTROL_74;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_45
        (i_ruc_8_mae          IN VARCHAR2,
         i_ruc_11_mae         IN VARCHAR2,
         i_tip_doc_trib_rep   IN VARCHAR2,
         i_num_doc_trib_rep   IN VARCHAR2,
         i_reporte            IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    13/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_ruc_8_mae:  Ruc de 8 digitos del maestro personas a validar
--           i_ruc_11_mae:  Ruc de 11 digitos del maestro personas a validar
--           i_tip_doc_trib_rep :  Tipo de documento tributario Reportado a validar
--           i_num_doc_trib_rep :  Numero de documento tributario Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el tipo y numero de documento tributario
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_45 (' ','12345678901','3','12345670211','RCM');
---------------------
li_resultado  Integer;

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF (i_num_doc_trib_rep IS NOT NULL) AND i_num_doc_trib_rep > ' ' AND
      (i_num_doc_trib_rep NOT IN ('0', '00000000000')) THEN
      IF i_tip_doc_trib_rep = '3' THEN
         IF i_num_doc_trib_rep <> i_ruc_11_mae AND i_ruc_11_mae > ' ' AND
            (i_ruc_11_mae IS NOT NULL) THEN
            li_resultado  := -1;
         END IF;
      ELSE
         IF i_num_doc_trib_rep <> i_ruc_8_mae AND i_ruc_8_mae > ' ' AND
            (i_ruc_8_mae IS NOT NULL) THEN
            li_resultado  := -1;
         END IF;
      END IF;
   END IF;
 --  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_45;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_54
        (i_cod_sbs        IN NUMBER,
         i_tip_doc_trib   IN VARCHAR2,
         i_num_doc_trib   IN VARCHAR2,
         i_tip_clasif     IN VARCHAR2,
         i_reporte        IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    13/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_cod_sbs:  Codigo SBS reportado a validar
--           i_tip_doc_trib :  Tipo de documento tributario Reportado a validar
--           i_num_doc_trib :  Numero de documento tributario Reportado a validar
--           i_tip_clasif  :  Tipo de clasificacion Reportada a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el tipo y numero de documento tributario reportado
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_54 (1234,'3','12345670211','4','RCM');
---------------------
   li_resultado      Integer;
   lb_valor          BOOLEAN;

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;
----------------------------------        ------------------------------------
--     12.ABR.2002 JLT :
--     "Para el caso de clientes nuevos es obligatorio validar estrictamente el número de R.U.C.".
--     "En caso se trate de un cliente antiguo en el sistema con calificación de riesgo '4' (Pérdida),
--      se tomará el dato número de R.U.C. del maestro de personas".
--     (Reunión de la Comisión de Criterios de Aceptación del R.C.D. del 12.ABR.2002).
   IF (i_num_doc_trib IS NOT NULL) AND i_num_doc_trib > ' ' AND i_num_doc_trib <> '00000000000' THEN
      IF i_tip_doc_trib = '3' THEN
         IF LENGTH(i_num_doc_trib) <> 11 THEN
            IF i_cod_sbs > 0 THEN
               li_resultado  := -1;
            ELSE
               IF i_tip_clasif <> '4' THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         ELSE
            lb_valor := SF_VERIFICA_MOD11 (i_num_doc_trib, 'RUC');
            IF lb_valor = FALSE THEN
               IF i_cod_sbs > 0 THEN
                  li_resultado  := -1;
               ELSE
                  IF i_tip_clasif <> '4' THEN
                     li_resultado  := -1;
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;

      IF i_tip_doc_trib = '2' THEN
         IF LENGTH(i_num_doc_trib) <> 8 THEN
            IF i_cod_sbs > 0 THEN
               li_resultado  := -1;
            ELSE
               IF i_tip_clasif <> '4' THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         ELSE
            lb_valor := SF_VERIFICA_MOD11 (i_num_doc_trib, 'RUC');
            IF lb_valor = FALSE THEN
               IF i_cod_sbs > 0 THEN
                  li_resultado  := -1;
               ELSE
                  IF i_tip_clasif <> '4' THEN
                     li_resultado  := -1;
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;

      /* Validar que el dato sea numerico - 05/02/2009 - Roberto Castillo M. */
      IF IsNumber(i_num_doc_trib) is null THEN
         li_resultado  := -1;
      END IF;
   END IF;

 --  END IF;
   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_54;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_53
        (i_tip_persona      IN VARCHAR2,
         i_tip_residencia   IN VARCHAR2,
         i_num_doc_trib     IN VARCHAR2,
         i_ind_fijo_ruc     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 13/06/2006
-- Descripción: Valida el tipo y numero de documento tributario reportado
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona:  Tipo de persona reportado a validar
--           i_tip_residencia :  Tipo de residencia Reportado a validar
--           i_num_doc_trib :  Numero de documento tributario Reportado a validar
--           i_ind_fijo_ruc  :  Tipo de Indicador de RUC
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_53 ('2','1','12345670211','','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  Se valida que la persona pueda ser de Tipo '4' (además de '2')
----------------------------------------------------------------
  li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

-- RUC no informado en personas jurídicas
-- JCFS 10/05/2010: Se agrega el Tipo de Persona '4'
   IF i_tip_persona IN ('2', '4') AND i_tip_residencia = '1' THEN
      IF i_num_doc_trib IS NULL OR i_num_doc_trib IN (' ', '0') THEN
         IF i_ind_fijo_ruc IS NULL THEN
            li_resultado  := -1;
         END IF;
      END IF;
   END IF;
 --  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_53;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_103
        (i_tip_persona      IN VARCHAR2,
         i_num_doc_trib     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    13/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tip_persona:  Tipo de persona reportado a validar
--           i_num_doc_trib :  Numero de documento tributario Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el tipo y numero de documento tributario reportado para personas naturales
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_103 ('1','12345670211','RCM');
---------------------
  li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

-- RUC no informado en personas naturales
   IF i_tip_persona = '1' THEN
      IF i_num_doc_trib IS NULL OR i_num_doc_trib IN (' ', '0') THEN
         li_resultado  := -1;
      END IF;
   END IF;
 --  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_103;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_109
        (i_tip_persona      IN VARCHAR2,
         i_tip_doc_trib     IN VARCHAR2,
         i_num_doc_trib     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 14/06/2006
-- Descripción: Valida el tipo y numero de documento tributario reportado para cada tipo de persona
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona:  Tipo de persona reportado a validar
--           i_tip_doc_trib :  Tipo de documento tributario Reportado a validar
--           i_num_doc_trib :  Numero de documento tributario Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_109 ('1','3','12345670211','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 05/05/2010   Juan Carlos Fernández S.  Se valida que la persona pueda ser de Tipo '4' (además de '2')
----------------------------------------------------------------

li_resultado      Integer;

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF (i_num_doc_trib IS NOT NULL) AND i_num_doc_trib > ' ' AND i_num_doc_trib <> '00000000000' THEN
      IF i_tip_doc_trib = '3' THEN
         -- JCFS 10/05/2010: Se agrega el Tipo de Persona '4'
         IF i_tip_persona IN ('2', '4') THEN
            IF Substr(i_num_doc_trib,1,2) = '10' THEN
               li_resultado  := -1;
            END IF;
         END IF;

         IF i_tip_persona IN ('1', '3') THEN
            IF Substr(i_num_doc_trib,1,2) = '20' THEN
               li_resultado  := -1;
            END IF;
         END IF;
      END IF;
   END IF;
 --  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_109;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_56
        (i_tip_doc_trib     IN VARCHAR2,
         i_num_doc_trib     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    14/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tip_doc_trib :  Tipo de documento tributario Reportado a validar
--           i_num_doc_trib :  Numero de documento tributario Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el tipo y numero de documento tributario reportado no este duplicado en el maestro
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_56 ('3','12345670211','RCM');
---------------------
  li_resultado      Integer;
  ln_num_doc_trib_dup     cri_persona.cod_sbs%type;

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;
   IF (i_tip_doc_trib IS NOT NULL) AND (i_num_doc_trib IS NOT NULL) AND
      i_tip_doc_trib > ' ' AND i_num_doc_trib > ' ' AND
      i_num_doc_trib <> '00000000000' THEN
      IF i_tip_doc_trib = '2' THEN
         ln_num_doc_trib_dup := 0;
         BEGIN
            SELECT count(1) INTO ln_num_doc_trib_dup
              FROM CRI_PERSONA
             WHERE num_ruc = i_num_doc_trib
               AND (tip_condicion <> 'RPZDO' OR tip_condicion IS NULL);

            IF SQL%Rowcount <> 0 THEN
               IF ln_num_doc_trib_dup > 1 THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         EXCEPTION
            WHEN OTHERS THEN
               li_resultado  := -1;
         END;
      END IF;
--
      IF i_tip_doc_trib = '3' THEN
         ln_num_doc_trib_dup := 0;
         BEGIN
            SELECT count(1) INTO ln_num_doc_trib_dup
              FROM CRI_PERSONA
             WHERE num_ruc11 = i_num_doc_trib AND (tip_condicion <> 'RPZDO' OR tip_condicion IS NULL);

            IF SQL%Rowcount <> 0 THEN
               IF ln_num_doc_trib_dup > 1 THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         EXCEPTION
            WHEN OTHERS THEN
               li_resultado  := -1;
         END;
      END IF;
   END IF;
 --  END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_56;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_67
        (i_tip_persona      IN VARCHAR2,
         i_tip_doc_iden     IN VARCHAR2,
         i_ind_fijo_doc_id  IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 14/06/2006
-- Descripción: Valida el Tipo de Documento de Identidad reportado
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona :  Tipo de persona Reportado a validar
--           i_tip_doc_iden :  Tipo de documento de ID Reportado a validar
--           i_ind_fijo_doc_id :  Indicador del tipo de documento ID
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_67 ('3','12345670211','','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Se restringe los valores del Tipo de Documento de Identidad
------------------------------------------------------------------------------------------

li_resultado   Integer;

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_tip_persona > ' ' AND i_tip_persona IN ('1', '3') THEN
-- 22 SET 2003 (JLT) Se incluye tipo de documento '9'
-- IF (cur.tip_doc_iden NOT IN ('1', '2', '3', '4', '5'))

-- JCFS 17/05/2010: Se acepta solo los valores 1, 2, 3, 4 y 5
-- IF (i_tip_doc_iden NOT IN ('1', '2', '3', '4', '5', '9'))  OR
      IF (i_tip_doc_iden NOT IN ('1', '2', '3', '4', '5', '9')) OR
         (i_tip_doc_iden IS NULL AND i_ind_fijo_doc_id IS NULL) THEN
         li_resultado  := -1;
      END IF;
   END IF;
--  END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_67;

---------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_230
        (i_cod_sbs          IN NUMBER  ,
         i_tip_persona      IN VARCHAR2,
         i_tip_doc_iden     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    14/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_cod_sbs      :  Codigo SBS Reportado a validar
--           i_tip_persona :  Tipo de persona Reportado a validar
--           i_tip_doc_iden :  Tipo de documento de ID Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el tipo de documento Identidad reportado para clientes nuevos
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_230 (0,'3','4','RCM');
---------------------

li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

-- FVSH 20051016 cambio por Resolucion RENIEC Agosto 2005
-- Resolucion Jefatural 789-2005 (a partir 01/08/2005 solo se acepta DNI como documento de identificacion a nivel nacional)
-- verifica que los clientes nuevos no sean reportados con canert de las fuerza armadas

   -- verifica si es cliente nuevo
   IF nvl(i_cod_sbs,0) = 0 THEN
      -- tiene que ser persona natural o mancomuna
      IF i_tip_persona > ' ' AND i_tip_persona IN ('1', '3')  THEN
         -- Tipo de documento Carnet FFAA y FFPP
         IF (i_tip_doc_iden IN ('3', '4')) THEN
            li_resultado  := -1;
         END IF;
      END IF;
   END IF;
--  END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_230;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_68
        (i_tip_persona      IN VARCHAR2,
         i_num_doc_iden     IN VARCHAR2,
         i_ind_fijo_doc_id  IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )

RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    14/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tip_persona :  Tipo de persona Reportado a validar
--           i_num_doc_iden :  Numero de documento de ID Reportado a validar
--           i_ind_fijo_doc_id :  Indicador del Numero de documento de ID
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el numero de documento Identidad reportado
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_68 ('1','34567891','','RCM');
---------------------

li_resultado    Integer;

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_tip_persona IN ('1', '3') THEN
-- IF cur.num_doc_iden IS NULL OR cur.num_doc_iden IN (' ', '0') THEN
-- FVSH 2004-07-23
-- Ajuste al control para que no acepte valores blancos o ceros
-- Si se cumple esta condicion entonces los valores enviados son blancos o ceros
      IF i_num_doc_iden IS NULL OR
         i_num_doc_iden IN (' ', '0') OR
         nvl(length(trim(i_num_doc_iden)),0) = 0 OR
--         nvl(length(trim(translate(i_num_doc_iden,'0',' '))),0) = 0 OR
         nvl(length(trim(translate(i_num_doc_iden,'0',' '))),0) = 0 THEN
         IF i_ind_fijo_doc_id IS NULL THEN
            li_resultado  := -1;
         END IF;
      END IF;
   END IF;
--  END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
      RETURN -1;
END SF_VALIDA_CONTROL_68;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_69
        (i_tip_persona      IN VARCHAR2,
         i_tip_doc_iden     IN VARCHAR2,
         i_num_doc_iden     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )

RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 14/06/2006
-- Descripción: Valida el numero de documento Identidad reportado con el tipo de persona
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona :  Tipo de persona Reportado a validar
--           i_tip_doc_iden :  Tipo de documento de ID Reportado a validar
--           i_num_doc_iden :  Numero de documento de ID Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_69 ('1','1','34567891','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Se valida que no reporte Documento de Identidad, tanto para Tipo de Persona 2 como para 4
----------------------------------------------------------------

li_resultado    Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   /*IF i_tip_persona  = '2' AND (i_num_doc_iden IS NOT NULL) AND i_num_doc_iden > ' ' THEN*/
   -- JCFS 17/05/2010: Se agrega a la validación el tipo de Persona 4
   IF i_tip_persona IN ('2', '4') AND
      (i_num_doc_iden IS NOT NULL) AND NVL(LENGTH(TRIM(i_num_doc_iden)),0) > 0 THEN

      -- FVSH 2004-07-19
      -- Ajuste al control para que acepte valores blancos o ceros
      -- Si se cumple esta condicion entonces los valores enviados no son blancos ni ceros
      /* IF nvl(length(trim(translate(translate(i_num_doc_iden,' ','x'),'0',' '))),0) > 0 OR nvl(length(trim(i_num_doc_iden)),0) > 0 THEN*/
      IF nvl(length(trim (translate(translate(i_num_doc_iden,' ','x'),'0',' ')) ),0) > 0   THEN
         li_resultado  := -1;
      END IF;
   END IF;

   IF i_tip_persona IN ('1', '3') THEN
      IF i_tip_doc_iden = '1' AND LENGTH(i_num_doc_iden) <> 8 THEN
         li_resultado  := -1;
      END IF;
   END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_69;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_70
        (i_tip_persona      IN VARCHAR2,
         i_tip_doc_iden     IN VARCHAR2,
         i_num_doc_iden     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    14/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_tip_persona :  Tipo de persona Reportado a validar
--           i_tip_doc_iden :  Tipo de documento de ID Reportado a validar
--           i_num_doc_iden :  Numero de documento de ID Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida si existe duplicidad en el maestro del numero de documento Identidad reportado
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_70 ('1','1','34567891','RCM');
---------------------

li_resultado      Integer;
ln_num_doc_iden_dup   cri_persona.cod_sbs%type;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF (i_tip_doc_iden IS NOT NULL) AND (i_num_doc_iden IS NOT NULL) AND
      i_tip_doc_iden > ' ' AND i_num_doc_iden > ' ' THEN
      IF i_tip_persona = '1' THEN
         ln_num_doc_iden_dup := 0;
         BEGIN
            SELECT count(1) INTO ln_num_doc_iden_dup
              FROM CRI_PERSONA_NAT A, CRI_PERSONA B
             WHERE A.tip_docto_ident = i_tip_doc_iden
               AND A.num_docto_ident = i_num_doc_iden
               AND B.cod_sbs         = A.cod_sbs
               AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

            IF SQL%Rowcount <> 0 THEN
               IF ln_num_doc_iden_dup > 1 THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         EXCEPTION
            WHEN OTHERS THEN
               li_resultado  := -1;
         END;
      END IF;

      IF i_tip_persona = '3' THEN
         ln_num_doc_iden_dup := 0;
         BEGIN
            SELECT count(1) INTO ln_num_doc_iden_dup
              FROM CRI_PERSONA_NOID A, CRI_PERSONA B
             WHERE A.tip_docto_ident = i_tip_doc_iden
               AND A.num_docto_ident = i_num_doc_iden
               AND B.cod_sbs         = A.cod_sbs
               AND (B.tip_condicion <> 'RPZDO' OR B.tip_condicion IS NULL);

            IF SQL%Rowcount <> 0 THEN
               IF ln_num_doc_iden_dup > 1 THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         EXCEPTION
            WHEN OTHERS THEN
               li_resultado  := -1;
            END;
         END IF;
      END IF;
 --  END IF;
  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_70;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_44
        (i_tip_residencia   IN VARCHAR2,
         i_tip_doc_iden     IN VARCHAR2,
         i_num_doc_iden     IN VARCHAR2,
         i_num_doc_trib     IN VARCHAR2,
         i_cod_sunarp       IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )

RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 14/06/2006
-- Descripción: Valida el tipo de residencia reportado y la relacion con el doc de ID
----------------------------------------------------------------
-- Parámetros:
--           i_tip_residencia : Tipo de residencia Reportado a validar
--           i_tip_doc_iden :  Tipo de documento de ID Reportado a validar
--           i_num_doc_iden :  Numero de documento de ID Reportado a validar
--           i_num_doc_trib :  Numero de documento tributario Reportado a validar
--           i_cod_sunarp   : Codigo Sunarp reportado
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_44 ('1','1','34567891','123123123123','','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Se reemplaza el Tipo de Residencia 0 por los valores 3 y 4
----------------------------------------------------------------

li_resultado    Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   -- JCFS 17/05/2010: Se reemplaza el Tipo de Residencia 0 por los valores 3 y 4
   -- JCFS 08/07/2011: Se modifica el Control para que solo se active en el caso de Tipo de Residencia 4
   -- IF i_tip_residencia = '0' AND  -- AND cur.tip_doc_iden IN ('1', '3', '4')
   IF i_tip_residencia = '4' AND i_tip_doc_iden <> '9' AND
      ( i_num_doc_iden > ' ' OR i_num_doc_trib > ' ' OR i_cod_sunarp > ' ') THEN
      -- Se activa el control del tipo documento. Caso clientes Bolivianos
      li_resultado  := -1;
   END IF;
 --  END IF;
  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_44;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_92
        (i_tip_persona    IN VARCHAR2,
         i_tip_rellab     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )

RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 15/06/2006
-- Descripción: Valida el tipo de persona y la relacion con el tipo de relacion laboral
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona : Tipo de persona Reportado a validar
--           i_tip_rellab :  Tipo de relación laboral Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_92 ('1','1','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Se valida que la persona pueda ser de Tipo '4' (además de '2')
----------------------------------------------------------------
li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
      li_resultado  := 1;
      -- IF (cur.tip_rellab NOT IN ('0', '1', '2', '3', '4'))
      -- FVSH 808 Mayo 2004
      -- se ingreso un nuevo valor para Relacion laboral: "5"
      IF (i_tip_rellab NOT IN ('0', '1', '2', '3', '4', '5')) OR (i_tip_rellab IS NULL) THEN
         li_resultado := -1;
      ELSE
      -- FVSH 20040913
      -- Ajuste realizado para tener coherencia con el diseño del RCD
      -- IF cur.tip_persona IN ('2', '3')
      -- JCFS 17/05/2010: Se agrega el Tipo de Persona '4'
         IF i_tip_persona IN ('2', '4') AND i_tip_rellab IN ('1', '2', '3', '4', '5') THEN
            li_resultado  := -1;
         END IF;
      END IF;
--  END IF;
   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_92;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_106
        (i_cod_sbs      IN NUMBER,
         i_cod_pais     IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_cod_sbs : Codigo SBS Reportado a validar
--           i_cod_pais :  Codigo de pais Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el Codigo de pais reportado y relacionado al CODIGO SBS
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_106 (1213,'1','RCM');
---------------------

li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;
   IF i_cod_pais IS NULL OR i_cod_pais IN (' ', '0') THEN
--    12.ABR.2002 JLT : "Para el caso de clientes nuevos es obligatorio el código de país".
--    "En caso se trate de un cliente antiguo en el sistema, se tomará el dato de código de país del maestro de personas".
--    (Reunión de la Comisión de Criterios de Aceptación del R.C.D. del 12.ABR.2002).
      IF i_cod_sbs = 0 THEN
         li_resultado  := -1;
      END IF;
   END IF;
--  END IF;
   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_106;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_107
        (i_cod_pais     IN VARCHAR2,
         i_reporte      IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 15/06/2006
-- Descripción: Valida que el Codigo de País reportado exista en el Maestro de Países
----------------------------------------------------------------
-- Parámetros:
--           i_cod_pais :  Codigo de pais Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_107 ('4028','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Se valida los nuevos valores de los códigos de Países
----------------------------------------------------------------
li_resultado  Integer;
-- lv_des_pais   adm_elemento.des_elemento%type;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF (i_cod_pais IS NOT NULL) AND i_cod_pais > ' ' THEN
   /*
   BEGIN
      -- JCFS 26/05/2010: Se reemplaza la tabla COD_PAIS_INEI por COD_PAIS_ISO3166
      SELECT DES_ELEMENTO INTO lv_des_pais
        FROM ADM_ELEMENTO
       WHERE cod_tabla = 'COD_PAIS_ISO3166' AND cod_elemento = i_cod_pais;

      IF SQL%ROWCOUNT = 0 THEN
         li_resultado  := -1;
      END IF;

   EXCEPTION
      WHEN OTHERS THEN
         li_resultado  := -1;
   END;
   */
   -- JCFS 03/08/2010: Se reemplaza la llamada al query por una búsqueda en la Tabla Indexada (cargada en el Proceso de Validación) */
      IF NOT colInxAdmElemento.EXISTS(i_cod_pais) THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_107;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_108
        (i_cod_sbs       IN NUMBER,
         i_cod_pais      IN VARCHAR2,
         i_tip_doc_iden  IN VARCHAR2,
         i_cod_pais_mae  IN VARCHAR2,
         i_reporte       IN VARCHAR2
         )

RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 15/06/2006
-- Descripción: Valida el Codigo de pais reportado exista en nuestro maestro de paises
----------------------------------------------------------------
-- Parámetros:
--           i_cod_sbs :  Codigo SBS Reportado a validar
--           i_cod_pais :  Codigo de pais Reportado a validar
--           i_tip_doc_iden :  Tipo de documento ID Reportado a validar
--           i_cod_pais_mae :  Codigo de pais del maestro a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_108 (0,'4028','1','4124','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Se valida los nuevos valores de los códigos de Países
----------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   -- JCFS 17/05/2010: Se reemmplaza el código 4028 por PE y se elimina el 9 de los Tipos de Documento
   IF i_cod_pais = 'PE' THEN  -- '4028'
-- 14.MAR.2002 (JLT) Queda sin efecto
-- IF cur.tip_residencia = '0' OR cur.tip_doc_iden IN ('2', '5') THEN
-- 22 SET 2003 (JLT) Se incluye tipo de documento '9'
-- IF cur.tip_doc_iden IN ('2', '5') THEN
      IF i_tip_doc_iden IN ('2', '5') THEN  -- , '9'
         IF i_cod_sbs = 0 THEN
            li_resultado  := -1;
         ELSE
            IF ltrim(rtrim(i_cod_pais_mae)) <> 'PE' THEN  -- '4028'
               li_resultado  := -1;
            END IF;
         END IF;
      END IF;
   ELSE
-- 14.MAR.2002 (JLT) Queda sin efecto
-- IF cur.tip_residencia = '1' OR cur.tip_doc_iden IN ('1', '3', '4') THEN
      IF i_tip_doc_iden IN ('1', '3', '4') THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_108;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_59
        (i_nom_cliente    IN VARCHAR2,
         i_reporte        IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_nom_cliente :  Nombre cliente Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el Codigo de pais reportado exista en nuestro maestro de paises
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_59 ('FRANCISCO VITE SHELTON','RCM');
---------------------
  li_resultado      Integer;

BEGIN
--  IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_nom_cliente IS NULL OR i_nom_cliente IN (' ') THEN
      li_resultado  := -1;
   END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_59;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_60
        (i_cod_sbs        IN NUMBER,
         i_tipo_persona   IN VARCHAR2,
         i_nom_cliente    IN VARCHAR2,
         i_reporte        IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 15/06/2006
-- Descripción: Valida que el nombre no contenga caracteres extraños
----------------------------------------------------------------
-- Parámetros:
--           i_cod_sbs      :  Codigo SBS Reportado a validar
--           i_tipo_persona :  Tipo de persona Reportado a validar
--           i_nom_cliente :  Nombre cliente Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_60 (123,'1','FRANCISCO VITE SHELTON','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Para la lógica del Tipo de Persona 2 se agrega el Tipo 4
-- 17/04/2015   Juan Carlos Fernández S.  Se agrega la coma (,) como caracter valido para la razón social de las personas jurídicas
-- 26/10/2017   Juan Carlos Fernández S.  Se agrega todas las vocales con diéresis como caracteres válidos
------------------------------------------------------------------------------------------
  li_resultado         Integer;
  ln_long_nom_cliente  Integer;
  ln_loop              Integer;
  ln_blancos           Integer;
  ln_invalidos         Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

-- Nombre del Cliente
   IF i_cod_sbs = 0 THEN
      IF Substr(i_nom_cliente,1,1) IN (' ') THEN
         li_resultado  := -1;
      ELSE
         ln_long_nom_cliente := LENGTH(i_nom_cliente);
         ln_loop := 1;
         ln_blancos := 0;
         ln_invalidos := 0;

         FOR ln_loop in 1..ln_long_nom_cliente LOOP
            IF i_tipo_persona = '1' THEN
               -- JCFS 07/10/2015: Se agrega los dígitos (0 al 9) como caracteres válidos para la razón social de las personas naturales
               IF Substr(i_nom_cliente, ln_loop, 1) NOT IN ('A','B','C','D','E','F','G','H','I','J','K','L','M','N',
                                                            'O','P','Q','R','S','T','U','V','W','X','Y','Z','#','-',
                                                            'Á','É','Í','Ó','Ú','Ä','Ë','Ï','Ö','Ü',' ',
                                                            '1','2','3','4','5','6','7','8','9','0') THEN
                  ln_invalidos := ln_invalidos + 1;
                  IF Substr(i_nom_cliente, ln_loop, 1) > '&' AND Substr(i_nom_cliente, ln_loop, 1) < '(' THEN
                     ln_invalidos := ln_invalidos - 1;
                  END IF;
               END IF;
            END IF;

            IF i_tipo_persona = '2' THEN
               -- JCFS 17/04/2015: Se agrega la coma (,) como caracter valido para la razón social de las personas jurídicas
               IF Substr(i_nom_cliente, ln_loop, 1) NOT IN ('A','B','C','D','E','F','G','H','I','J','K','L','M','N',
                                                            'O','P','Q','R','S','T','U','V','W','X','Y','Z','#','&',
                                                            '1','2','3','4','5','6','7','8','9','0','+',' ','/','@',
                                                            '''','-','Á','É','Í','Ó','Ú','Ä','Ë','Ï','Ö','Ü','''''',',') THEN
                  ln_invalidos := ln_invalidos + 1;
                  IF Substr(i_nom_cliente, ln_loop, 1) > '&' AND Substr(i_nom_cliente, ln_loop, 1) < '(' THEN
                     ln_invalidos := ln_invalidos - 1;
                  END IF;
               END IF;
            END IF;

            -- JCFS 17/05/2010: Se agrega el Tipo de Persona 4 (misma lógica que el Tipo de Persona 2)
            IF i_tipo_persona = '4' THEN
               IF Substr(i_nom_cliente, ln_loop, 1) NOT IN ('A','B','C','D','E','F','G','H','I','J','K','L','M','N',
                                                            'O','P','Q','R','S','T','U','V','W','X','Y','Z','#','&',
                                                            '1','2','3','4','5','6','7','8','9','0','+',' ','/','@',
                                                            '-','Á','É','Í','Ó','Ú','Ä','Ë','Ï','Ö','Ü',',') THEN
                  ln_invalidos := ln_invalidos + 1;
                  IF Substr(i_nom_cliente, ln_loop, 1) > '&' AND Substr(i_nom_cliente, ln_loop, 1) < '(' THEN
                     ln_invalidos := ln_invalidos - 1;
                  END IF;
               END IF;
            END IF;

            IF i_tipo_persona = '3' THEN
                IF Substr(i_nom_cliente, ln_loop, 1) NOT IN ('A','B','C','D','E','F','G','H','I','J','K','L','M','N',
                                                             'O','P','Q','R','S','T','U','V','W','X','Y','Z','#','/',
                                                             '-','Á','É','Í','Ó','Ú','Ä','Ë','Ï','Ö','Ü',' ',
                                                             '1','2','3','4','5','6','7','8','9','0',',') THEN
                  ln_invalidos := ln_invalidos + 1;
                  IF Substr(i_nom_cliente, ln_loop, 1) > '&' AND Substr(i_nom_cliente, ln_loop, 1) < '(' THEN
                     ln_invalidos := ln_invalidos - 1;
                  END IF;
               END IF;
            END IF;

            IF Substr(i_nom_cliente, ln_loop, 2) = '  ' THEN
               ln_blancos := ln_blancos + 1;
            END IF;
         END LOOP;

         IF ln_blancos > 0 OR ln_invalidos > 0 THEN
            li_resultado  := -1;
         END IF;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_60;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_104
        (i_nom_cliente      IN VARCHAR2,
         i_tipo_persona     IN VARCHAR2,
         i_ind_fijo_nombre  IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )

RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_nom_cliente :  Nombre cliente Reportado a validar
--           i_tipo_persona :  Tipo de persona Reportado a validar
--           i_ind_fijo_nombre :  Indicador fijo del nombre cliente
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Persona natural con menos de 3 palabras en el nombre y no sustentado
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_104 ('FRANCISCO VITE SHELTON','1','','RCM');
---------------------
  li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

--FVSH_NC  IF (cur.nom_cliente IS NOT NULL) AND cur.nom_cliente > ' ' AND cur.tip_persona = '1' AND  Substr(cur.nom_cliente,2,2) IN ('', '  ') THEN
   IF (i_nom_cliente IS NOT NULL) AND i_nom_cliente > ' ' AND
      i_tipo_persona = '1' AND Substr(i_nom_cliente, 2, 2) IN ('', '  ') THEN
      IF i_ind_fijo_nombre IS NULL THEN
         li_resultado  := -1;
      END IF;
   END IF;
--  END IF;

  Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_104;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_105
        (i_nom_cliente      IN VARCHAR2,
         i_tipo_persona     IN VARCHAR2,
         i_ind_fijo_nombre  IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )

RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_nom_cliente :  Nombre cliente Reportado a validar
--           i_tipo_persona :  Tipo de persona Reportado a validar
--           i_ind_fijo_nombre :  Indicador fijo del nombre cliente
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el nombre del cliente dependiendo el tipo persona
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_105 ('FRANCISCO VITE SHELTON','3','','RCM');
---------------------
  li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

-- FVSH_NC  IF (cur.nom_cliente IS NOT NULL) AND cur.nom_cliente > ' ' AND cur.tip_persona = '3' AND  Substr(cur.nom_cliente,4,2) IN ('', '  ') THEN
   IF (i_nom_cliente IS NOT NULL) AND i_nom_cliente > ' ' AND
      i_tipo_persona = '3' AND Substr(i_nom_cliente, 4, 2) IN ('', '  ') THEN
      IF i_ind_fijo_nombre IS NULL THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_105;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_228
        (i_ind_riesgo_camb_cred      IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_ind_riesgo_camb_cred :  Indicador del Riesgo Cambiario crediticio Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el Indicador de Riesgo Cambiario
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_228 ('3','RCM');
---------------------
li_resultado  Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF nvl(length(nvl(i_ind_riesgo_camb_cred,'')),0) = 0 OR i_ind_riesgo_camb_cred IS NULL THEN  -- No informo indicador
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_228;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_229
        (i_ind_riesgo_camb_cred      IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Francisco Vite Shelton - 15/06/2006
-- Descripción: Valida el Indicador de Riesgo Cambiario
----------------------------------------------------------------
-- Parámetros:
--           i_ind_riesgo_camb_cred :  Indicador del Riesgo Cambiario crediticio Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_229 ('3','RCM');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
-- Revisiones:
--    Fecha             Autor             Descripción del Cambio
-- -----------  ------------------------  ------------------------------------------------
-- 17/05/2010   Juan Carlos Fernández S.  Se agrega el nuevo dato de '3' como válido
----------------------------------------------------------------
li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   -- JCFS 18/05/2010: Se agrega el valor de '3'
   IF (i_ind_riesgo_camb_cred NOT IN ('0', '1', '2', '3')) THEN
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_229;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_231
        (i_ind_atraso      IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_ind_atraso :  Indicador de atraso Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el Indicador de atraso
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_231 ('3','RCM');
---------------------
li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF nvl(length(nvl(i_ind_atraso,'')),0) = 0 OR i_ind_atraso IS NULL THEN  -- no informo indicador
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_231;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_232
        ( i_ind_atraso      IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_ind_atraso :  Indicador de atraso Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el Indicador de atraso
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_232 ('3','RCM');
---------------------
li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF (i_ind_atraso NOT IN ('A','B','C','D','E','F','G','H','X')) THEN
      li_resultado  := -1;
   END IF;
-- END IF;
   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_232;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_233
        (i_clasif_interna_ent      IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_clasif_interna_ent :  Clasificacion interna en la entidad a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida la clasificacion interna del deudor en la entidad
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_233 ('XXXXX','RCM');
---------------------
li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF nvl(length(nvl(i_clasif_interna_ent,'')),0) = 0 OR i_clasif_interna_ent IS NULL THEN  -- no informo clasificacion
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_233;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_234
        (i_clasif_interna_ent      IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Francisco Vite Shelton    15/06/2006    Oracle 8i
---------------------
--       Parametros
--           i_clasif_interna_ent :  Clasificacion interna en la entidad a validar
--           i_reporte            :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida la clasificacion interna del deudor en la entidad
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_234 ('XXXXX','RCM');
---------------------
li_resultado      Integer;

BEGIN
   li_resultado  := 1;

   IF length(trim(i_clasif_interna_ent)) > 5 THEN
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_234;

----------------------------------------------------------------------

/**** JCFS 21/05/2010: Nuevos Controles definidos para implementar la Resolución 11356 ****/

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_110
        (i_tip_persona      IN VARCHAR2,
         i_num_doc_trib     IN VARCHAR2,
         i_reporte          IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 21/05/2010
-- Descripción: Valida si se ha informado RUC en Personas Naturales
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona  : Indicador del Tipo de Persona
--           i_num_doc_trib : Número de Documento Tributario (RUC)
--           i_reporte      : Código de reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_110 ('1', '', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

-- RUC informado en personas naturales
   IF i_tip_persona = '1' THEN
      IF NOT(i_num_doc_trib IS NULL OR i_num_doc_trib IN (' ', '0')) THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_110;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_111
        (i_tip_residencia IN VARCHAR2,
         i_cod_pais       IN VARCHAR2,
         i_reporte        IN VARCHAR2
         )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 21/05/2010
-- Descripción: Valida que el País de Nacimiento de No Residentes debe ser distinto a Perú
----------------------------------------------------------------
-- Parámetros:
--           i_tip_residencia :  Tipo de Residencia
--           i_cod_pais       :  Codigo de pais Reportado a validar
--           i_reporte        :  Codigo reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_108 ('2', 'PE', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_cod_pais = 'PE' THEN
     /* Tipo de Residencia:
        1  Residente en el país
        2  Residente con Casa Matriz en el exterior
        3  No residente con nacionalidad peruana
        4  Otros no residentes    */
      IF i_tip_residencia IN ('2', '4') THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_111;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_237
        ( i_cla_deu_sin_ali IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Valida si la Clasificación del Deudor sin Alineamiento ha sido informada
----------------------------------------------------------------
-- Parámetros:
--           i_cla_deu_sin_ali : Clasificación del Deudor sin Alineamiento
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_237 ('2', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_cla_deu_sin_ali IS NULL OR i_cla_deu_sin_ali = ' ' THEN
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_237;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_238
        ( i_cla_deu_sin_ali IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Verifica si la Clasificación del Deudor sin Alineamiento es válida (es del 0 al 4, o es 8)
----------------------------------------------------------------
-- Parámetros:
--           i_cla_deu_sin_ali : Clasificación del Deudor sin Alineamiento
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_237 ('2', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   -- (nvl(i_cla_deu_sin_ali, ' ') = ' ')  OR (
   IF i_cla_deu_sin_ali NOT IN ('0', '1', '2', '3', '4', '8') THEN
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_238;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_239
        ( i_tip_persona     IN VARCHAR2,
          i_pais_resid      IN VARCHAR2,
          i_magnitud        IN VARCHAR2,
          i_docum_tribut    IN VARCHAR2,
          i_tip_doc_ide     IN VARCHAR2,
          i_tip_doc_ide_com IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Verifica si el Tipo de Documento de Identidad Complementario ha sido informado
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona     : Tipo de Persona
--           i_pais_resid      : País de Residencia
--           i_magnitud        : Magnitud del Cliente
--           i_tip_doc_ide     : Tipo de Documento de Identidad
--           i_tip_doc_ide_com : Tipo de Documento de Identidad Complementario
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_239 ('05', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_pais_resid IS NOT NULL AND i_pais_resid NOT IN (' ', '0') THEN
      IF i_tip_doc_ide_com IS NULL OR nvl(RTrim(i_tip_doc_ide_com), ' ') = ' ' THEN  -- OR i_tip_doc_ide_com = '00'
         IF i_tip_persona = '1' THEN
            -- i_magnitud = 5: Persona Natural con Negocio
            IF i_pais_resid = 'PE' THEN
               -- Tipo de Identificación es DNI
               IF i_magnitud = 5 AND i_tip_doc_ide = '1' THEN
                  li_resultado  := -1;
               END IF;
            ELSE
               -- Tipo de Identificación es Carné de Extranjería / Pasaporte
               IF i_magnitud = 5 AND i_tip_doc_ide IN ('2', '5') THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         ELSIF i_tip_persona = '2' AND i_pais_resid <> 'PE' THEN
            IF i_docum_tribut IS NULL OR i_docum_tribut IN (' ', '0', '00000000000') THEN
               li_resultado  := -1;
            END IF;
         END IF;
      END IF;
   END IF;

-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_239;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_240
        ( i_tip_doc_ide_com IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Valida si el Tipo de Documento de Identidad Complementario es válido (es 05, 06, 11, 12, 13 o 19)
----------------------------------------------------------------
-- Parámetros:
--           i_tip_doc_ide_com : Tipo de Documento de Identidad Complementario
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_239 ('05', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_tip_doc_ide_com NOT IN ('05', '06', '11', '12', '13', '19') THEN
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_240;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_241
        ( i_tip_persona     IN VARCHAR2,
          i_pais_resid      IN VARCHAR2,
          i_magnitud        IN VARCHAR2,
          i_docum_tribut    IN VARCHAR2,
          i_tip_doc_ide     IN VARCHAR2,
          i_tip_doc_ide_com IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Verifica que el Tipo de Documento de Identidad Complementario corresponda al Tipo de Persona, Nacionalidad y Tipo de Documento de Identidad
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona     : Tipo de Persona
--           i_pais_resid      : País de Residencia
--           i_magnitud        : Magnitud del Cliente
--           i_tip_doc_ide     : Tipo de Documento de Identidad
--           i_tip_doc_ide_com : Tipo de Documento de Identidad Complementario
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_239 ('05', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_pais_resid IS NOT NULL AND RTrim(i_pais_resid) NOT IN ('', '0') THEN
      IF i_tip_persona = '1' THEN
         IF i_pais_resid = 'PE' THEN
            IF i_magnitud = 5 THEN
               IF i_tip_doc_ide = '1' AND i_tip_doc_ide_com <> '06' THEN
                  li_resultado  := -1;
               END IF;
            ELSIF i_magnitud = 0 THEN
               IF i_tip_doc_ide = '1' AND RTrim(i_tip_doc_ide_com) NOT IN ('', '06') THEN
                  li_resultado  := -1;
               END IF;
            END IF;
         ELSE
            IF i_magnitud = 5 THEN
               IF i_tip_doc_ide = '2' THEN
                  IF i_tip_doc_ide_com NOT IN ('05', '06', '19') THEN
                     li_resultado  := -1;
                  END IF;
               ELSIF i_tip_doc_ide = '5' THEN
                  IF i_tip_doc_ide_com NOT IN ('06', '19') THEN
                     li_resultado  := -1;
                  END IF;
               ELSIF nvl(RTrim(i_tip_doc_ide), ' ') = ' ' THEN
                  IF i_tip_doc_ide_com <> '19' THEN
                     li_resultado  := -1;
                  END IF;
               END IF;
            ELSIF i_magnitud = 0 THEN
               IF i_tip_doc_ide = '2' THEN
                  IF RTrim(i_tip_doc_ide_com) NOT IN ('', '05') THEN
                     li_resultado  := -1;
                  END IF;
               ELSIF i_tip_doc_ide = '5' THEN
                  IF RTrim(i_tip_doc_ide_com) NOT IN ('', '06', '19') THEN
                     li_resultado  := -1;
                  END IF;
               ELSIF nvl(RTrim(i_tip_doc_ide), ' ') = ' ' THEN
                  IF i_tip_doc_ide_com <> '19' THEN
                     li_resultado  := -1;
                  END IF;
               END IF;
            END IF;
         END IF;
      ELSIF i_tip_persona = '2' AND i_pais_resid <> 'PE' THEN
         IF i_docum_tribut IS NULL OR RTrim(i_docum_tribut) IN ('', '0', '00000000000') THEN
            IF i_tip_doc_ide_com NOT IN ('11', '12', '13', '19') THEN
               li_resultado  := -1;
            END IF;
         ELSIF RTrim(i_tip_doc_ide_com) NOT IN ('', '11', '12', '13', '19') THEN
            li_resultado  := -1;
         END IF;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_241;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_242
        ( i_tip_doc_ide_com IN VARCHAR2,
          i_doc_ide_com     IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Verifica si el Documento de Identidad Complementario ha sido informado
----------------------------------------------------------------
-- Parámetros:
--           i_tip_doc_ide : Tipo de Documento de Identidad
--           i_doc_ide_com : Documento de Identidad Complementario
--           i_reporte     : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_242 ('05', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   -- Si se reportó un Tipo de Documento de Identidad Complementario válido
   IF i_tip_doc_ide_com IN ('05', '06', '11', '12', '13', '19') THEN
      IF i_doc_ide_com IS NULL OR i_doc_ide_com = ' ' THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_242;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_243
        ( i_tip_doc_ide_com IN VARCHAR2,
          i_doc_ide_com     IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Verifica que el RUC Complementario cumpla con el módulo 11 o sea válido.
----------------------------------------------------------------
-- Parámetros:
--           i_tip_doc_ide_com : Tipo de Documento de Identidad Complementario
--           i_doc_ide_com     : Documento de Identidad Complementario
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_243 ('06', '20123456789' 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;
lb_valor       BOOLEAN;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_tip_doc_ide_com = '06' THEN  -- 'RUC'
      IF (i_doc_ide_com IS NOT NULL) AND i_doc_ide_com > ' ' AND i_doc_ide_com <> '00000000000' THEN
         IF LENGTH(i_doc_ide_com) <> 11 THEN
            li_resultado  := -1;
         ELSE
            lb_valor := SF_VERIFICA_MOD11(i_doc_ide_com, 'RUC');
            IF lb_valor = FALSE THEN
               li_resultado  := -1;
            END IF;
         END IF;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_243;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_244
        ( i_ano_refer     IN VARCHAR2,
          i_mes_refer     IN VARCHAR2,
          i_tip_credito   IN VARCHAR2,
          i_cod_cuenta    IN VARCHAR2,
          i_reporte       IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Verifica que un Tipo de Crédito con valor 99 no sea usado en una Cuenta de Deuda o Castigos
----------------------------------------------------------------
-- Parámetros:
--           i_ano_refer       : Año del Periodo
--           i_mes_refer       : Mes del Periodo
--           i_tip_credito     : Tipo de Crédito
--           i_cod_cuenta      : Código de Cuenta
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_243 ('06', '20123456789' 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado Integer;
li_rows      Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_tip_credito = '99' THEN  -- Tipo de Crédito con valor 99
      SELECT count(1) INTO li_rows
        FROM cra_rel_his_concepto_cuenta
       WHERE ano_refer = i_ano_refer AND mes_refer = i_mes_refer
         AND tip_plan = 'MF' AND num_version = 1
         AND cod_concepto IN (53, 68)
         AND cod_cta = i_cod_cuenta;

      IF SQL%Rowcount <> 0 AND li_rows > 0 THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_244;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_245
        ( i_fac_conv_cred IN VARCHAR2,
          i_reporte       IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 26/05/2010
-- Descripción: Valida si el Factor de Conversión Crediticio ha sido informado
----------------------------------------------------------------
-- Parámetros:
--           i_fac_conv_cred : Factor de Conversión Crediticio
--           i_reporte       : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_245 ('02', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_fac_conv_cred IS NULL OR i_fac_conv_cred = ' ' THEN
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_245;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_246
        ( i_fac_conv_cred IN VARCHAR2,
          i_reporte       IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 26/05/2010
-- Descripción: Verifica si el Factor de Conversión Crediticio es válido (es del 01 al 05, o es 99)
----------------------------------------------------------------
-- Parámetros:
--           i_fac_conv_cred : Factor de Conversión Crediticio
--           i_reporte       : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_246 ('02', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado   Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_fac_conv_cred NOT IN ('01', '02', '03', '04', '05', '99') THEN
      li_resultado  := -1;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_246;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_247
        ( i_tip_credito   IN VARCHAR2,
          i_fac_conv_cred IN VARCHAR2,
          i_reporte       IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 24/05/2010
-- Descripción: Verifica que el Factor de Conversión Crediticio no tenga valor 99 para un crédito Contingente
----------------------------------------------------------------
-- Parámetros:
--           i_tip_credito     : Tipo de Crédito
--           i_fac_conv_cred   : Factor de Conversión Crediticio
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_247 ('04', '99' 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_fac_conv_cred = '99' THEN
      IF i_tip_credito IN (' ', ' ') THEN  -- QUÉ TIPOS DE CRÉDITO SON CONTINGENTES????
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_247;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_181
        ( i_cod_cuenta      IN VARCHAR2,
          i_tip_credito_rep IN VARCHAR2,
          i_reporte         IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 16/06/2010
-- Descripción: Verifica que el Tipo de Crédito corresponda a la Cuenta
----------------------------------------------------------------
-- Parámetros:
--           i_cod_cuenta      : Código de Cuenta
--           i_tip_credito_rep : Tipo de Crédito Reportado
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_181 ('14010303040506', '06', 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado Integer;
ls_tip_credito_cta VARCHAR2(2);

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   ls_tip_credito_cta := substr(i_cod_cuenta, 5, 2);

   SELECT CASE WHEN ls_tip_credito_cta = '02' AND i_tip_credito_rep <> '10' THEN -1
               WHEN ls_tip_credito_cta = '03' AND i_tip_credito_rep NOT IN ('11', '12') THEN -1
               WHEN ls_tip_credito_cta = '04' AND i_tip_credito_rep <> '13' THEN -1
               WHEN ls_tip_credito_cta = '05' AND i_tip_credito_rep <> '03' THEN -1
               WHEN ls_tip_credito_cta = '06' AND i_tip_credito_rep <> '01' THEN -1
               WHEN ls_tip_credito_cta = '07' AND i_tip_credito_rep <> '02' THEN -1
               WHEN ls_tip_credito_cta = '08' AND i_tip_credito_rep <> '05' THEN -1
               WHEN ls_tip_credito_cta = '09' AND i_tip_credito_rep <> '04' THEN -1
               WHEN ls_tip_credito_cta = '10' AND i_tip_credito_rep <> '06' THEN -1
               WHEN ls_tip_credito_cta = '11' AND i_tip_credito_rep <> '07' THEN -1
               WHEN ls_tip_credito_cta = '12' AND i_tip_credito_rep <> '08' THEN -1
               WHEN ls_tip_credito_cta = '13' AND i_tip_credito_rep <> '09' THEN -1
               ELSE 1
          END
     INTO li_resultado
     FROM dual;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_181;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_248
        ( i_tip_persona   IN VARCHAR2,
          i_tip_credito   IN VARCHAR2,
          i_reporte       IN VARCHAR2
        )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 08/09/2010
-- Descripción: Verifica que un Tipo de Crédito con valores 01 al 05 no sea asignado a un Tipo de Persona Natural
----------------------------------------------------------------
-- Parámetros:
--           i_tip_persona     : Tipo de Persona
--           i_tip_credito     : Tipo de Crédito
--           i_reporte         : Código reporte a cargar (RCD/RTC)
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_248 ('1', '02' 'RCD');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado Integer;

BEGIN
-- IF i_reporte in ('RCD','RTC') THEN
   li_resultado  := 1;

   IF i_tip_persona = '1' THEN  -- Si es Persona Natural, el Tipo de Crédito no puede ser del 01 al 05
      IF i_tip_credito IN ('01', '02', '03', '04', '05') THEN
         li_resultado  := -1;
      END IF;
   END IF;
-- END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_248;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_82 ( i_num_ruc IN VARCHAR2 )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 12/08/2011
-- Descripción: Verifica que un RUC exista en el Maestro de Contribuyentes de la SUNAT
----------------------------------------------------------------
-- Parámetros:
--           i_num_ruc   : Número de RUC a verificar
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_82 ('20123456789');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado Integer;
li_count Integer := 0;

BEGIN
   li_resultado  := 1;

   SELECT count(1) INTO li_count from cri_ruc_1_dat_princ WHERE numruc = i_num_ruc;
   IF li_count < 1 THEN  -- El RUC no existe
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_82;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_83 ( i_num_ruc IN VARCHAR2, i_nom_ruc IN VARCHAR2 )
RETURN NUMBER
IS
----------------------------------------------------------------
-- Autor :      Juan Carlos Fernández Sánchez - 08/09/2011
-- Descripción: Verifica que la Razón Social de un RUC sea igual a la del Maestro de Contribuyentes de la SUNAT
----------------------------------------------------------------
-- Parámetros:
--           i_num_ruc   : Número de RUC a verificar
--           i_nom_ruc   : Razón Social del RUC a verificar
----------------------------------------------------------------
-- Ejecución:
--  PK_VALIDADOR.SF_VALIDA_CONTROL_83 ('20387289209', 'ORION ELECTRONICS S.A.C.');
----------------------------------------------------------------
-- Valor de Retorno:
--            -1  :  Error --> Activar control
--            0   :  Error --> Activar control
--            1   :  Validacion OK --> No Activar control
-- ---------------------------------------------------------------------------------------
li_resultado Integer;
ls_nom_ruc   cri_ruc_1_dat_princ.nombre%type;

BEGIN
   li_resultado := 1;

   SELECT nombre INTO ls_nom_ruc from cri_ruc_1_dat_princ WHERE numruc = i_num_ruc;
   IF ls_nom_ruc IS NULL THEN  -- El RUC no existe
      li_resultado  := -1;
   ELSIF trim(ls_nom_ruc) <> trim(i_nom_ruc) THEN
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_83;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_250 ( i_ind_sobre_endeudamiento IN VARCHAR2, i_reporte IN VARCHAR2 )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Juan Gonzalez Jimenez    29/04/2013    Oracle 10g
---------------------
--       Parametros
--           i_ind_sobre_endeudamiento :  Indicador de sobre endeudamiento Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD)
---------------------
--       Descripcion
--           Valida el Indicador de Sobre Endeudamiento
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_250 ('0','RCD');
---------------------
li_resultado      Integer;

BEGIN
   li_resultado  := 1;
   IF nvl(length(nvl(i_ind_sobre_endeudamiento,'')),0) = 0 OR i_ind_sobre_endeudamiento IS NULL THEN  -- no informo indicador
      li_resultado  := -1;
   END IF;
   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_250;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_251 ( i_ind_sobre_endeudamiento IN VARCHAR2, i_reporte IN VARCHAR2 )
RETURN NUMBER
IS
---------------------
--       Autor                     Fecha         Software
--       Juan Gonzalez Jimenez    29/04/2013    Oracle 10g
---------------------
--       Parametros
--           i_ind_sobre_endeudamiento :  Indicador de Sobre endeudamiento Reportado a validar
--           i_reporte    :  Codigo reporte a cargar (RCD/RTC)
---------------------
--       Descripcion
--           Valida el Indicador de sobre endeudamiento
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_251 ('0','RCD');
---------------------
li_resultado      Integer;

BEGIN
   li_resultado  := 1;
   IF (i_ind_sobre_endeudamiento NOT IN ('0','1','9')) THEN
      li_resultado  := -1;
   END IF;
   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_251;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_400 ( i_empresa IN VARCHAR2, i_anho IN VARCHAR2, i_mes IN VARCHAR2, i_num_sec IN NUMBER, i_tip_doc_trib IN VARCHAR2 )
RETURN NUMBER
IS
---------------------
--       Descripcion
--           Valida si el Tipo de documento tributario es diferente al informado en el RCD
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_400 ('2016','01','00004',1,'1');
---------------------
li_resultado      Integer;
li_count          Integer;
ls_tip_doc_trib   VARCHAR2(1);

BEGIN
   li_resultado  := 1;

   SELECT tip_doc_trib INTO ls_tip_doc_trib
     FROM cra_valid_identif_rcd
    WHERE ano_refer = i_anho
      AND mes_refer = i_mes
      AND cod_empresa = i_empresa
      AND num_sec_reg = i_num_sec;

   ls_tip_doc_trib := nvl(trim(ls_tip_doc_trib), ' ');
   IF ls_tip_doc_trib <> nvl(trim(i_tip_doc_trib), ' ') THEN
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_400;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_401 ( i_empresa IN VARCHAR2, i_anho IN VARCHAR2, i_mes IN VARCHAR2, i_num_sec IN NUMBER, i_num_doc_trib IN VARCHAR2 )
RETURN NUMBER
IS
---------------------
--       Descripcion
--           Valida si el (Número de) Documento tributario es diferente al informado en el RCD
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_401 ('2016','01','00004',1,'1');
---------------------
li_resultado      Integer;
li_count          Integer;
ls_num_doc_trib   VARCHAR2(11);

BEGIN
   li_resultado  := 1;

   SELECT num_doc_trib INTO ls_num_doc_trib
     FROM cra_valid_identif_rcd
    WHERE ano_refer = i_anho
      AND mes_refer = i_mes
      AND cod_empresa = i_empresa
      AND num_sec_reg = i_num_sec;

   ls_num_doc_trib := nvl(trim(ls_num_doc_trib), ' ');
   IF ls_num_doc_trib <> nvl(trim(i_num_doc_trib), ' ') THEN
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_401;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_402 ( i_empresa IN VARCHAR2, i_anho IN VARCHAR2, i_mes IN VARCHAR2, i_num_sec IN NUMBER, i_tip_doc_ident IN VARCHAR2 )
RETURN NUMBER
IS
---------------------
--       Descripcion
--           Valida si el Tipo de documento de identidad es diferente al informado en el RCD
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_402 ('2016','01','00004',1,'1');
---------------------
li_resultado      Integer;
li_count          Integer;
ls_tip_doc_ident  VARCHAR2(1);

BEGIN
   li_resultado  := 1;

   SELECT tip_doc_iden INTO ls_tip_doc_ident
     FROM cra_valid_identif_rcd
    WHERE ano_refer = i_anho
      AND mes_refer = i_mes
      AND cod_empresa = i_empresa
      AND num_sec_reg = i_num_sec;

   ls_tip_doc_ident := nvl(trim(ls_tip_doc_ident), ' ');
   IF ls_tip_doc_ident <> nvl(trim(i_tip_doc_ident), ' ') THEN
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_402;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_403 ( i_empresa IN VARCHAR2, i_anho IN VARCHAR2, i_mes IN VARCHAR2, i_num_sec IN NUMBER, i_num_doc_ident IN VARCHAR2 )
RETURN NUMBER
IS
---------------------
--       Descripcion
--           Valida si el (Número de) Documento de Identidad es diferente al informado en el RCD
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_403 ('2016','01','00004',1,'1');
---------------------
li_resultado      Integer;
li_count          Integer;
ls_num_doc_ident  VARCHAR2(12);

BEGIN
   li_resultado  := 1;

   SELECT num_doc_iden INTO ls_num_doc_ident
     FROM cra_valid_identif_rcd
    WHERE ano_refer = i_anho
      AND mes_refer = i_mes
      AND cod_empresa = i_empresa
      AND num_sec_reg = i_num_sec;

   ls_num_doc_ident := nvl(trim(ls_num_doc_ident), ' ');
   IF ls_num_doc_ident <> nvl(trim(i_num_doc_ident), ' ') THEN
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_403;

----------------------------------------------------------------------

FUNCTION SF_VALIDA_CONTROL_404 ( i_empresa IN VARCHAR2, i_anho IN VARCHAR2, i_mes IN VARCHAR2, i_num_sec IN NUMBER )
RETURN NUMBER
IS
---------------------
--       Descripcion
--           Valida si el Número de secuencia existe en el RCD
---------------------
--       Descripcion
--                 -1   :  Error --> Activar control
--                 0   :    Error --> Activar control
--                 1   :   Validacion OK --> No Activar control
---------------------
-- Ejecucion
--  PK_VALIDADOR.SF_VALIDA_CONTROL_404 ('2016','01','00004',1);
---------------------
li_resultado      Integer;
li_count          Integer;

BEGIN
   li_resultado  := 1;

   SELECT COUNT(1) INTO li_count
     FROM cra_valid_identif_rcd
    WHERE ano_refer = i_anho
      AND mes_refer = i_mes
      AND cod_empresa = i_empresa
      AND num_sec_reg = i_num_sec;

   IF li_count <= 0 OR SQL%Rowcount = 0 THEN
      li_resultado  := -1;
   END IF;

   Return li_resultado;

EXCEPTION
   WHEN OTHERS THEN
        RETURN -1;
END SF_VALIDA_CONTROL_404;

----------------------------------------------------------------------

END PK_VALIDADOR;
